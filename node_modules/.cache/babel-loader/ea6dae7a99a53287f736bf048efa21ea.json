{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nexport const isLoading = () => {\n  return {\n    type: actionTypes.BOOKLIST_ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.BOOKLIST_ERROR,\n    error: error\n  };\n};\nexport const SuccessMessage = message => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE_BOOK,\n    success_message: message\n  };\n};\nexport const getBookListDetail = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/getevent', data); //console.log(response);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.BOOKLIST_DETAIL,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getUpcommingBookList = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/events', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.BOOKLIST_LIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const acceptStatus = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/acceptstatus', data);\n\n      if (response.data.status === '1') {\n        console.log('response.data', response.data);\n        dispatch(Success({\n          type: actionTypes.STATUS_ACCEPT,\n          payload: response.data.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const pendingStatus = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/pendingStatus', data);\n\n      if (response.data.status === '1') {\n        console.log('response.data1', response.data);\n        dispatch(Success({\n          type: actionTypes.STATUS_PENDING,\n          payload: response.data.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const delete_booklist = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/delevents', data); // alert(response.data.status);\n\n      if (response.data.status === '1') {\n        await dispatch(getUpcommingBookList({\n          user_id: data.user_id\n        }));\n        dispatch(Success({\n          type: actionTypes.BOOKLIST_DELETE,\n          payload: response.data.data\n        }));\n        dispatch(SuccessMessage('Booking has been deleted successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getUpcommingEventList = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/events/events', data);\n      let payload;\n\n      if (response.data.status === 1) {\n        payload = response.data.data;\n      } else {\n        payload = response.data;\n      }\n\n      dispatch(Success({\n        type: actionTypes.EVENT_LIST,\n        payload: payload\n      }));\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/booklist.js"],"names":["actionTypes","Axios","isLoading","type","BOOKLIST_ISLOADING","Success","response","Fail","error","BOOKLIST_ERROR","SuccessMessage","message","SUCCESS_MESSAGE_BOOK","success_message","getBookListDetail","data","dispatch","post","status","BOOKLIST_DETAIL","payload","getUpcommingBookList","BOOKLIST_LIST","acceptStatus","console","log","STATUS_ACCEPT","pendingStatus","STATUS_PENDING","delete_booklist","user_id","BOOKLIST_DELETE","getUpcommingEventList","EVENT_LIST"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\n\nexport const isLoading = () => {\n  return {\n    type: actionTypes.BOOKLIST_ISLOADING,\n  };\n};\n\nexport const Success = (response) => {\n  return response;\n};\n\nexport const Fail = (error) => {\n  return {\n    type: actionTypes.BOOKLIST_ERROR,\n    error: error,\n  };\n};\n\nexport const SuccessMessage = (message) => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE_BOOK,\n    success_message: message,\n  };\n};\n\n\n\nexport const getBookListDetail = (data) => {\n\n\n  return async (dispatch) => {\n    try {\n     dispatch(isLoading());\n      const response = await Axios().post('bookevent/getevent', data);\n\n//console.log(response);\n\n      if (response.data.status === '1') {\n\n        dispatch(\n          Success({\n            type: actionTypes.BOOKLIST_DETAIL,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\n\n\n\nexport const getUpcommingBookList = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('bookevent/events', data);\n\n      if (response.data.status === '1') {\n\n        dispatch(\n          Success({\n            type: actionTypes.BOOKLIST_LIST,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const acceptStatus = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('bookevent/acceptstatus', data);\n\n      if (response.data.status === '1') {\n        console.log('response.data',response.data)\n        dispatch(\n          Success({\n            type: actionTypes.STATUS_ACCEPT,\n            payload: response.data.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const pendingStatus = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      \n      const response = await Axios().post('bookevent/pendingStatus', data);\n      \n      if (response.data.status === '1') {\n        console.log('response.data1',response.data)\n\n        dispatch(\n          Success({\n            type: actionTypes.STATUS_PENDING,\n            payload: response.data.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\n\nexport const delete_booklist = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/delevents', data);\n       // alert(response.data.status);\n      if (response.data.status === '1') {\n\n        await dispatch(getUpcommingBookList({ user_id: data.user_id }));\n\n        dispatch(\n          Success({\n            type: actionTypes.BOOKLIST_DELETE,\n            payload: response.data.data,\n          })\n        );\n         dispatch(SuccessMessage('Booking has been deleted successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getUpcommingEventList = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('/events/events', data);\n      let payload;\n      if (response.data.status === 1) {\n       payload = response.data.data;\n\n      } else {\n        payload = response.data;\n      }\n\n      dispatch(\n        Success({\n          type: actionTypes.EVENT_LIST,\n          payload: payload,\n        })\n      );\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}