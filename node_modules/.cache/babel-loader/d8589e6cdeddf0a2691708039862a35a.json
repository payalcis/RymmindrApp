{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios'; //BOOKING ACTIONS\n//export const BOOK_ISLOADING = 'BOOK_ISLOADING';\n//export const BOOK_ERROR = 'BOOK_ERROR';\n//export const BOOK_GROUPLIST = 'BOOK_GROUPLIST';\n//export const BOOK_BUSINESSUSERS = 'BOOK_BUSINESSUSERS';\n//export const BOOK_CREATERYMINDR = 'BOOK_CREATERYMINDR';\n//BOOKING ACTIONS\n\nexport const SuccessEvent = success => {\n  return {\n    type: actionTypes.BOOK_SUCESS,\n    success: success\n  };\n};\nexport const isLoading = () => {\n  return {\n    type: actionTypes.BOOK_ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.BOOK_ERROR,\n    error: error\n  };\n};\nexport const getCategories = data => {\n  return dispatch => {\n    //dispatch(isLoading());\n    Axios().post('users/getCategoryList', data).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GETCATEGORY,\n          payload: response.data.data\n        })); //get subcategories\n\n        const dataTosend = {\n          user_id: data.user_id,\n          category_id: response.data.default_cat\n        };\n        dispatch(getSubCategories(dataTosend));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const getSubCategories = data => {\n  return dispatch => {\n    // dispatch(isLoading());\n    Axios().post('users/getCategoryList', data).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.SUBCATEGORY,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const getGroups = data => {\n  return dispatch => {\n    //dispatch(isLoading());\n    Axios().post('users/getGroupList', data).then(response => {\n      console.log(\"getGroupsgetGroups\", response.data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.BOOK_GROUPLIST,\n          payload: response.data.data\n        }));\n      } else {// dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const getBusinessUsers = data => {\n  return dispatch => {\n    // dispatch(isLoading());\n    Axios().post('users/businessUserList', data).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.BOOK_BUSINESSUSERS,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const getCategory = data => {\n  return dispatch => {\n    // dispatch(isLoading());\n    Axios().post('user/bookingCategories', data).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.BOOK_CATEGORY,\n          payload: response.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const updateEventbook = (data, unmatch, history, sendAttachment) => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const {\n        user_id,\n        business_code,\n        first_name,\n        last_name\n      } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data\n      };\n      const qiscuss = '';\n      const response = await Axios().post('bookevent/updateevent', dataTosend);\n\n      if (response.data.status == '1') {\n        const rymindr_id = response.data.data.id;\n\n        if (unmatch) {// const sendInvitation = await Axios().post('users/inviteForRymindr', inviteTorymidr);\n        }\n\n        dispatch(Success({\n          type: actionTypes.BOOK_UPDATERYMINDR,\n          payload: response.data.data\n        }));\n        dispatch(SuccessEvent(response.data.message));\n        history.push('/bookings');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const createEventbook = (data, unmatch, history, sendAttachment) => {\n  return async dispatch => {\n    try {\n      console.log('createEventbook');\n      dispatch(isLoading());\n      const {\n        user_id,\n        business_code,\n        first_name,\n        last_name\n      } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data\n      };\n      const qiscuss = '';\n      const response = await Axios().post('bookevent/create', dataTosend);\n\n      if (response.data.status == 1) {\n        const rymindr_id = response.data.data.id;\n\n        if (unmatch) {// const sendInvitation = await Axios().post('users/inviteForRymindr', inviteTorymidr);\n        }\n\n        dispatch(Success({\n          type: actionTypes.BOOK_CREATERYMINDR,\n          payload: response.data.data\n        }));\n        dispatch(SuccessEvent(response.data.message));\n        history.push('/bookings');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n/*\nexport const inviteAndAddMobile = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/inviteAndAddMobile', data);\n\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.INVITEANDADDMOBILE,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getUpcommingRymindrs = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/getUpcommingRymindr', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        let upcomingry = [];\n        record.forEach((item) => {\n          upcomingry.push(item.remindr);\n        });\n\n        var merged = [].concat.apply([], upcomingry);\n\n        console.log('upcoming', upcomingry, merged);\n        if (record.length > 0) {\n          const reqData = {\n            user_id: data.user_id,\n            rymindr_id: merged[0].rymindr_id,\n          };\n          await dispatch(getRymidrDetails(reqData));\n        } else {\n          dispatch(\n            Success({\n              type: actionTypes.GETRYMINDRDETAILS,\n              payload: null,\n            })\n          );\n        }\n\n        dispatch(\n          Success({\n            type: actionTypes.GETUPCOMMINGRYMINDR,\n            payload: { record, upcomingList: merged.length > 0 ? merged : [] },\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getRymidrDetails = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/getRymindrDetail', data);\n\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.GETRYMINDRDETAILS,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const delete_rymindr = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const qiscus_id = data.qiscus_id;\n      delete data.qiscus_id;\n\n      const response = await Axios().post('users/deleteRymindr', data);\n      if (response.data.status === '1') {\n        // const qicsusconfig = { headers: { QISCUS_SDK_SECRET: '434e6d04f43c59a9d96666bddcb5c3e0' } };\n        // let dataToSendQicusRemove = {\n        //   emails: data.user_id.split(','),\n        //   room_id: qiscus_id,\n        // };\n\n        // await axios.post(\n        //   'https://rymindr-fmgafzuj8sxps.qiscus.com/api/v2/rest/remove_room_participants',\n        //   dataToSendQicusRemove,\n        //   qicsusconfig\n        // );\n        await dispatch(getUpcommingRymindrs({ user_id: data.user_id }));\n\n        dispatch(\n          Success({\n            type: actionTypes.DELETERYMINDR,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const rymindr_action = (data) => {\n  return async (dispatch) => {\n    try {\n      const dataTosend = {\n        rymindr_id: '18105',\n        status: 2,\n        user_id: '2892',\n        friend_id: '2891',\n        user_name: 'Demolive1 ',\n        recr_rymindr_id: '18103',\n      };\n\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/acceptRequestRymindr', data);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.RYMINDRACTION,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n*/","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/bookevent.js"],"names":["actionTypes","Axios","axios","SuccessEvent","success","type","BOOK_SUCESS","isLoading","BOOK_ISLOADING","Success","response","Fail","error","BOOK_ERROR","getCategories","data","dispatch","post","then","status","GETCATEGORY","payload","dataTosend","user_id","category_id","default_cat","getSubCategories","message","catch","err","SUBCATEGORY","getGroups","console","log","BOOK_GROUPLIST","getBusinessUsers","BOOK_BUSINESSUSERS","getCategory","BOOK_CATEGORY","updateEventbook","unmatch","history","sendAttachment","business_code","first_name","last_name","JSON","parse","localStorage","getItem","qiscuss","rymindr_id","id","BOOK_UPDATERYMINDR","push","createEventbook","BOOK_CREATERYMINDR"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAAa;AACrC,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACM,WADf;AAEHF,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,SAAS,GAAG,MAAM;AAC3B,SAAO;AACHF,IAAAA,IAAI,EAAEL,WAAW,CAACQ;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,OAAO,GAAIC,QAAD,IAAc;AACjC,SAAOA,QAAP;AACH,CAFM;AAIP,OAAO,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAC3B,SAAO;AACHP,IAAAA,IAAI,EAAEL,WAAW,CAACa,UADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,aAAa,GAAIC,IAAD,IAAU;AACnC,SAAQC,QAAD,IAAc;AACjB;AACAf,IAAAA,KAAK,GAAGgB,IAAR,CAAa,uBAAb,EAAsCF,IAAtC,EACKG,IADL,CACWR,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACK,IAAT,CAAcI,MAAd,KAAyB,GAA7B,EAAkC;AAC9BH,QAAAA,QAAQ,CACJP,OAAO,CAAC;AACJJ,UAAAA,IAAI,EAAEL,WAAW,CAACoB,WADd;AAEJC,UAAAA,OAAO,EAAEX,QAAQ,CAACK,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR,CAD8B,CAO9B;;AACA,cAAMO,UAAU,GAAG;AACfC,UAAAA,OAAO,EAAER,IAAI,CAACQ,OADC;AAEfC,UAAAA,WAAW,EAAEd,QAAQ,CAACK,IAAT,CAAcU;AAFZ,SAAnB;AAIAT,QAAAA,QAAQ,CAACU,gBAAgB,CAACJ,UAAD,CAAjB,CAAR;AACH,OAbD,MAaO;AACHN,QAAAA,QAAQ,CAACL,IAAI,CAACD,QAAQ,CAACK,IAAT,CAAcY,OAAf,CAAL,CAAR;AACH;AACJ,KAlBL,EAmBKC,KAnBL,CAmBYC,GAAD,IAAS;AACZb,MAAAA,QAAQ,CAACL,IAAI,CAACkB,GAAG,CAACF,OAAL,CAAL,CAAR;AACH,KArBL;AAsBH,GAxBD;AAyBH,CA1BM;AA2BP,OAAO,MAAMD,gBAAgB,GAAIX,IAAD,IAAU;AACtC,SAAQC,QAAD,IAAc;AACjB;AACAf,IAAAA,KAAK,GAAGgB,IAAR,CAAa,uBAAb,EAAsCF,IAAtC,EACKG,IADL,CACWR,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACK,IAAT,CAAcI,MAAd,KAAyB,GAA7B,EAAkC;AAC9BH,QAAAA,QAAQ,CACJP,OAAO,CAAC;AACJJ,UAAAA,IAAI,EAAEL,WAAW,CAAC8B,WADd;AAEJT,UAAAA,OAAO,EAAEX,QAAQ,CAACK,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR;AAMH,OAPD,MAOO;AACHC,QAAAA,QAAQ,CAACL,IAAI,CAACD,QAAQ,CAACK,IAAT,CAAcY,OAAf,CAAL,CAAR;AACH;AACJ,KAZL,EAaKC,KAbL,CAaYC,GAAD,IAAS;AACZb,MAAAA,QAAQ,CAACL,IAAI,CAACkB,GAAG,CAACF,OAAL,CAAL,CAAR;AACH,KAfL;AAgBH,GAlBD;AAmBH,CApBM;AAsBP,OAAO,MAAMI,SAAS,GAAIhB,IAAD,IAAU;AAE/B,SAAQC,QAAD,IAAc;AACjB;AACAf,IAAAA,KAAK,GAAGgB,IAAR,CAAa,oBAAb,EAAmCF,IAAnC,EACKG,IADL,CACWR,QAAD,IAAc;AAChBsB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCvB,QAAQ,CAACK,IAA3C;;AACA,UAAIL,QAAQ,CAACK,IAAT,CAAcI,MAAd,KAAyB,GAA7B,EAAkC;AAC9BH,QAAAA,QAAQ,CACJP,OAAO,CAAC;AACJJ,UAAAA,IAAI,EAAEL,WAAW,CAACkC,cADd;AAEJb,UAAAA,OAAO,EAAEX,QAAQ,CAACK,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR;AAMH,OAPD,MAOO,CACH;AACH;AACJ,KAbL,EAcKa,KAdL,CAcYC,GAAD,IAAS;AACZb,MAAAA,QAAQ,CAACL,IAAI,CAACkB,GAAG,CAACF,OAAL,CAAL,CAAR;AACH,KAhBL;AAiBH,GAnBD;AAoBH,CAtBM;AAwBP,OAAO,MAAMQ,gBAAgB,GAAIpB,IAAD,IAAU;AACtC,SAAQC,QAAD,IAAc;AACjB;AACAf,IAAAA,KAAK,GAAGgB,IAAR,CAAa,wBAAb,EAAuCF,IAAvC,EACKG,IADL,CACWR,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACK,IAAT,CAAcI,MAAd,KAAyB,GAA7B,EAAkC;AAC9BH,QAAAA,QAAQ,CACJP,OAAO,CAAC;AACJJ,UAAAA,IAAI,EAAEL,WAAW,CAACoC,kBADd;AAEJf,UAAAA,OAAO,EAAEX,QAAQ,CAACK,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR;AAMH,OAPD,MAOO;AACHC,QAAAA,QAAQ,CAACL,IAAI,CAACD,QAAQ,CAACK,IAAT,CAAcY,OAAf,CAAL,CAAR;AACH;AACJ,KAZL,EAaKC,KAbL,CAaYC,GAAD,IAAS;AACZb,MAAAA,QAAQ,CAACL,IAAI,CAACkB,GAAG,CAACF,OAAL,CAAL,CAAR;AACH,KAfL;AAgBH,GAlBD;AAmBH,CApBM;AAsBP,OAAO,MAAMU,WAAW,GAAItB,IAAD,IAAU;AACjC,SAAQC,QAAD,IAAc;AACjB;AACAf,IAAAA,KAAK,GAAGgB,IAAR,CAAa,wBAAb,EAAuCF,IAAvC,EACKG,IADL,CACWR,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACK,IAAT,CAAcI,MAAd,KAAyB,GAA7B,EAAkC;AAC9BH,QAAAA,QAAQ,CACJP,OAAO,CAAC;AACJJ,UAAAA,IAAI,EAAEL,WAAW,CAACsC,aADd;AAEJjB,UAAAA,OAAO,EAAEX,QAAQ,CAACK;AAFd,SAAD,CADH,CAAR;AAMH,OAPD,MAOO;AACHC,QAAAA,QAAQ,CAACL,IAAI,CAACD,QAAQ,CAACK,IAAT,CAAcY,OAAf,CAAL,CAAR;AACH;AACJ,KAZL,EAaKC,KAbL,CAaYC,GAAD,IAAS;AACZb,MAAAA,QAAQ,CAACL,IAAI,CAACkB,GAAG,CAACF,OAAL,CAAL,CAAR;AACH,KAfL;AAgBH,GAlBD;AAmBH,CApBM;AAsBP,OAAO,MAAMY,eAAe,GAAG,CAACxB,IAAD,EAAOyB,OAAP,EAAgBC,OAAhB,EAAyBC,cAAzB,KAA4C;AAEvE,SAAO,MAAM1B,QAAN,IAAmB;AAEtB,QAAI;AACAA,MAAAA,QAAQ,CAACT,SAAS,EAAV,CAAR;AACA,YAAM;AAAEgB,QAAAA,OAAF;AAAWoB,QAAAA,aAAX;AAA0BC,QAAAA,UAA1B;AAAsCC,QAAAA;AAAtC,UAAoDC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAA1D;AAEA,YAAM3B,UAAU,GAAG,EAAC,GAAGP;AAAJ,OAAnB;AACA,YAAMmC,OAAO,GAAG,EAAhB;AACA,YAAMxC,QAAQ,GAAG,MAAMT,KAAK,GAAGgB,IAAR,CAAa,uBAAb,EAAsCK,UAAtC,CAAvB;;AAEA,UAAIZ,QAAQ,CAACK,IAAT,CAAcI,MAAd,IAAwB,GAA5B,EAAiC;AAC7B,cAAMgC,UAAU,GAAGzC,QAAQ,CAACK,IAAT,CAAcA,IAAd,CAAmBqC,EAAtC;;AAEA,YAAIZ,OAAJ,EAAa,CACT;AACH;;AAEDxB,QAAAA,QAAQ,CACJP,OAAO,CAAC;AACJJ,UAAAA,IAAI,EAAEL,WAAW,CAACqD,kBADd;AAEJhC,UAAAA,OAAO,EAAEX,QAAQ,CAACK,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR;AAMAC,QAAAA,QAAQ,CAACb,YAAY,CAACO,QAAQ,CAACK,IAAT,CAAcY,OAAf,CAAb,CAAR;AAEAc,QAAAA,OAAO,CAACa,IAAR,CAAa,WAAb;AACH,OAhBD,MAgBO;AACHtC,QAAAA,QAAQ,CAACL,IAAI,CAACD,QAAQ,CAACK,IAAT,CAAcY,OAAf,CAAL,CAAR;AACH;AACJ,KA3BD,CA2BE,OAAOf,KAAP,EAAc;AACZI,MAAAA,QAAQ,CAACL,IAAI,CAACC,KAAK,CAACe,OAAP,CAAL,CAAR;AACH;AAGJ,GAlCD;AAmCH,CArCM;AAuCP,OAAO,MAAM4B,eAAe,GAAG,CAACxC,IAAD,EAAOyB,OAAP,EAAgBC,OAAhB,EAAyBC,cAAzB,KAA4C;AACvE,SAAO,MAAM1B,QAAN,IAAmB;AAEtB,QAAI;AAEAgB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAjB,MAAAA,QAAQ,CAACT,SAAS,EAAV,CAAR;AACA,YAAM;AAAEgB,QAAAA,OAAF;AAAWoB,QAAAA,aAAX;AAA0BC,QAAAA,UAA1B;AAAsCC,QAAAA;AAAtC,UAAoDC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAA1D;AAEA,YAAM3B,UAAU,GAAG,EAAC,GAAGP;AAAJ,OAAnB;AACA,YAAMmC,OAAO,GAAG,EAAhB;AACA,YAAMxC,QAAQ,GAAG,MAAMT,KAAK,GAAGgB,IAAR,CAAa,kBAAb,EAAiCK,UAAjC,CAAvB;;AAEA,UAAIZ,QAAQ,CAACK,IAAT,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC3B,cAAMgC,UAAU,GAAGzC,QAAQ,CAACK,IAAT,CAAcA,IAAd,CAAmBqC,EAAtC;;AAEA,YAAIZ,OAAJ,EAAa,CACT;AACH;;AAEDxB,QAAAA,QAAQ,CACJP,OAAO,CAAC;AACJJ,UAAAA,IAAI,EAAEL,WAAW,CAACwD,kBADd;AAEJnC,UAAAA,OAAO,EAAEX,QAAQ,CAACK,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR;AAMAC,QAAAA,QAAQ,CAACb,YAAY,CAACO,QAAQ,CAACK,IAAT,CAAcY,OAAf,CAAb,CAAR;AAEAc,QAAAA,OAAO,CAACa,IAAR,CAAa,WAAb;AACH,OAhBD,MAgBO;AACHtC,QAAAA,QAAQ,CAACL,IAAI,CAACD,QAAQ,CAACK,IAAT,CAAcY,OAAf,CAAL,CAAR;AACH;AACJ,KA7BD,CA6BE,OAAOf,KAAP,EAAc;AACZI,MAAAA,QAAQ,CAACL,IAAI,CAACC,KAAK,CAACe,OAAP,CAAL,CAAR;AACH;AAGJ,GApCD;AAqCH,CAtCM;AAusourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios';\n\n\n//BOOKING ACTIONS\n//export const BOOK_ISLOADING = 'BOOK_ISLOADING';\n//export const BOOK_ERROR = 'BOOK_ERROR';\n//export const BOOK_GROUPLIST = 'BOOK_GROUPLIST';\n//export const BOOK_BUSINESSUSERS = 'BOOK_BUSINESSUSERS';\n//export const BOOK_CREATERYMINDR = 'BOOK_CREATERYMINDR';\n//BOOKING ACTIONS\n\nexport const SuccessEvent = (success) => {\n    return {\n        type: actionTypes.BOOK_SUCESS,\n        success: success\n    }\n}\n\nexport const isLoading = () => {\n    return {\n        type: actionTypes.BOOK_ISLOADING,\n    };\n};\n\nexport const Success = (response) => {\n    return response;\n};\n\nexport const Fail = (error) => {\n    return {\n        type: actionTypes.BOOK_ERROR,\n        error: error,\n    };\n};\n\nexport const getCategories = (data) => {\n    return (dispatch) => {\n        //dispatch(isLoading());\n        Axios().post('users/getCategoryList', data)\n            .then((response) => {\n                if (response.data.status === '1') {\n                    dispatch(\n                        Success({\n                            type: actionTypes.GETCATEGORY,\n                            payload: response.data.data,\n                        })\n                    );\n                    //get subcategories\n                    const dataTosend = {\n                        user_id: data.user_id,\n                        category_id: response.data.default_cat,\n                    };\n                    dispatch(getSubCategories(dataTosend));\n                } else {\n                    dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n                dispatch(Fail(err.message));\n            });\n    };\n};\nexport const getSubCategories = (data) => {\n    return (dispatch) => {\n        // dispatch(isLoading());\n        Axios().post('users/getCategoryList', data)\n            .then((response) => {\n                if (response.data.status === '1') {\n                    dispatch(\n                        Success({\n                            type: actionTypes.SUBCATEGORY,\n                            payload: response.data.data,\n                        })\n                    );\n                } else {\n                    dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n                dispatch(Fail(err.message));\n            });\n    };\n};\n\nexport const getGroups = (data) => {\n\n    return (dispatch) => {\n        //dispatch(isLoading());\n        Axios().post('users/getGroupList', data)\n            .then((response) => {\n                console.log(\"getGroupsgetGroups\", response.data)\n                if (response.data.status === '1') {\n                    dispatch(\n                        Success({\n                            type: actionTypes.BOOK_GROUPLIST,\n                            payload: response.data.data,\n                        })\n                    );\n                } else {\n                    // dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n                dispatch(Fail(err.message));\n            });\n    };\n};\n\nexport const getBusinessUsers = (data) => {\n    return (dispatch) => {\n        // dispatch(isLoading());\n        Axios().post('users/businessUserList', data)\n            .then((response) => {\n                if (response.data.status === '1') {\n                    dispatch(\n                        Success({\n                            type: actionTypes.BOOK_BUSINESSUSERS,\n                            payload: response.data.data,\n                        })\n                    );\n                } else {\n                    dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n                dispatch(Fail(err.message));\n            });\n    };\n};\n\nexport const getCategory = (data) => {\n    return (dispatch) => {\n        // dispatch(isLoading());\n        Axios().post('user/bookingCategories', data)\n            .then((response) => {\n                if (response.data.status === '1') {\n                    dispatch(\n                        Success({\n                            type: actionTypes.BOOK_CATEGORY,\n                            payload: response.data,\n                        })\n                    );\n                } else {\n                    dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n                dispatch(Fail(err.message));\n            });\n    };\n};\n\nexport const updateEventbook = (data, unmatch, history, sendAttachment) => {\n\n    return async(dispatch) => {\n\n        try {\n            dispatch(isLoading());\n            const { user_id, business_code, first_name, last_name } = JSON.parse(localStorage.getItem('userData'));\n\n            const dataTosend = {...data };\n            const qiscuss = '';\n            const response = await Axios().post('bookevent/updateevent', dataTosend);\n\n            if (response.data.status == '1') {\n                const rymindr_id = response.data.data.id;\n\n                if (unmatch) {\n                    // const sendInvitation = await Axios().post('users/inviteForRymindr', inviteTorymidr);\n                }\n\n                dispatch(\n                    Success({\n                        type: actionTypes.BOOK_UPDATERYMINDR,\n                        payload: response.data.data,\n                    })\n                );\n                dispatch(SuccessEvent(response.data.message));\n\n                history.push('/bookings');\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n\n\n    };\n}\n\nexport const createEventbook = (data, unmatch, history, sendAttachment) => {\n    return async(dispatch) => {\n\n        try {\n\n            console.log('createEventbook');\n            dispatch(isLoading());\n            const { user_id, business_code, first_name, last_name } = JSON.parse(localStorage.getItem('userData'));\n\n            const dataTosend = {...data };\n            const qiscuss = '';\n            const response = await Axios().post('bookevent/create', dataTosend);\n\n            if (response.data.status == 1) {\n                const rymindr_id = response.data.data.id;\n\n                if (unmatch) {\n                    // const sendInvitation = await Axios().post('users/inviteForRymindr', inviteTorymidr);\n                }\n\n                dispatch(\n                    Success({\n                        type: actionTypes.BOOK_CREATERYMINDR,\n                        payload: response.data.data,\n                    })\n                );\n                dispatch(SuccessEvent(response.data.message));\n\n                history.push('/bookings');\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n\n\n    };\n};\n/*\nexport const inviteAndAddMobile = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/inviteAndAddMobile', data);\n\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.INVITEANDADDMOBILE,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getUpcommingRymindrs = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/getUpcommingRymindr', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        let upcomingry = [];\n        record.forEach((item) => {\n          upcomingry.push(item.remindr);\n        });\n\n        var merged = [].concat.apply([], upcomingry);\n\n        console.log('upcoming', upcomingry, merged);\n        if (record.length > 0) {\n          const reqData = {\n            user_id: data.user_id,\n            rymindr_id: merged[0].rymindr_id,\n          };\n          await dispatch(getRymidrDetails(reqData));\n        } else {\n          dispatch(\n            Success({\n              type: actionTypes.GETRYMINDRDETAILS,\n              payload: null,\n            })\n          );\n        }\n\n        dispatch(\n          Success({\n            type: actionTypes.GETUPCOMMINGRYMINDR,\n            payload: { record, upcomingList: merged.length > 0 ? merged : [] },\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getRymidrDetails = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/getRymindrDetail', data);\n\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.GETRYMINDRDETAILS,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const delete_rymindr = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const qiscus_id = data.qiscus_id;\n      delete data.qiscus_id;\n\n      const response = await Axios().post('users/deleteRymindr', data);\n      if (response.data.status === '1') {\n        // const qicsusconfig = { headers: { QISCUS_SDK_SECRET: '434e6d04f43c59a9d96666bddcb5c3e0' } };\n        // let dataToSendQicusRemove = {\n        //   emails: data.user_id.split(','),\n        //   room_id: qiscus_id,\n        // };\n\n        // await axios.post(\n        //   'https://rymindr-fmgafzuj8sxps.qiscus.com/api/v2/rest/remove_room_participants',\n        //   dataToSendQicusRemove,\n        //   qicsusconfig\n        // );\n        await dispatch(getUpcommingRymindrs({ user_id: data.user_id }));\n\n        dispatch(\n          Success({\n            type: actionTypes.DELETERYMINDR,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const rymindr_action = (data) => {\n  return async (dispatch) => {\n    try {\n      const dataTosend = {\n        rymindr_id: '18105',\n        status: 2,\n        user_id: '2892',\n        friend_id: '2891',\n        user_name: 'Demolive1 ',\n        recr_rymindr_id: '18103',\n      };\n\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/acceptRequestRymindr', data);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.RYMINDRACTION,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n*/"]},"metadata":{},"sourceType":"module"}