{"ast":null,"code":"import { getBlobFromURL } from './getBlobFromURL';\nimport { isDataUrl, toDataURL, getMimeType } from './util';\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nexport function shouldEmbed(string) {\n  return string.search(URL_REGEX) !== -1;\n}\nexport function embedResources(cssString, baseUrl, options) {\n  if (!shouldEmbed(cssString)) {\n    return Promise.resolve(cssString);\n  }\n\n  return Promise.resolve(cssString).then(parseURLs).then(urls => urls.reduce((done, url) => done.then(ret => embed(ret, url, baseUrl, options)), Promise.resolve(cssString)));\n}\nexport function parseURLs(str) {\n  const result = [];\n  str.replace(URL_REGEX, (raw, quotation, url) => {\n    result.push(url);\n    return raw;\n  });\n  return result.filter(url => !isDataUrl(url));\n}\nexport function embed(cssString, resourceURL, baseURL, options, get) {\n  const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n  return Promise.resolve(resolvedURL).then(url => get ? get(url) : getBlobFromURL(url, options)).then(data => toDataURL(data, getMimeType(resourceURL))).then(dataURL => cssString.replace(urlToRegex(resourceURL), `$1${dataURL}$3`)).then(content => content, () => resolvedURL);\n}\n\nfunction resolveUrl(url, baseUrl) {\n  // url is absolute already\n  if (url.match(/^[a-z]+:\\/\\//i)) {\n    return url;\n  } // url is absolute already, without protocol\n\n\n  if (url.match(/^\\/\\//)) {\n    return window.location.protocol + url;\n  } // dataURI, mailto:, tel:, etc.\n\n\n  if (url.match(/^[a-z]+:/i)) {\n    return url;\n  }\n\n  const doc = document.implementation.createHTMLDocument();\n  const base = doc.createElement('base');\n  const a = doc.createElement('a');\n  doc.head.appendChild(base);\n  doc.body.appendChild(a);\n\n  if (baseUrl) {\n    base.href = baseUrl;\n  }\n\n  a.href = url;\n  return a.href;\n}\n\nfunction urlToRegex(url) {\n  return new RegExp(`(url\\\\(['\"]?)(${escape(url)})(['\"]?\\\\))`, 'g');\n}\n\nfunction escape(url) {\n  return url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n}","map":{"version":3,"sources":["../src/embedResources.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getBlobFromURL } from './getBlobFromURL';\nimport { isDataUrl, toDataURL, getMimeType } from './util';\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nexport function shouldEmbed(string) {\n    return string.search(URL_REGEX) !== -1;\n}\nexport function embedResources(cssString, baseUrl, options) {\n    if (!shouldEmbed(cssString)) {\n        return Promise.resolve(cssString);\n    }\n    return Promise.resolve(cssString)\n        .then(parseURLs)\n        .then((urls) => urls.reduce((done, url) => done.then((ret) => embed(ret, url, baseUrl, options)), Promise.resolve(cssString)));\n}\nexport function parseURLs(str) {\n    const result = [];\n    str.replace(URL_REGEX, (raw, quotation, url) => {\n        result.push(url);\n        return raw;\n    });\n    return result.filter((url) => !isDataUrl(url));\n}\nexport function embed(cssString, resourceURL, baseURL, options, get) {\n    const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n    return Promise.resolve(resolvedURL)\n        .then((url) => (get ? get(url) : getBlobFromURL(url, options)))\n        .then((data) => toDataURL(data, getMimeType(resourceURL)))\n        .then((dataURL) => cssString.replace(urlToRegex(resourceURL), `$1${dataURL}$3`))\n        .then((content) => content, () => resolvedURL);\n}\nfunction resolveUrl(url, baseUrl) {\n    // url is absolute already\n    if (url.match(/^[a-z]+:\\/\\//i)) {\n        return url;\n    }\n    // url is absolute already, without protocol\n    if (url.match(/^\\/\\//)) {\n        return window.location.protocol + url;\n    }\n    // dataURI, mailto:, tel:, etc.\n    if (url.match(/^[a-z]+:/i)) {\n        return url;\n    }\n    const doc = document.implementation.createHTMLDocument();\n    const base = doc.createElement('base');\n    const a = doc.createElement('a');\n    doc.head.appendChild(base);\n    doc.body.appendChild(a);\n    if (baseUrl) {\n        base.href = baseUrl;\n    }\n    a.href = url;\n    return a.href;\n}\nfunction urlToRegex(url) {\n    return new RegExp(`(url\\\\(['\"]?)(${escape(url)})(['\"]?\\\\))`, 'g');\n}\nfunction escape(url) {\n    return url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n}\n//# sourceMappingURL=embedResources.js.map"]},"metadata":{},"sourceType":"module"}