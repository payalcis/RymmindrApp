{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/Rymindrs/Notifications/Notifications.js\";\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Box, IconButton, Menu, MenuItem } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { MoreVert } from '@material-ui/icons';\nimport { withSnackbar } from 'notistack';\nimport { getNotifications, notificationRead, notificationClear } from '../../../store/actions/notificationActions';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    position: 'relative'\n  },\n  notifyBlockUnread: {\n    backgroundColor: 'rgba(206,226,241, 0.3)',\n    borderRadius: 15\n  },\n  notifyBlockRead: {\n    backgroundColor: 'white'\n  }\n}));\n\nconst Notifications = props => {\n  const history = useHistory();\n  const {\n    notifications,\n    getNotifications,\n    notificationRead,\n    notificationClear,\n    enqueueSnackbar,\n    success_message\n  } = props;\n  const options = ['Clear notifications', 'Notification settings'];\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  useMemo(() => {\n    if (success_message && success_message.message) {\n      success_message && enqueueSnackbar(success_message.message, {\n        variant: 'success'\n      });\n      getNotifications();\n    }\n  }, [success_message]);\n  const classes = useStyles();\n  const AvatarStyled = styled(Avatar)({\n    height: 55,\n    width: 55,\n    marginRight: 10\n  });\n  const TypoHeadStyled = styled(Typography)(({\n    theme\n  }) => ({\n    fontSize: 24,\n    color: theme.palette.primary.main,\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    marginBottom: 10\n  }));\n  const TypoHeadInnerStyled = styled(TypoHeadStyled)(({\n    theme\n  }) => ({\n    color: theme.palette.text.primary\n  }));\n  const TypoNameUnreadStyled = styled(Typography)({\n    color: '#00000',\n    fontWeight: 600\n  });\n  const TypoNameReadStyled = styled(Typography)({\n    color: '#b3bcc3',\n    fontWeight: 600\n  });\n  const TypoTimeStyled = styled(Typography)({\n    color: '#b3bcc3',\n    float: 'right'\n  });\n  const TypoHeadingStyled = styled(Typography)(({\n    theme\n  }) => ({\n    fontSize: 14,\n    color: theme.palette.primary,\n    // textTransform: 'uppercase',\n    fontWeight: 400\n  }));\n  const PaperStyled = styled(Paper)({\n    padding: '10px 15px'\n  });\n  const TypoNotiUnreadStyled = styled(Typography)(({\n    theme\n  }) => ({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    color: theme.palette.text.secondary\n  }));\n  const TypoNotiReadStyled = styled(Typography)(({\n    theme\n  }) => ({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    color: '#67696d'\n  }));\n  const {\n    user_id\n  } = JSON.parse(localStorage.getItem('userData'));\n  const Rymindrlist = notifications.length > 0 ? notifications.map(notification => /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    className: notification.status == 0 ? classes.notifyBlockUnread : classes.notifyBlockRead,\n    alignItems: \"flex-start\",\n    onClick: () => {\n      let tempURL = notification.url ? notification.url.split('/') : '';\n\n      if (new Date(notification.rymindr_date + ' ' + notification.rymindr_time) < new Date()) {\n        handleRead(notification.id, '/history-rymindrs', notification.notification_type, notification.post_id);\n      } else {\n        if (notification.notification_type == 'booking' || notification.notification_type == \"booking_comment\") {\n          handleRead(notification.id, tempURL[1], notification.notification_type, notification.post_id, notification.recr_post_id, null);\n        } else if (notification.notification_type == 'connention_request') {\n          handleRead(notification.id, tempURL[1], notification.notification_type, null, null, notification.user_id);\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AvatarStyled, {\n    alt: \"semy Sharp\",\n    src: notification.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n      width: \"100%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    },\n    /*#__PURE__*/\n    // (notification.status == 0) ?\n    React.createElement(TypoNameUnreadStyled, {\n      variant: \"body2\",\n      component: \"span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, notification.title) // :<TypoNameReadStyled variant='body2' component='span'>{notification.title}</TypoNameReadStyled>\n    , /*#__PURE__*/React.createElement(TypoTimeStyled, {\n      variant: \"caption\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }, notification.time))),\n    secondary:\n    /*#__PURE__*/\n    // (notification.status == 0) ?\n    React.createElement(TypoNotiUnreadStyled, {\n      variant: \"body1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, notification.text) // :<TypoNotiReadStyled variant='body1'>{notification.text}</TypoNotiReadStyled>\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }))) : /*#__PURE__*/React.createElement(TypoNotiUnreadStyled, {\n    component: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }\n  }, \"Great! You're all up to date. No notifications.\");\n\n  const handleRead = (notificationId, url, notification_type, post_id, recr_post_id, connection_id) => {\n    console.log('notification_type-', notification_type);\n\n    if (notification_type == 'booking' || notification_type == \"booking_comment\") {\n      history.push({\n        pathname: '/bookings',\n        state: {\n          post_id: post_id,\n          recr_post_id: recr_post_id\n        }\n      });\n    } else if (notification_type == 'connention_request') {\n      history.push({\n        pathname: '/contacts',\n        state: {\n          connection_id: connection_id\n        }\n      });\n    } else if (notification_type == 'group_info') {\n      history.push({\n        pathname: '/contacts',\n        state: {\n          connection_id: connection_id\n        }\n      });\n    } else {\n      if (url) history.push(url);\n    }\n\n    const dataToSend = {\n      user_id,\n      notification_id: notificationId\n    };\n    notificationRead(dataToSend);\n  };\n\n  const handleClickOption = option => {\n    if (option == 'Clear notifications') {\n      notificationClear(user_id);\n    } else if (option == 'Notification settings') {\n      history.push('/account-settings/notifications');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    display: \"flex\",\n    style: {\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TypoHeadStyled, {\n    variant: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  }, \"Your \", /*#__PURE__*/React.createElement(TypoHeadInnerStyled, {\n    component: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 45\n    }\n  }, \"NOTIFICATIONS\"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    style: {\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"more\",\n    \"aria-controls\": \"long-menu\",\n    \"aria-haspopup\": \"true\",\n    onClick: event => handleClick(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MoreVert, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PaperStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }, Rymindrlist)))), /*#__PURE__*/React.createElement(Menu, {\n    id: \"long-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: open,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }\n  }, options.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n    key: option,\n    selected: option === 'Pyxis',\n    onClick: () => handleClickOption(option),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  }, option))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.notification.loading,\n    error: state.notification.error,\n    success_message: state.notification.success_message,\n    notifications: state.notification.notifications\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getNotifications: data => dispatch(getNotifications(data)),\n    notificationRead: data => dispatch(notificationRead(data)),\n    notificationClear: user_id => dispatch(notificationClear(user_id))\n  };\n};\n\nNotifications.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  success_message: PropTypes.any.isRequired,\n  getNotifications: PropTypes.func.isRequired,\n  notificationRead: PropTypes.func.isRequired,\n  notificationClear: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(Notifications));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/Rymindrs/Notifications/Notifications.js"],"names":["React","useEffect","useMemo","useState","makeStyles","styled","BrowserRouter","Router","Switch","Route","Link","useHistory","connect","PropTypes","Box","IconButton","Menu","MenuItem","Paper","Grid","List","ListItem","ListItemText","ListItemAvatar","Avatar","Typography","MoreVert","withSnackbar","getNotifications","notificationRead","notificationClear","useStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","position","notifyBlockUnread","backgroundColor","borderRadius","notifyBlockRead","Notifications","props","history","notifications","enqueueSnackbar","success_message","options","anchorEl","setAnchorEl","open","Boolean","handleClick","event","currentTarget","handleClose","message","variant","classes","AvatarStyled","height","width","marginRight","TypoHeadStyled","fontSize","primary","main","textTransform","fontWeight","marginBottom","TypoHeadInnerStyled","TypoNameUnreadStyled","TypoNameReadStyled","TypoTimeStyled","float","TypoHeadingStyled","PaperStyled","TypoNotiUnreadStyled","whiteSpace","overflow","textOverflow","TypoNotiReadStyled","user_id","JSON","parse","localStorage","getItem","Rymindrlist","length","map","notification","status","tempURL","url","split","Date","rymindr_date","rymindr_time","handleRead","id","notification_type","post_id","recr_post_id","image","title","time","notificationId","connection_id","console","log","push","pathname","state","dataToSend","notification_id","handleClickOption","option","mapStateToProps","loading","error","mapDispatchToProps","dispatch","data","propTypes","bool","isRequired","string","any","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport { makeStyles, styled } from '@material-ui/core/styles'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n, useHistory } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Box, IconButton, Menu, MenuItem } from '@material-ui/core'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport Avatar from '@material-ui/core/Avatar'\nimport Typography from '@material-ui/core/Typography'\nimport { MoreVert } from '@material-ui/icons'\nimport { withSnackbar } from 'notistack';\nimport {\n  getNotifications,\n  notificationRead,\n  notificationClear\n} from '../../../store/actions/notificationActions';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    position: 'relative'\n  },\n  notifyBlockUnread: {\n    backgroundColor: 'rgba(206,226,241, 0.3)',\n    borderRadius: 15\n  },\n  notifyBlockRead: {\n    backgroundColor: 'white'\n  }\n}))\n\nconst Notifications = (props) => {\n  const history = useHistory()\n\n  const {\n    notifications,\n    getNotifications,\n    notificationRead,\n    notificationClear,\n    enqueueSnackbar,\n    success_message\n  } = props\n\n  const options = ['Clear notifications', 'Notification settings']\n\n  const [anchorEl, setAnchorEl] = useState(null)\n  const open = Boolean(anchorEl)\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  };\n\n  useMemo(() => {\n    if(success_message && success_message.message){\n      success_message && enqueueSnackbar(success_message.message, { variant: 'success' });\n      getNotifications()\n    }\n  }, [success_message]);\n\n  const classes = useStyles()\n  const AvatarStyled = styled(Avatar)({\n    height: 55, width: 55, marginRight: 10\n  })\n\n  const TypoHeadStyled = styled(Typography)(({ theme }) => ({\n    fontSize: 24,\n    color: theme.palette.primary.main,\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    marginBottom: 10\n  }))\n\n  const TypoHeadInnerStyled = styled(TypoHeadStyled)(({ theme }) => ({\n    color: theme.palette.text.primary\n  }))\n\n  const TypoNameUnreadStyled = styled(Typography)({\n    color: '#00000',\n    fontWeight: 600\n  })\n\n  const TypoNameReadStyled = styled(Typography)({\n    color: '#b3bcc3',\n    fontWeight: 600\n  })\n\n  const TypoTimeStyled = styled(Typography)({\n    color: '#b3bcc3', float: 'right'\n  })\n\n  const TypoHeadingStyled = styled(Typography)(({ theme }) => ({\n    fontSize: 14,\n    color: theme.palette.primary,\n    // textTransform: 'uppercase',\n    fontWeight: 400,\n  }));\n\n  const PaperStyled = styled(Paper)({\n    padding: '10px 15px'\n  })\n\n  const TypoNotiUnreadStyled = styled(Typography)(({ theme }) => ({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    color: theme.palette.text.secondary\n  }))\n\n  const TypoNotiReadStyled = styled(Typography)(({ theme }) => ({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    color: '#67696d'\n  }))\n\n  const { user_id } = JSON.parse(localStorage.getItem('userData'))\n  const Rymindrlist = notifications.length > 0 ?\n  (notifications.map((notification) =>\n    <ListItem\n      button\n      className={(notification.status == 0)? classes.notifyBlockUnread : classes.notifyBlockRead}\n      alignItems='flex-start'\n      onClick={() =>{\n        let tempURL = (notification.url) ? (notification.url).split('/') : '';\n        if(new Date(notification.rymindr_date + ' ' + notification.rymindr_time) < new Date()) {\n         handleRead(\n           notification.id,\n           '/history-rymindrs',\n           notification.notification_type,\n           notification.post_id\n          )\n        }\n        else {\n          if(notification.notification_type == 'booking' || notification.notification_type == \"booking_comment\") {\n            handleRead(\n              notification.id,\n              tempURL[1],\n              notification.notification_type,\n              notification.post_id,\n              notification.recr_post_id,\n              null\n            )\n          }\n          else if(notification.notification_type == 'connention_request') {\n            handleRead(\n              notification.id,\n              tempURL[1],\n              notification.notification_type,\n              null, null,\n              notification.user_id\n            )\n          }\n        }\n      }}\n    >\n      <ListItemAvatar>\n        <AvatarStyled alt='semy Sharp' src={notification.image} />\n      </ListItemAvatar>\n      <ListItemText\n        primary={\n          <>\n            <Box width='100%'>\n              {\n                // (notification.status == 0) ?\n                <TypoNameUnreadStyled variant='body2' component='span'>{notification.title}</TypoNameUnreadStyled>\n              // :<TypoNameReadStyled variant='body2' component='span'>{notification.title}</TypoNameReadStyled>\n              }\n              <TypoTimeStyled variant='caption'>{notification.time}</TypoTimeStyled>\n            </Box>\n          </>\n        }\n        secondary={\n          // (notification.status == 0) ?\n            <TypoNotiUnreadStyled variant='body1'>{notification.text}</TypoNotiUnreadStyled>\n          // :<TypoNotiReadStyled variant='body1'>{notification.text}</TypoNotiReadStyled>\n        }\n      />\n    </ListItem>\n  )) :\n    <TypoNotiUnreadStyled component=\"span\">Great! You're all up to date. No notifications.</TypoNotiUnreadStyled>\n\n  const handleRead = (notificationId, url, notification_type, post_id, recr_post_id, connection_id) => {\nconsole.log('notification_type-',notification_type)\n    if(notification_type == 'booking' || notification_type == \"booking_comment\") {\n      history.push({\n        pathname: '/bookings',\n        state: { post_id: post_id, recr_post_id: recr_post_id }\n      })\n    }\n    else if(notification_type == 'connention_request') {\n      history.push({\n        pathname: '/contacts',\n        state: { connection_id: connection_id }\n      })\n    }\n    else if(notification_type == 'group_info') {\n      history.push({\n        pathname: '/contacts',\n        state: { connection_id: connection_id }\n      })\n    }\n    else {\n      if (url) history.push(url)\n    }\n    const dataToSend = {\n      user_id,\n      notification_id: notificationId\n    }\n    notificationRead(dataToSend)\n  }\n\n  const handleClickOption = (option) => {\n    if(option == 'Clear notifications') {\n        notificationClear(user_id)\n    }\n    else if(option == 'Notification settings') {\n      history.push('/account-settings/notifications')\n    }\n  }\n\n  return (\n    <>\n      <Grid\n        container\n        justify='space-between'\n        display='flex'\n        style={{ marginBottom: 10 }}>\n        <Grid item xs={7}>\n          <TypoHeadStyled variant='h4'>Your <TypoHeadInnerStyled component='span'>NOTIFICATIONS</TypoHeadInnerStyled></TypoHeadStyled>\n        </Grid>\n        <Grid item style={{ position: 'relative' }}>\n          <IconButton\n            aria-label='more'\n            aria-controls='long-menu'\n            aria-haspopup='true'\n            onClick={(event) =>\n              handleClick(\n                event\n            )}\n          >\n            <MoreVert />\n          </IconButton>\n        </Grid>\n      </Grid>\n\n      <Grid container>\n        <Grid item xs={12}>\n          <PaperStyled>\n            <List>\n              {Rymindrlist}\n            </List>\n          </PaperStyled>\n        </Grid>\n      </Grid>\n      <Menu\n        id='long-menu'\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n      >\n        {options.map((option) => (\n          <MenuItem key={option} selected={option === 'Pyxis'} onClick={() => handleClickOption(option)}>\n            {option}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.notification.loading,\n    error: state.notification.error,\n    success_message: state.notification.success_message,\n    notifications: state.notification.notifications\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getNotifications: (data) => dispatch(getNotifications(data)),\n    notificationRead: (data) => dispatch(notificationRead(data)),\n    notificationClear: (user_id) => dispatch(notificationClear(user_id))\n  }\n};\n\nNotifications.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  success_message: PropTypes.any.isRequired,\n  getNotifications: PropTypes.func.isRequired,\n  notificationRead: PropTypes.func.isRequired,\n  notificationClear: PropTypes.func.isRequired\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(Notifications))\n"]},"metadata":{},"sourceType":"module"}