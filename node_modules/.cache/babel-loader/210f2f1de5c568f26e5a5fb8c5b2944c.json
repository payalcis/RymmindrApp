{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/Authenticate/Authenticate.js\";\nimport { Box, Button, FormControl, Grid, IconButton, InputAdornment, InputLabel, OutlinedInput, Paper, TextField, Typography } from '@material-ui/core';\nimport { Link, Redirect, useParams, useHistory } from 'react-router-dom';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport CircularSpinner from '../../component/CircularSpinner/index';\nimport PropTypes from 'prop-types';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { connect } from 'react-redux';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\nimport { email_verify } from '../../store/actions/auth';\nconst GridStyled = styled(Grid)({\n  height: '100vh'\n});\nconst PaperStyled = styled(Paper)({\n  width: 377,\n  textAlign: 'center',\n  padding: 30\n});\nconst TypoStyled = styled(Typography)(() => ({\n  fontSize: 24,\n  marginTop: 20,\n  marginBottom: 30,\n  fontWeight: 'bold'\n}));\nconst LinkStyled = styled(Link)(({\n  theme\n}) => ({\n  color: theme.palette.primary.main,\n  textDecoration: 'none'\n}));\nconst FormFields = {\n  email: '',\n  password: ''\n};\n\nconst Authenticate = props => {\n  const {\n    enqueueSnackbar,\n    error\n  } = props;\n  const {\n    getemail,\n    getotp\n  } = useParams();\n  useEffect(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]);\n  useMemo(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]);\n  useEffect(() => {\n    const data = {\n      email: getemail,\n      otp: getotp\n    };\n    props.onAuth(data, history);\n  }, [getemail, getotp]);\n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n    showPassword: false\n  });\n  const [formvalues, setFormvalues] = useState(FormFields);\n  const [formvalidation, setFormvalidation] = useState(FormFields);\n  const history = useHistory();\n  const userId = localStorage.getItem('token');\n  let authRedirect = null;\n\n  if (userId) {\n    authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(GridStyled, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: \"loginBg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, authRedirect, /*#__PURE__*/React.createElement(PaperStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      width: 130\n    },\n    src: require('../../assets/images/login_logo.png'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TypoStyled, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Authenticate\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, history) => dispatch(email_verify(email, history))\n  };\n};\n\nAuthenticate.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  onAuth: PropTypes.func.isRequired,\n  error: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(Authenticate));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/Authenticate/Authenticate.js"],"names":["Box","Button","FormControl","Grid","IconButton","InputAdornment","InputLabel","OutlinedInput","Paper","TextField","Typography","Link","Redirect","useParams","useHistory","React","useEffect","useMemo","useState","CircularSpinner","PropTypes","Visibility","VisibilityOff","connect","styled","withSnackbar","email_verify","GridStyled","height","PaperStyled","width","textAlign","padding","TypoStyled","fontSize","marginTop","marginBottom","fontWeight","LinkStyled","theme","color","palette","primary","main","textDecoration","FormFields","email","password","Authenticate","props","enqueueSnackbar","error","getemail","getotp","variant","data","otp","onAuth","history","values","setValues","showPassword","formvalues","setFormvalues","formvalidation","setFormvalidation","userId","localStorage","getItem","authRedirect","require","mapStateToProps","state","loading","auth","mapDispatchToProps","dispatch","propTypes","func","isRequired","bool","string"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  FormControl,\n  Grid,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n  Paper,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport { Link, Redirect,useParams ,useHistory} from 'react-router-dom';\nimport React, { useEffect,useMemo, useState } from 'react';\nimport CircularSpinner from '../../component/CircularSpinner/index';\nimport PropTypes from 'prop-types';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { connect } from 'react-redux';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\nimport { email_verify } from '../../store/actions/auth';\n\nconst GridStyled = styled(Grid)({\n  height: '100vh',\n});\n\nconst PaperStyled = styled(Paper)({\n  width: 377,\n  textAlign: 'center',\n  padding: 30,\n});\n\nconst TypoStyled = styled(Typography)(() => ({\n  fontSize: 24,\n  marginTop: 20,\n  marginBottom: 30,\n  fontWeight: 'bold',\n}));\n\nconst LinkStyled = styled(Link)(({ theme }) => ({\n  color: theme.palette.primary.main,\n  textDecoration: 'none',\n}));\n\nconst FormFields = { email: '', password: '' };\nconst Authenticate = (props) => {\n  const { enqueueSnackbar, error } = props;\n  const {getemail,getotp} = useParams();\n  useEffect(() => {\n    error && enqueueSnackbar(error, { variant: 'error' });\n  }, [error]);\n  useMemo(() => {\n    error && enqueueSnackbar(error, { variant: 'error' });\n  }, [error]);\n  useEffect(() => {\n    const data = {\n      email:getemail,\n      otp:getotp\n    }\n    props.onAuth(data, history);\n  }, [getemail,getotp]);\n\n  \n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n    showPassword: false,\n  });\n\n  const [formvalues, setFormvalues] = useState(FormFields);\n  const [formvalidation, setFormvalidation] = useState(FormFields);\n\n \n  const history = useHistory();\n\n\n  const userId = localStorage.getItem('token');\n  let authRedirect = null;\n  if (userId) {\n    authRedirect = <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <GridStyled container justify=\"center\" alignItems=\"center\" className=\"loginBg\">\n      {authRedirect}\n      <PaperStyled>\n        <img style={{width: 130}} src={require('../../assets/images/login_logo.png')} />\n        <TypoStyled variant=\"h6\">Authenticate</TypoStyled>\n\n        \n            {/* <Button onClick={loginSubmitHandler} variant=\"contained\" color=\"primary\" size=\"large\">\n              {props.loading && <CircularSpinner />}\n              Confirm \n            </Button> */}\n          \n        \n      </PaperStyled>\n    </GridStyled>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, history) => dispatch(email_verify(email,history)),\n  };\n};\n\nAuthenticate.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  onAuth: PropTypes.func.isRequired,\n  error: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(Authenticate));\n"]},"metadata":{},"sourceType":"module"}