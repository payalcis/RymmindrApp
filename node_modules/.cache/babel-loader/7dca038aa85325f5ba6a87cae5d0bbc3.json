{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/LiveChat/LiveChat.js\";\nimport { Attachment, CropOriginal, EmojiEmotions, DoneAll, GroupAdd, MoreVert, Search, ArrowBack, PersonAdd } from '@material-ui/icons';\nimport { Avatar, Box, Button, Divider, Grid, IconButton, InputAdornment, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Paper, TextField, Typography, Hidden, Menu, MenuItem } from '@material-ui/core';\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport CircularSpinner from '../../component/CircularSpinner';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport GroupDialog from './Modal';\nimport { connect } from 'react-redux';\nimport { getUserAndGroupList, createGroup, initChat } from '../../store/actions/LiveChatActions';\nimport { withSnackbar } from 'notistack';\nimport clsx from 'clsx';\nimport ChatWindow from './ChatWindow';\nimport { useParams, Link } from 'react-router-dom'; // For firebase chat purpose\n\nimport firebase from 'firebase';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    position: 'relative'\n  },\n  rightPanel: {\n    [theme.breakpoints.up('md')]: {\n      display: 'block !important'\n    }\n  },\n  newMessage: {\n    backgroundColor: 'orange',\n    borderRadius: 20,\n    padding: 2,\n    paddingHorizontal: 6,\n    color: 'white'\n  }\n}));\nconst AvatarShareStyled = styled(Avatar)({\n  height: 50,\n  width: 50,\n  marginRight: 20\n});\nconst AvatarChatStyled = styled(Avatar)({\n  height: 25,\n  width: 25,\n  marginRight: 10,\n  marginTop: 24\n});\nconst AvatarChatRightStyled = styled(AvatarChatStyled)({\n  marginRight: 0,\n  marginLeft: 10\n});\nconst TypoHeadStyled = styled(Typography)(({\n  theme\n}) => ({\n  fontSize: 24,\n  color: theme.palette.primary.main,\n  textTransform: 'uppercase',\n  fontWeight: 'bold'\n}));\nconst TypoHeadInnerStyled = styled(TypoHeadStyled)(({\n  theme\n}) => ({\n  color: theme.palette.text.primary\n}));\nconst SearchFieldStyled = styled(TextField)(() => ({\n  padding: 20\n}));\nconst PaperStyled = styled(Paper)(() => ({\n  paddingRight: 30,\n  paddingLeft: 30,\n  height: 100 + '%'\n}));\nconst GridHeaderStyled = styled(Grid)(() => ({\n  borderBottom: '1px solid rgba(64, 87, 106, 0.1)'\n}));\nconst GridFooterStyled = styled(Grid)(() => ({\n  borderTop: '1px solid rgba(64, 87, 106, 0.1)',\n  paddingTop: 10,\n  paddingBottom: 10\n}));\nconst TypoNameStyled = styled(Typography)(({\n  theme\n}) => ({\n  color: theme.palette.text.primary,\n  fontSize: 18,\n  fontWeight: 'bold'\n}));\nconst TypoStatusStyled = styled(Typography)(({\n  theme\n}) => ({\n  color: theme.palette.secondary.contrastText,\n  fontSize: 14\n}));\nconst ChatBoxStyled = styled(Box)({\n  background: '#F5F5F5',\n  padding: 15,\n  borderRadius: 20,\n  borderTopLeftRadius: 0,\n  display: 'inline-block',\n  marginTop: 5\n});\nconst ChatBoxRightStyled = styled(ChatBoxStyled)({\n  background: '#D1EDFE',\n  borderRadius: 20,\n  borderTopRightRadius: 0\n});\nconst TextFieldStyled = styled(TextField)(({\n  theme\n}) => ({\n  padding: 20,\n  paddingBottom: 0\n}));\nconst ButtonColor = styled(Button)(({\n  theme\n}) => ({\n  background: theme.palette.props.main,\n  color: theme.palette.props.contrastText\n}));\nconst DoneAllStyled = styled(DoneAll)(({\n  theme\n}) => ({\n  color: theme.palette.text.primary,\n  fontSize: 22,\n  float: 'right',\n  marginLeft: 10,\n  '&.active': {\n    color: theme.palette.primary.main\n  }\n}));\nconst BoxDateStyled = styled(Box)(({\n  theme\n}) => ({\n  display: 'block',\n  margin: 'auto',\n  width: 130,\n  background: 'rgba(0, 0, 0, 0.1)',\n  textAlign: 'center',\n  borderRadius: 15,\n  padding: '5px 10px',\n  '& p': {\n    color: '#212121',\n    fontSize: 12,\n    fontWeight: '500'\n  }\n}));\n\nfunction LiveChat(props) {\n  const classes = useStyles();\n  const [showPanel, setShowPanel] = useState(true);\n\n  const handleShowDetail = () => {\n    setShowPanel(false);\n  };\n\n  const handleHideDetail = () => {\n    setShowPanel(true);\n  };\n\n  const filterOptions = [{\n    value: 'all',\n    label: 'All Contacts'\n  }, {\n    value: 'contact',\n    label: 'Contact'\n  }];\n  const [open, setOpen] = useState(false);\n  const [msgNotifications, updateMsgNotifications] = useState({});\n  const [initChatDetails, updateInitChatDetails] = useState({});\n\n  const handleToopen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = newValue => {\n    setOpen(newValue);\n  }; // Get all the properties\n\n\n  const {\n    contacts,\n    enqueueSnackbar,\n    error,\n    success,\n    loading\n  } = props;\n  useMemo(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]);\n  useMemo(() => {\n    success && enqueueSnackbar(success, {\n      variant: 'success'\n    });\n  }, [success]); // Query params\n\n  let {\n    chat_id,\n    chat_type\n  } = useParams();\n  const {\n    user_id,\n    business_code\n  } = JSON.parse(localStorage.getItem('userData'));\n  const [contactList, updateContactList] = useState([]);\n  useEffect(() => {\n    const dataTosend = {\n      user_id,\n      business_code\n    };\n    props.getUserAndGroupList(dataTosend);\n    updateContactList(contacts);\n  }, []);\n  useEffect(() => {\n    updateContactList(contacts); // If query params are available, then initiate the chat for these params\n\n    if (chat_id !== undefined && chat_type !== undefined) {\n      console.log('enterr');\n\n      if (contacts.length > 0) {\n        let chatDetails = [];\n\n        if (chat_type == 'group') {\n          chatDetails = contacts.filter(contact => contact.contact_type == chat_type && contact.group_id == chat_id);\n        } else {\n          chatDetails = contacts.filter(contact => contact.contact_type == 'individual' && contact.user_id == chat_id);\n        }\n\n        console.log('chat--', chatDetails);\n\n        if (chatDetails.length > 0) {\n          // Initiate the chat for the given query params\n          const dataTosend = {\n            userId: user_id,\n            chatType: chatDetails[0].contact_type,\n            chatParticipant: chatDetails[0]\n          };\n          props.initChat(dataTosend).then(() => {\n            updateInitChatDetails({\n              chatParticipant: chatDetails[0],\n              chatType: chatDetails[0].contact_type\n            });\n          });\n        } else {\n          window.alert('Invalid parameters');\n          window.location.href = '#/live-chat';\n        }\n      }\n    } else {\n      console.log('msgg', Object.keys(msgNotifications));\n\n      if (contacts.length > 0 && msgNotifications.length > 0) {}\n\n      if (contacts.length > 0) {\n        // Initiate the chat for first contact in the contact list\n        const dataTosend = {\n          userId: user_id,\n          chatType: contacts[0].contact_type,\n          chatParticipant: contacts[0]\n        };\n        props.initChat(dataTosend).then(() => {\n          updateInitChatDetails({\n            chatParticipant: contacts[0],\n            chatType: contacts[0].contact_type\n          });\n        });\n      }\n    }\n  }, [contacts]);\n  const [filters, setFilter] = React.useState('all');\n\n  const handleFilterChange = event => {\n    const filter = event.target.value;\n    setFilter(filter);\n    let list = [...contacts];\n\n    if (filter === 'contact') {\n      const users = list.filter(user => user.contact_type === 'individual');\n      updateContactList(users);\n    } else if (filter === 'groups') {\n      const groups = list.filter(user => user.contact_type === 'group');\n      updateContactList(groups);\n    } else {\n      updateContactList(list);\n    }\n  };\n\n  const handleOnChange = event => {\n    const searchStr = event.target.value;\n    let tempStr = searchStr.charAt(0) === '0' ? searchStr.slice(1) : searchStr;\n    let list = [...contacts];\n\n    if (tempStr == '') {\n      console.log('list====', list);\n      updateContactList(list);\n    } else {\n      // Filter them\n      if (filters === 'contact') {\n        const users = list.filter(user => user.contact_type === 'individual');\n        let filteredList = null;\n\n        if (isNaN(tempStr)) {\n          //filteredList = users.filter(obj => (obj.first_name.toLowerCase().includes(tempStr.toLowerCase())) || (obj.last_name.toLowerCase().includes(tempStr.toLowerCase())))\n          let splitedName = tempStr.split(' ');\n\n          if (splitedName.length > 1) {\n            filteredList = users.filter(obj => obj.first_name.toLowerCase().includes(splitedName[0].toLowerCase()) && obj.last_name.toLowerCase().includes(splitedName[1].toLowerCase()) || obj.first_name.toLowerCase().includes(splitedName[1].toLowerCase()) && obj.last_name.toLowerCase().includes(splitedName[0].toLowerCase()));\n          } else {\n            filteredList = users.filter(obj => obj.first_name.toLowerCase().includes(tempStr.toLowerCase()) || obj.last_name.toLowerCase().includes(tempStr.toLowerCase()));\n          }\n        } else {\n          filteredList = users.filter(obj => obj.mobile_no.includes(tempStr));\n        }\n\n        updateContactList(filteredList);\n      } else if (filters === 'groups') {\n        const groups = list.filter(user => user.contact_type === 'group');\n        const filteredList = groups.filter(obj => obj.group_name.toLowerCase().includes(tempStr.toLowerCase()));\n        updateContactList(filteredList);\n      } else {\n        const users = list.filter(user => user.contact_type === 'individual');\n        let filteredUserList = null;\n\n        if (isNaN(tempStr)) {\n          let splitedName = tempStr.split(' ');\n\n          if (splitedName.length > 1) {\n            if (splitedName.length > 2) {\n              filteredUserList = users.filter(obj => obj.first_name.toLowerCase().includes(splitedName[0].toLowerCase()) && obj.last_name.toLowerCase().includes(splitedName[2].toLowerCase()) || obj.first_name.toLowerCase().includes(splitedName[2].toLowerCase()) && obj.last_name.toLowerCase().includes(splitedName[0].toLowerCase()));\n            } else {\n              filteredUserList = users.filter(obj => obj.first_name.toLowerCase().includes(splitedName[0].toLowerCase()) && obj.last_name.toLowerCase().includes(splitedName[1].toLowerCase()) || obj.first_name.toLowerCase().includes(splitedName[1].toLowerCase()) && obj.last_name.toLowerCase().includes(splitedName[0].toLowerCase()) || obj.first_name.toLowerCase().includes(splitedName[0].toLowerCase()) && obj.first_name.toLowerCase().includes(splitedName[1].toLowerCase()));\n            }\n          } else {\n            filteredUserList = users.filter(obj => obj.first_name.toLowerCase().includes(tempStr.toLowerCase()) || obj.last_name.toLowerCase().includes(tempStr.toLowerCase()));\n          }\n        } else {\n          filteredUserList = users.filter(obj => obj.mobile_no.includes(tempStr));\n        }\n\n        let groups = list.filter(user => user.contact_type === 'group');\n        const filteredGroupList = groups.filter(obj => obj.group_name.toLowerCase().includes(tempStr.toLowerCase()));\n        updateContactList([...filteredUserList], [...filteredGroupList]);\n      }\n    }\n  };\n\n  const [groupCreated, updateGroupCreated] = useState(false);\n  useEffect(() => {\n    if (groupCreated === true) {\n      const dataTosend = {\n        user_id,\n        business_code\n      };\n      props.getUserAndGroupList(dataTosend);\n    }\n\n    updateGroupCreated(false);\n  }, [groupCreated]);\n\n  const handleSaveGroupDetails = async dataToSend => {\n    props.createGroup(dataToSend).then(() => {\n      // Close the modal\n      setOpen(false);\n      updateGroupCreated(true);\n    });\n  };\n\n  const handleShowChatWindow = (chatParticipant, chatType) => {\n    // chatType = individual or group\n    // Check if the user is in the group members or not. If not, show them an error message\n    if (chatType === 'group') {\n      let groupMembers = chatParticipant.group_members;\n      groupMembers = groupMembers.split(',');\n\n      if (!groupMembers.includes(user_id.toString())) {\n        enqueueSnackbar('You are not authorized to enter in this group', {\n          variant: 'error'\n        });\n        return false;\n      }\n    }\n\n    const dataTosend = {\n      userId: user_id,\n      chatType: chatType,\n      chatParticipant: chatParticipant\n    };\n    props.initChat(dataTosend).then(() => {\n      updateInitChatDetails({\n        chatParticipant: chatParticipant,\n        chatType: chatType\n      });\n    });\n    console.log('dataTosend', dataTosend);\n  };\n  /* ---------- Chat related code starts ---------- */\n\n\n  var messageRef = firebase.database().ref();\n  useEffect(() => {\n    listenMessages();\n    console.log('initChatDetails=====', initChatDetails); // Clear the rendered chat messages when component is unmounted and mounted again\n\n    return () => {\n      messageRef.off();\n    };\n  }, [initChatDetails]);\n  console.log('initChatDetails', initChatDetails);\n  console.log('contacts', contacts);\n  const [grpMsgNotifications, updategGrpMsgNotifications] = useState({});\n\n  const listenMessages = () => {\n    messageRef.on('value', function (snapshot) {\n      const snapshots = snapshot.val();\n      let unreadMessages = {};\n\n      if (snapshots !== null) {\n        for (const chatRoom in snapshots) {\n          const chatRoomDetails = chatRoom.split('_');\n\n          if (chatRoomDetails[1] === 'individual') {\n            const msgNodes = Object.values(snapshots[chatRoom]);\n\n            if (msgNodes.length > 0) {\n              let unreadMessageCount = 0;\n\n              for (const nodeId in msgNodes) {\n                if (msgNodes[nodeId].receiver_id === user_id && msgNodes[nodeId]['message_read_' + user_id] === false) {\n                  unreadMessageCount++;\n                  unreadMessages = { ...unreadMessages,\n                    ...{\n                      [msgNodes[nodeId].sender_id]: unreadMessageCount\n                    }\n                  };\n                } else {\n                  // remove the key when the message is read\n                  delete unreadMessages[msgNodes[nodeId].sender_id];\n                }\n              }\n            }\n\n            updateMsgNotifications(unreadMessages);\n          } else {\n            const msgNodes = Object.values(snapshots[chatRoom]);\n\n            if (msgNodes.length > 0) {\n              let unreadMessageCount = 0;\n\n              for (const nodeId in msgNodes) {\n                if (msgNodes[nodeId]['message_read_' + user_id] === false) {\n                  unreadMessageCount++;\n                  unreadMessages = { ...unreadMessages,\n                    ...{\n                      [chatRoomDetails[2]]: unreadMessageCount\n                    }\n                  };\n                }\n              }\n            } else {\n              // remove the key when the message is read\n              delete unreadMessages[chatRoomDetails[2]];\n            }\n\n            updategGrpMsgNotifications(unreadMessages);\n          }\n        }\n      }\n    });\n  };\n  /* ---------- Chat related code ends ---------- */\n  // To show contact on top when some message comes\n\n\n  if (Object.keys(msgNotifications).length > 0) {\n    const userIds = Object.keys(msgNotifications);\n\n    if (contactList.length > 0) {\n      for (let i = 0; i < userIds.length; i++) {\n        const userIndex = contactList.findIndex(contact => contact.user_id === userIds[i]);\n\n        if (userIndex >= 0) {\n          const deletedUser = contactList.splice(userIndex, 1);\n          contactList.unshift(...deletedUser);\n          const participant = contactList.filter(user => user.user_id == userIds[0]);\n          const Type = participant[0].contact_type;\n          const dataTosend = {\n            userId: user_id,\n            chatType: Type,\n            chatParticipant: participant[0]\n          };\n          props.initChat(dataTosend).then(() => {\n            console.log('dataTosend', dataTosend);\n            updateInitChatDetails({\n              chatParticipant: participant[0],\n              chatType: Type\n            });\n          });\n        }\n      }\n    }\n  } // To show group on top when some message comes\n\n\n  if (Object.keys(grpMsgNotifications).length > 0) {\n    const groupIds = Object.keys(grpMsgNotifications);\n\n    if (contactList.length > 0) {\n      for (let i = 0; i < groupIds.length; i++) {\n        const groupIndex = contactList.findIndex(group => group.group_id === groupIds[i]);\n\n        if (groupIndex >= 0) {\n          const deletedGroup = contactList.splice(groupIndex, 1);\n          contactList.unshift(...deletedGroup);\n          const participants = contactList.filter(group => group.group_id == groupIds[0]);\n          const Type = participants[0].contact_type;\n          const dataTosend = {\n            userId: user_id,\n            chatType: Type,\n            chatParticipant: participants[0]\n          };\n          props.initChat(dataTosend).then(() => {\n            console.log('dataTosend', dataTosend);\n            updateInitChatDetails({\n              chatParticipant: participants[0],\n              chatType: Type\n            });\n          });\n        }\n      }\n    }\n  } // For chat menu option\n\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [deleteChatContact, updateDeleteChatContact] = useState({});\n\n  const handleMenuClick = (event, contactDetails) => {\n    setAnchorEl(event.currentTarget);\n    updateDeleteChatContact(contactDetails);\n  };\n\n  const handleDeleteChat = () => {\n    setAnchorEl(null);\n\n    if (deleteChatContact.contact_type === 'individual') {\n      let chatNode = '';\n      let userId = user_id;\n\n      if (deleteChatContact.user_id > userId) {\n        chatNode = `chatroom_individual_${userId}_${deleteChatContact.user_id}`;\n      } else {\n        chatNode = `chatroom_individual_${deleteChatContact.user_id}_${userId}`;\n      } // Remove the node from firebase\n\n\n      firebase.database().ref(chatNode).remove();\n    } else {\n      const chatNode = 'chatroom_group_' + deleteChatContact.group_id; // Remove the node from firebase\n\n      firebase.database().ref(chatNode).remove();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GroupDialog, {\n    open: open,\n    onClose: handleClose,\n    handleSaveGroupDetails: handleSaveGroupDetails,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: \"main-wrap-head\",\n    style: {\n      marginBottom: 20\n    },\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 11\n    }\n  }, showPanel ? null : /*#__PURE__*/React.createElement(Hidden, {\n    mdUp: true,\n    implementation: \"css\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    color: \"inherit\",\n    onClick: handleHideDetail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowBack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 19\n    }\n  }))), console.log('initChatDetails--', initChatDetails), /*#__PURE__*/React.createElement(TypoHeadStyled, {\n    variant: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 13\n    }\n  }, \"Live \", /*#__PURE__*/React.createElement(TypoHeadInnerStyled, {\n    component: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 20\n    }\n  }, \"Chat\")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: initChatDetails.chatType == 'individual' ? '/create-rymindr/0/' + initChatDetails.chatParticipant.user_id + '/' + initChatDetails.chatParticipant.first_name + ' ' + initChatDetails.chatParticipant.last_name : initChatDetails.chatType == 'group' ? '/create-rymindr/' + initChatDetails.chatParticipant.group_id + '/0/' + initChatDetails.chatParticipant.group_name : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    className: \"mr-10\",\n    startIcon: /*#__PURE__*/React.createElement(PersonAdd, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 101\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 15\n    }\n  }, \"Add new rymindr\"))))), /*#__PURE__*/React.createElement(Grid, {\n    className: \"main-wrap-body liveChat-cont-wrap\",\n    container: true,\n    alignItems: \"stretch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 4,\n    className: \"pr-25 leftSide-cont\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: \"chat-list-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextFieldStyled, {\n    select: true,\n    value: filters,\n    fullWidth: true,\n    size: \"small\",\n    variant: \"outlined\",\n    autoComplete: \"off\",\n    onChange: handleFilterChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 13\n    }\n  }, filterOptions.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n    key: option.value,\n    value: option.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 17\n    }\n  }, option.label))), /*#__PURE__*/React.createElement(SearchFieldStyled, {\n    id: \"input-with-icon-textfield\",\n    variant: \"outlined\",\n    fullWidth: true,\n    size: \"small\",\n    placeholder: \"Search by name or mobile number\",\n    onKeyUp: handleOnChange,\n    autoComplete: \"off\",\n    InputProps: {\n      startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Search, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 21\n        }\n      }))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    className: \"chat-user-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 13\n    }\n  }, loading && /*#__PURE__*/React.createElement(CircularSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 27\n    }\n  }), console.log('contactList', contactList), console.log('msgNotifications', msgNotifications), contactList && contactList.length > 0 ? contactList.map((contact, contactIndex) => contact.contact_type === 'individual' ? /*#__PURE__*/React.createElement(React.Fragment, {\n    key: contactIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Hidden, {\n    mdUp: true,\n    implementation: \"css\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    onClick: () => handleShowChatWindow(contact, 'individual'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 705,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(AvatarShareStyled, {\n    alt: \"profile picture\",\n    src: contact.profile_image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: contact.first_name + ' ' + contact.last_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 708,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(ListItemSecondaryAction, {\n    className: classes.newMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 31\n    }\n  }, msgNotifications.hasOwnProperty(contact.user_id) ? msgNotifications[contact.user_id] + ' New msg received' : null, /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"end\",\n    \"aria-label\": \"delete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(MoreVert, {\n    onClick: event => handleMenuClick(event, contact),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 35\n    }\n  })))), /*#__PURE__*/React.createElement(Divider, {\n    variant: \"inset\",\n    component: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Hidden, {\n    smDown: true,\n    implementation: \"css\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 721,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    onClick: () => handleShowChatWindow(contact, 'individual'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(AvatarShareStyled, {\n    alt: \"profile picture\",\n    src: contact.profile_image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: contact.first_name !== '' ? contact.first_name + ' ' + contact.last_name : contact.mobile_no,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(ListItemSecondaryAction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 31\n    }\n  }, // className={classes.newMessage}\n  msgNotifications.hasOwnProperty(contact.user_id) ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      backgroundColor: '#FF8A00',\n      borderRadius: 20,\n      padding: 3,\n      paddingLeft: 7,\n      paddingRight: 7,\n      fontSize: 12,\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 37\n    }\n  }, msgNotifications[contact.user_id] + ' New msg received') : null)), /*#__PURE__*/React.createElement(Divider, {\n    variant: \"inset\",\n    component: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 29\n    }\n  }))) : null // <React.Fragment key={contactIndex}>\n  //   <Hidden mdUp implementation='css'>\n  //     <ListItem button onClick={() => handleShowChatWindow(contact, 'group')}>\n  //       <ListItemAvatar>\n  //         <AvatarShareStyled alt='profile picture' src={contact.profile_image} />\n  //       </ListItemAvatar>\n  //       <ListItemText primary={contact.group_name} />\n  //       {\n  //         grpMsgNotifications.hasOwnProperty(contact.group_id) ? grpMsgNotifications[contact.group_id] + ' New msg received' : null\n  //       }\n  //       <ListItemSecondaryAction>\n  //         {/* <IconButton edge='end' aria-label='delete'>\n  //               <MoreVert onClick={(event) => handleMenuClick(event, contact)} />\n  //               </IconButton> */}\n  //       </ListItemSecondaryAction>\n  //     </ListItem>\n  //     <Divider variant='inset' component='li' />\n  //   </Hidden>\n  //   <Hidden smDown implementation='css'>\n  //   <ListItem button onClick={() => handleShowChatWindow(contact, 'group')}>\n  //     <ListItemAvatar>\n  //       <AvatarShareStyled alt='profile picture' src={contact.group_icon} />\n  //     </ListItemAvatar>\n  //     <ListItemText primary={contact.group_name} />\n  //     {\n  //       grpMsgNotifications.hasOwnProperty(contact.group_id) ? grpMsgNotifications[contact.group_id] + ' New msg received' : null\n  //     }\n  //     <ListItemSecondaryAction>\n  //       {/* <IconButton edge='end' aria-label='delete'>\n  //             <MoreVert onClick={(event) => handleMenuClick(event, contact)} />\n  //             </IconButton> */}\n  //     </ListItemSecondaryAction>\n  //   </ListItem>\n  //   <Divider variant='inset' component='li' />\n  // </Hidden>\n  // </React.Fragment>\n  ) : /*#__PURE__*/React.createElement(Typography, {\n    className: classes.commingSoonDesc,\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 17\n    }\n  }, \"No Term dates or Holidays added.\")))), console.log('initChatDetail--', initChatDetails), /*#__PURE__*/React.createElement(ChatWindow, {\n    initChatDetail: initChatDetails,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 9\n    }\n  })));\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.liveChatReducer.loading,\n    error: state.liveChatReducer.error,\n    success: state.liveChatReducer.success,\n    contacts: state.liveChatReducer.contacts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUserAndGroupList: data => dispatch(getUserAndGroupList(data)),\n    createGroup: data => dispatch(createGroup(data)),\n    initChat: data => dispatch(initChat(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(LiveChat));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/LiveChat/LiveChat.js"],"names":["Attachment","CropOriginal","EmojiEmotions","DoneAll","GroupAdd","MoreVert","Search","ArrowBack","PersonAdd","Avatar","Box","Button","Divider","Grid","IconButton","InputAdornment","List","ListItem","ListItemAvatar","ListItemSecondaryAction","ListItemText","Paper","TextField","Typography","Hidden","Menu","MenuItem","makeStyles","styled","CircularSpinner","React","useState","useEffect","useMemo","GroupDialog","connect","getUserAndGroupList","createGroup","initChat","withSnackbar","clsx","ChatWindow","useParams","Link","firebase","useStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","position","rightPanel","breakpoints","up","display","newMessage","backgroundColor","borderRadius","paddingHorizontal","AvatarShareStyled","height","width","marginRight","AvatarChatStyled","marginTop","AvatarChatRightStyled","marginLeft","TypoHeadStyled","fontSize","primary","main","textTransform","fontWeight","TypoHeadInnerStyled","SearchFieldStyled","PaperStyled","paddingRight","paddingLeft","GridHeaderStyled","borderBottom","GridFooterStyled","borderTop","paddingTop","paddingBottom","TypoNameStyled","TypoStatusStyled","contrastText","ChatBoxStyled","background","borderTopLeftRadius","ChatBoxRightStyled","borderTopRightRadius","TextFieldStyled","ButtonColor","props","DoneAllStyled","float","BoxDateStyled","margin","LiveChat","classes","showPanel","setShowPanel","handleShowDetail","handleHideDetail","filterOptions","value","label","open","setOpen","msgNotifications","updateMsgNotifications","initChatDetails","updateInitChatDetails","handleToopen","handleClose","newValue","contacts","enqueueSnackbar","error","success","loading","variant","chat_id","chat_type","user_id","business_code","JSON","parse","localStorage","getItem","contactList","updateContactList","dataTosend","undefined","console","log","length","chatDetails","filter","contact","contact_type","group_id","userId","chatType","chatParticipant","then","window","alert","location","href","Object","keys","filters","setFilter","handleFilterChange","event","target","list","users","user","groups","handleOnChange","searchStr","tempStr","charAt","slice","filteredList","isNaN","splitedName","split","obj","first_name","toLowerCase","includes","last_name","mobile_no","group_name","filteredUserList","filteredGroupList","groupCreated","updateGroupCreated","handleSaveGroupDetails","dataToSend","handleShowChatWindow","groupMembers","group_members","toString","messageRef","database","ref","listenMessages","off","grpMsgNotifications","updategGrpMsgNotifications","on","snapshot","snapshots","val","unreadMessages","chatRoom","chatRoomDetails","msgNodes","values","unreadMessageCount","nodeId","receiver_id","sender_id","userIds","i","userIndex","findIndex","deletedUser","splice","unshift","participant","Type","groupIds","groupIndex","group","deletedGroup","participants","anchorEl","setAnchorEl","deleteChatContact","updateDeleteChatContact","handleMenuClick","contactDetails","currentTarget","handleDeleteChat","chatNode","remove","marginBottom","map","option","startAdornment","contactIndex","profile_image","hasOwnProperty","commingSoonDesc","mapStateToProps","state","liveChatReducer","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import {\n  Attachment,\n  CropOriginal,\n  EmojiEmotions,\n  DoneAll,\n  GroupAdd,\n  MoreVert,\n  Search,\n  ArrowBack,\n  PersonAdd,\n} from '@material-ui/icons';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Divider,\n  Grid,\n  IconButton,\n  InputAdornment,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n  Paper,\n  TextField,\n  Typography,\n  Hidden,\n  Menu,\n  MenuItem,\n} from '@material-ui/core';\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport CircularSpinner from '../../component/CircularSpinner';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport GroupDialog from './Modal';\nimport { connect } from 'react-redux';\nimport { getUserAndGroupList, createGroup, initChat } from '../../store/actions/LiveChatActions';\nimport { withSnackbar } from 'notistack';\nimport clsx from 'clsx';\nimport ChatWindow from './ChatWindow';\nimport { useParams, Link } from 'react-router-dom';\n\n// For firebase chat purpose\nimport firebase from 'firebase';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    position: 'relative',\n  },\n  rightPanel: {\n    [theme.breakpoints.up('md')]: {\n      display: 'block !important',\n    },\n  },\n  newMessage: {\n    backgroundColor: 'orange',\n    borderRadius: 20,\n    padding: 2,\n    paddingHorizontal: 6,\n    color: 'white',\n  },\n}));\n\nconst AvatarShareStyled = styled(Avatar)({\n  height: 50,\n  width: 50,\n  marginRight: 20,\n});\n\nconst AvatarChatStyled = styled(Avatar)({\n  height: 25,\n  width: 25,\n  marginRight: 10,\n  marginTop: 24,\n});\n\nconst AvatarChatRightStyled = styled(AvatarChatStyled)({\n  marginRight: 0,\n  marginLeft: 10,\n});\n\nconst TypoHeadStyled = styled(Typography)(({ theme }) => ({\n  fontSize: 24,\n  color: theme.palette.primary.main,\n  textTransform: 'uppercase',\n  fontWeight: 'bold',\n}));\n\nconst TypoHeadInnerStyled = styled(TypoHeadStyled)(({ theme }) => ({\n  color: theme.palette.text.primary,\n}));\n\nconst SearchFieldStyled = styled(TextField)(() => ({\n  padding: 20,\n}));\n\nconst PaperStyled = styled(Paper)(() => ({\n  paddingRight: 30,\n  paddingLeft: 30,\n  height: 100 + '%',\n}));\n\nconst GridHeaderStyled = styled(Grid)(() => ({\n  borderBottom: '1px solid rgba(64, 87, 106, 0.1)',\n}));\n\nconst GridFooterStyled = styled(Grid)(() => ({\n  borderTop: '1px solid rgba(64, 87, 106, 0.1)',\n  paddingTop: 10,\n  paddingBottom: 10,\n}));\nconst TypoNameStyled = styled(Typography)(({ theme }) => ({\n  color: theme.palette.text.primary,\n  fontSize: 18,\n  fontWeight: 'bold',\n}));\nconst TypoStatusStyled = styled(Typography)(({ theme }) => ({\n  color: theme.palette.secondary.contrastText,\n  fontSize: 14,\n}));\n\nconst ChatBoxStyled = styled(Box)({\n  background: '#F5F5F5',\n  padding: 15,\n  borderRadius: 20,\n  borderTopLeftRadius: 0,\n  display: 'inline-block',\n  marginTop: 5,\n});\n\nconst ChatBoxRightStyled = styled(ChatBoxStyled)({\n  background: '#D1EDFE',\n  borderRadius: 20,\n  borderTopRightRadius: 0,\n});\n\nconst TextFieldStyled = styled(TextField)(({ theme }) => ({\n  padding: 20,\n  paddingBottom: 0,\n}));\n\nconst ButtonColor = styled(Button)(({ theme }) => ({\n  background: theme.palette.props.main,\n  color: theme.palette.props.contrastText,\n}));\n\nconst DoneAllStyled = styled(DoneAll)(({ theme }) => ({\n  color: theme.palette.text.primary,\n  fontSize: 22,\n  float: 'right',\n  marginLeft: 10,\n  '&.active': {\n    color: theme.palette.primary.main,\n  },\n}));\n\nconst BoxDateStyled = styled(Box)(({ theme }) => ({\n  display: 'block',\n  margin: 'auto',\n  width: 130,\n  background: 'rgba(0, 0, 0, 0.1)',\n  textAlign: 'center',\n  borderRadius: 15,\n  padding: '5px 10px',\n  '& p': {\n    color: '#212121',\n    fontSize: 12,\n    fontWeight: '500',\n  },\n}));\n\nfunction LiveChat(props) {\n  const classes = useStyles();\n  const [showPanel, setShowPanel] = useState(true);\n\n  const handleShowDetail = () => {\n    setShowPanel(false);\n  };\n\n  const handleHideDetail = () => {\n    setShowPanel(true);\n  };\n  \n  const filterOptions = [\n    {\n      value: 'all',\n      label: 'All Contacts',\n    },\n    {\n      value: 'contact',\n      label: 'Contact',\n    }  \n  ];\n  \n  const [open, setOpen] = useState(false);\n  const [msgNotifications, updateMsgNotifications] = useState({});\n  const [initChatDetails, updateInitChatDetails] = useState({});\n  const handleToopen = () => {\n    setOpen(true);\n  };\n  \n  const handleClose = (newValue) => {\n    setOpen(newValue);\n  };\n\n  // Get all the properties\n  const { contacts, enqueueSnackbar, error, success, loading } = props;\n\n  useMemo(() => {\n    error && enqueueSnackbar(error, { variant: 'error' });\n  }, [error]);\n\n  useMemo(() => {\n    success && enqueueSnackbar(success, { variant: 'success' });\n  }, [success]);\n\n  // Query params\n  let { chat_id, chat_type } = useParams();\n\n  const { user_id, business_code } = JSON.parse(localStorage.getItem('userData'));\n\n  const [contactList, updateContactList] = useState([]);\n  useEffect(() => {\n    const dataTosend = {\n      user_id,\n      business_code,\n    };\n    props.getUserAndGroupList(dataTosend);\n    updateContactList(contacts)\n  }, []);\n\n  useEffect(() => {\n    updateContactList(contacts);\n    // If query params are available, then initiate the chat for these params\n    if (chat_id !== undefined && chat_type !== undefined) {\n      console.log('enterr')\n      if (contacts.length > 0) {\n        let chatDetails = [];\n        if (chat_type == 'group') {\n          chatDetails = contacts.filter((contact) => contact.contact_type == chat_type && contact.group_id == chat_id);\n        } else {\n          chatDetails = contacts.filter(\n            (contact) => contact.contact_type == 'individual' && contact.user_id == chat_id\n            );\n        }\n        console.log('chat--',chatDetails)\n        if (chatDetails.length > 0) {\n          // Initiate the chat for the given query params\n          const dataTosend = {\n            userId: user_id,\n            chatType: chatDetails[0].contact_type,\n            chatParticipant: chatDetails[0],\n          };\n          props.initChat(dataTosend).then(() => {\n            updateInitChatDetails({ chatParticipant: chatDetails[0], chatType: chatDetails[0].contact_type });\n          });\n        } else {\n          window.alert('Invalid parameters');\n          window.location.href = '#/live-chat';\n        }\n      }\n    } else {\n      console.log('msgg',Object.keys(msgNotifications))\n      if (contacts.length > 0 && msgNotifications.length >0){\n      }\n      if (contacts.length > 0) {\n        // Initiate the chat for first contact in the contact list\n        const dataTosend = {\n          userId: user_id,\n          chatType: contacts[0].contact_type,\n          chatParticipant: contacts[0],\n        };\n        props.initChat(dataTosend).then(() => {\n          updateInitChatDetails({ chatParticipant: contacts[0], chatType: contacts[0].contact_type });\n        });\n      }\n    }\n  }, [contacts]);\n\n\n  const [filters, setFilter] = React.useState('all');\n  const handleFilterChange = (event) => {\n    const filter = event.target.value;\n    setFilter(filter);\n\n    let list = [...contacts];\n    if (filter === 'contact') {\n      const users = list.filter((user) => user.contact_type === 'individual');\n      updateContactList(users);\n    } else if (filter === 'groups') {\n      const groups = list.filter((user) => user.contact_type === 'group');\n      updateContactList(groups);\n    } else {\n      updateContactList(list);\n    }\n  };\n\n  const handleOnChange = (event) => {\n    const searchStr = event.target.value;\n\n    let tempStr = searchStr.charAt(0) === '0' ? searchStr.slice(1) : searchStr;\n\n    let list = [...contacts];\n\n    if (tempStr == '') {\n      console.log('list====', list);\n      updateContactList(list);\n    } else {\n      // Filter them\n      if (filters === 'contact') {\n        const users = list.filter((user) => user.contact_type === 'individual');\n        let filteredList = null;\n\n        if (isNaN(tempStr)) {\n          //filteredList = users.filter(obj => (obj.first_name.toLowerCase().includes(tempStr.toLowerCase())) || (obj.last_name.toLowerCase().includes(tempStr.toLowerCase())))\n          let splitedName = tempStr.split(' ');\n          if (splitedName.length > 1) {\n            filteredList = users.filter(\n              (obj) =>\n                (obj.first_name.toLowerCase().includes(splitedName[0].toLowerCase()) &&\n                  obj.last_name.toLowerCase().includes(splitedName[1].toLowerCase())) ||\n                (obj.first_name.toLowerCase().includes(splitedName[1].toLowerCase()) &&\n                  obj.last_name.toLowerCase().includes(splitedName[0].toLowerCase()))\n            );\n          } else {\n            filteredList = users.filter(\n              (obj) =>\n                obj.first_name.toLowerCase().includes(tempStr.toLowerCase()) ||\n                obj.last_name.toLowerCase().includes(tempStr.toLowerCase())\n            );\n          }\n        } else {\n          filteredList = users.filter((obj) => obj.mobile_no.includes(tempStr));\n        }\n\n        updateContactList(filteredList);\n      } else if (filters === 'groups') {\n        const groups = list.filter((user) => user.contact_type === 'group');\n        const filteredList = groups.filter((obj) => obj.group_name.toLowerCase().includes(tempStr.toLowerCase()));\n\n        updateContactList(filteredList);\n      } else {\n        const users = list.filter((user) => user.contact_type === 'individual');\n        let filteredUserList = null;\n        if (isNaN(tempStr)) {\n          let splitedName = tempStr.split(' ');\n          if (splitedName.length > 1) {\n\n            if (splitedName.length > 2) {\n              filteredUserList = users.filter(\n                (obj) =>\n                  (obj.first_name.toLowerCase().includes(splitedName[0].toLowerCase()) &&\n                    obj.last_name.toLowerCase().includes(splitedName[2].toLowerCase())) ||\n                  (obj.first_name.toLowerCase().includes(splitedName[2].toLowerCase()) &&\n                    obj.last_name.toLowerCase().includes(splitedName[0].toLowerCase()))\n              );\n            } else {\n              filteredUserList = users.filter(\n                (obj) =>\n                  (obj.first_name.toLowerCase().includes(splitedName[0].toLowerCase()) &&\n                    obj.last_name.toLowerCase().includes(splitedName[1].toLowerCase())) ||\n                  (obj.first_name.toLowerCase().includes(splitedName[1].toLowerCase()) &&\n                    obj.last_name.toLowerCase().includes(splitedName[0].toLowerCase()))  ||\n                    (obj.first_name.toLowerCase().includes(splitedName[0].toLowerCase()) &&\n                      obj.first_name.toLowerCase().includes(splitedName[1].toLowerCase()))\n              );\n            }\n\n            \n\n\n          } else {\n            filteredUserList = users.filter(\n              (obj) =>\n                obj.first_name.toLowerCase().includes(tempStr.toLowerCase()) ||\n                obj.last_name.toLowerCase().includes(tempStr.toLowerCase())\n            );\n          }\n        } else {\n          filteredUserList = users.filter((obj) => obj.mobile_no.includes(tempStr));\n        }\n\n        let groups = list.filter((user) => user.contact_type === 'group');\n\n        const filteredGroupList = groups.filter((obj) => obj.group_name.toLowerCase().includes(tempStr.toLowerCase()));\n\n        updateContactList([...filteredUserList], [...filteredGroupList]);\n      }\n    }\n  };\n\n  const [groupCreated, updateGroupCreated] = useState(false);\n  useEffect(() => {\n    if (groupCreated === true) {\n      const dataTosend = {\n        user_id,\n        business_code,\n      };\n      props.getUserAndGroupList(dataTosend);\n    }\n\n    updateGroupCreated(false);\n  }, [groupCreated]);\n  const handleSaveGroupDetails = async (dataToSend) => {\n    props.createGroup(dataToSend).then(() => {\n      // Close the modal\n      setOpen(false);\n\n      updateGroupCreated(true);\n    });\n  };\n\n  const handleShowChatWindow = (chatParticipant, chatType) => {\n    // chatType = individual or group\n\n    // Check if the user is in the group members or not. If not, show them an error message\n    if (chatType === 'group') {\n      let groupMembers = chatParticipant.group_members;\n      groupMembers = groupMembers.split(',');\n\n      if (!groupMembers.includes(user_id.toString())) {\n        enqueueSnackbar('You are not authorized to enter in this group', { variant: 'error' });\n        return false;\n      }\n    }\n\n    const dataTosend = {\n      userId: user_id,\n      chatType: chatType,\n      chatParticipant: chatParticipant,\n    };\n\n    props.initChat(dataTosend).then(() => {\n      updateInitChatDetails({ chatParticipant: chatParticipant, chatType: chatType });\n    });\n    console.log('dataTosend',dataTosend)\n  };\n\n  /* ---------- Chat related code starts ---------- */\n\n  var messageRef = firebase.database().ref();\n  useEffect(() => {\n    listenMessages();\n    console.log('initChatDetails=====', initChatDetails);\n    // Clear the rendered chat messages when component is unmounted and mounted again\n    return () => {\n      messageRef.off();\n    };\n  }, [initChatDetails]);\n  console.log('initChatDetails',initChatDetails)\nconsole.log('contacts',contacts)\n  const [grpMsgNotifications, updategGrpMsgNotifications] = useState({});\n  const listenMessages = () => {\n    messageRef.on('value', function (snapshot) {\n      const snapshots = snapshot.val();\n\n      let unreadMessages = {};\n      if (snapshots !== null) {\n        for (const chatRoom in snapshots) {\n          const chatRoomDetails = chatRoom.split('_');\n          \n          if (chatRoomDetails[1] === 'individual') {\n            const msgNodes = Object.values(snapshots[chatRoom]);\n\n            if (msgNodes.length > 0) {\n              let unreadMessageCount = 0;\n              for (const nodeId in msgNodes) {\n                if (msgNodes[nodeId].receiver_id === user_id && msgNodes[nodeId]['message_read_' + user_id] === false) {\n                  unreadMessageCount++;\n\n                  unreadMessages = { ...unreadMessages, ...{ [msgNodes[nodeId].sender_id]: unreadMessageCount } };\n                } else {\n                  // remove the key when the message is read\n                  delete unreadMessages[msgNodes[nodeId].sender_id];\n                }\n              }\n            }\n\n            updateMsgNotifications(unreadMessages);\n          } else {\n            const msgNodes = Object.values(snapshots[chatRoom]);\n            if (msgNodes.length > 0) {\n              let unreadMessageCount = 0;\n              for (const nodeId in msgNodes) {\n                if (msgNodes[nodeId]['message_read_' + user_id] === false) {\n                  unreadMessageCount++;\n\n                  unreadMessages = { ...unreadMessages, ...{ [chatRoomDetails[2]]: unreadMessageCount } };\n                }\n              }\n            } else {\n              // remove the key when the message is read\n              delete unreadMessages[chatRoomDetails[2]];\n            }\n\n            updategGrpMsgNotifications(unreadMessages);\n          }\n        }\n      }\n    });\n  };\n\n  /* ---------- Chat related code ends ---------- */\n\n  // To show contact on top when some message comes\n  if (Object.keys(msgNotifications).length > 0) {\n    const userIds = Object.keys(msgNotifications);\n    if (contactList.length > 0) {\n      for (let i = 0; i < userIds.length; i++) {\n        const userIndex = contactList.findIndex((contact) => contact.user_id === userIds[i]);\n\n        if (userIndex >= 0) {\n          const deletedUser = contactList.splice(userIndex, 1);\n          contactList.unshift(...deletedUser);\n          const participant =contactList.filter((user)=> user.user_id==userIds[0])\n          const Type=participant[0].contact_type;\n          const dataTosend = {\n            userId: user_id,\n            chatType: Type,\n            chatParticipant: participant[0],\n          };\n          \n          props.initChat(dataTosend).then(() => {\n            console.log('dataTosend',dataTosend)\n            updateInitChatDetails({ chatParticipant: participant[0], chatType: Type });\n          });\n          \n        }\n      }\n    }\n  }\n\n  // To show group on top when some message comes\n  if (Object.keys(grpMsgNotifications).length > 0) {\n    const groupIds = Object.keys(grpMsgNotifications);\n    if (contactList.length > 0) {\n      for (let i = 0; i < groupIds.length; i++) {\n        const groupIndex = contactList.findIndex((group) => group.group_id === groupIds[i]);\n\n        if (groupIndex >= 0) {\n          const deletedGroup = contactList.splice(groupIndex, 1);\n          contactList.unshift(...deletedGroup);\n\n          const participants =contactList.filter((group)=> group.group_id==groupIds[0])\n          const Type=participants[0].contact_type;\n          const dataTosend = {\n            userId: user_id,\n            chatType: Type,\n            chatParticipant: participants[0],\n          };\n          \n          props.initChat(dataTosend).then(() => {\n            console.log('dataTosend',dataTosend)\n            updateInitChatDetails({ chatParticipant: participants[0], chatType: Type });\n          });\n          \n        }\n      }\n    }\n  }\n\n  // For chat menu option\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [deleteChatContact, updateDeleteChatContact] = useState({});\n  const handleMenuClick = (event, contactDetails) => {\n    setAnchorEl(event.currentTarget);\n    updateDeleteChatContact(contactDetails);\n  };\n\n  const handleDeleteChat = () => {\n    setAnchorEl(null);\n\n    if (deleteChatContact.contact_type === 'individual') {\n      let chatNode = '';\n      let userId = user_id;\n      if (deleteChatContact.user_id > userId) {\n        chatNode = `chatroom_individual_${userId}_${deleteChatContact.user_id}`;\n      } else {\n        chatNode = `chatroom_individual_${deleteChatContact.user_id}_${userId}`;\n      }\n\n      // Remove the node from firebase\n      firebase.database().ref(chatNode).remove();\n    } else {\n      const chatNode = 'chatroom_group_' + deleteChatContact.group_id;\n\n      // Remove the node from firebase\n      firebase.database().ref(chatNode).remove();\n    }\n  };\n  return (\n    <>\n      <GroupDialog open={open} onClose={handleClose} handleSaveGroupDetails={handleSaveGroupDetails} />\n\n      <Grid container className=\"main-wrap-head\" style={{ marginBottom: 20 }} alignItems=\"center\">\n        <Grid item xs={7}>\n          <Box display=\"flex\" alignItems=\"center\">\n            {showPanel ? null : (\n              <Hidden mdUp implementation=\"css\">\n                <IconButton color=\"inherit\" onClick={handleHideDetail}>\n                  <ArrowBack />\n                </IconButton>\n              </Hidden>\n            )}\n            {console.log('initChatDetails--', initChatDetails)}\n            <TypoHeadStyled variant=\"h4\">\n              Live <TypoHeadInnerStyled component=\"span\">Chat</TypoHeadInnerStyled>\n            </TypoHeadStyled>\n          </Box>\n        </Grid>\n        <Grid item xs={5}>\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <Link\n              to={\n                initChatDetails.chatType == 'individual'\n                  ? '/create-rymindr/0/' +\n                    initChatDetails.chatParticipant.user_id +\n                    '/' +\n                    initChatDetails.chatParticipant.first_name +\n                    ' ' +\n                    initChatDetails.chatParticipant.last_name\n                  : initChatDetails.chatType == 'group'\n                  ? '/create-rymindr/' +\n                    initChatDetails.chatParticipant.group_id +\n                    '/0/' +\n                    initChatDetails.chatParticipant.group_name\n                  : ''\n              }\n            >\n              <Button variant=\"contained\" color=\"primary\" size=\"large\" className=\"mr-10\" startIcon={<PersonAdd />}>\n                Add new rymindr\n              </Button>\n            </Link>\n\n            {/* <ButtonColor variant='contained' color='primary' size='large' startIcon={<GroupAdd />} onClick={handleToopen}>\n              create new group\n            </ButtonColor> */}\n          </Box>\n        </Grid>\n      </Grid>\n\n      <Grid className=\"main-wrap-body liveChat-cont-wrap\" container alignItems=\"stretch\">\n        <Grid item xs={12} md={4} className=\"pr-25 leftSide-cont\">\n          <Paper className=\"chat-list-box\">\n            <TextFieldStyled\n              select\n              value={filters}\n              fullWidth\n              size=\"small\"\n              variant=\"outlined\"\n              autoComplete=\"off\"\n              onChange={handleFilterChange}\n            >\n              {filterOptions.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextFieldStyled>\n\n            <SearchFieldStyled\n              id=\"input-with-icon-textfield\"\n              variant=\"outlined\"\n              fullWidth\n              size=\"small\"\n              placeholder=\"Search by name or mobile number\"\n              onKeyUp={handleOnChange}\n              autoComplete=\"off\"\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <Search />\n                  </InputAdornment>\n                ),\n              }}\n            />\n            \n            <List className=\"chat-user-list\">\n              {loading && <CircularSpinner />}\n\n              {/* <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleDeleteChat}\n                >\n                    <MenuItem onClick={handleDeleteChat}>Clear Chat</MenuItem>\n                </Menu> */}\n                {console.log('contactList',contactList)}\n                {console.log('msgNotifications',msgNotifications)}\n              {contactList && contactList.length > 0\n                ? contactList.map(\n                    (contact, contactIndex) =>\n                      contact.contact_type === 'individual' ? (\n                        <React.Fragment key={contactIndex}>\n                          <Hidden mdUp implementation=\"css\">\n                            <ListItem button onClick={() => handleShowChatWindow(contact, 'individual')}>\n                              <ListItemAvatar>\n                                <AvatarShareStyled alt=\"profile picture\" src={contact.profile_image} />\n                              </ListItemAvatar>\n                              <ListItemText primary={contact.first_name + ' ' + contact.last_name} />\n                              <ListItemSecondaryAction className={classes.newMessage}>\n                                {msgNotifications.hasOwnProperty(contact.user_id)\n                                  ? msgNotifications[contact.user_id] + ' New msg received'\n                                  : null}\n                                <IconButton edge=\"end\" aria-label=\"delete\">\n                                  <MoreVert onClick={(event) => handleMenuClick(event, contact)} />\n                                </IconButton>\n                              </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"inset\" component=\"li\" />\n                          </Hidden>\n\n                          <Hidden smDown implementation=\"css\">\n                            <ListItem button onClick={() => handleShowChatWindow(contact, 'individual')}>\n                              <ListItemAvatar>\n                                <AvatarShareStyled alt=\"profile picture\" src={contact.profile_image} />\n                              </ListItemAvatar>\n                              <ListItemText\n                                primary={\n                                  contact.first_name !== ''\n                                    ? contact.first_name + ' ' + contact.last_name\n                                    : contact.mobile_no\n                                }\n                              />\n                              <ListItemSecondaryAction>\n                                {\n                                  // className={classes.newMessage}\n                                  msgNotifications.hasOwnProperty(contact.user_id) ? (\n                                    <span\n                                      style={{\n                                        backgroundColor: '#FF8A00',\n                                        borderRadius: 20,\n                                        padding: 3,\n                                        paddingLeft: 7,\n                                        paddingRight: 7,\n                                        fontSize: 12,\n                                        color: 'white',\n                                      }}\n                                    >\n                                      {msgNotifications[contact.user_id] + ' New msg received'}\n                                    </span>\n                                  ) : null\n                                }\n                                {/* <IconButton edge='end' aria-label='delete'>\n                                    <MoreVert onClick={(event) => handleMenuClick(event, contact)} />\n                                </IconButton> */}\n                              </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"inset\" component=\"li\" />\n                          </Hidden>\n                        </React.Fragment>\n                      ) : null\n                    // <React.Fragment key={contactIndex}>\n                    //   <Hidden mdUp implementation='css'>\n                    //     <ListItem button onClick={() => handleShowChatWindow(contact, 'group')}>\n                    //       <ListItemAvatar>\n                    //         <AvatarShareStyled alt='profile picture' src={contact.profile_image} />\n                    //       </ListItemAvatar>\n                    //       <ListItemText primary={contact.group_name} />\n                    //       {\n                    //         grpMsgNotifications.hasOwnProperty(contact.group_id) ? grpMsgNotifications[contact.group_id] + ' New msg received' : null\n                    //       }\n                    //       <ListItemSecondaryAction>\n                    //         {/* <IconButton edge='end' aria-label='delete'>\n                    //               <MoreVert onClick={(event) => handleMenuClick(event, contact)} />\n                    //               </IconButton> */}\n                    //       </ListItemSecondaryAction>\n                    //     </ListItem>\n                    //     <Divider variant='inset' component='li' />\n                    //   </Hidden>\n\n                    //   <Hidden smDown implementation='css'>\n                    //   <ListItem button onClick={() => handleShowChatWindow(contact, 'group')}>\n                    //     <ListItemAvatar>\n                    //       <AvatarShareStyled alt='profile picture' src={contact.group_icon} />\n                    //     </ListItemAvatar>\n                    //     <ListItemText primary={contact.group_name} />\n                    //     {\n                    //       grpMsgNotifications.hasOwnProperty(contact.group_id) ? grpMsgNotifications[contact.group_id] + ' New msg received' : null\n                    //     }\n                    //     <ListItemSecondaryAction>\n                    //       {/* <IconButton edge='end' aria-label='delete'>\n                    //             <MoreVert onClick={(event) => handleMenuClick(event, contact)} />\n                    //             </IconButton> */}\n                    //     </ListItemSecondaryAction>\n                    //   </ListItem>\n                    //   <Divider variant='inset' component='li' />\n                    // </Hidden>\n                    // </React.Fragment>\n                  )\n                : \n                <Typography className={classes.commingSoonDesc} style={{textAlign: 'center'}}>\n                   No Term dates or Holidays added.\n                </Typography>\n                }\n            </List>\n          </Paper>\n        </Grid>\n\n        {/* Chat window */}\n        {console.log('initChatDetail--',initChatDetails)}\n        <ChatWindow initChatDetail={initChatDetails} loading={loading} />\n      </Grid>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.liveChatReducer.loading,\n    error: state.liveChatReducer.error,\n    success: state.liveChatReducer.success,\n    contacts: state.liveChatReducer.contacts,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getUserAndGroupList: (data) => dispatch(getUserAndGroupList(data)),\n    createGroup: (data) => dispatch(createGroup(data)),\n    initChat: (data) => dispatch(initChat(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(LiveChat));\n"]},"metadata":{},"sourceType":"module"}