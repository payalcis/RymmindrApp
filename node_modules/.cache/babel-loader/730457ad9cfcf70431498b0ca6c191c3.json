{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/TermDatesHolidays/AddNewHolidayModal.js\";\nimport { Button, Grid, MenuItem, Typography, IconButton, Box, Checkbox, FormControlLabel } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Flag, Send, Close, BeachAccess } from '@material-ui/icons';\nimport { DatePicker, MuiPickersUtilsProvider, TimePicker } from '@material-ui/pickers';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport MomentUtils from '@date-io/moment';\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { connect, useDispatch } from 'react-redux';\nimport { getBusinessUsers, getGroups } from '../../store/actions/bookevent';\nimport { createTerm } from '../../store/actions/bookterm';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport moment from 'moment';\nimport { withSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport CircularSpinner from '../../component/CircularSpinner/index';\nimport ConfirmationDialogRaw from '../Bookings/EventBooking/Modal'; //import Tabmenu from '../Bookings/EventBooking/Modal/Memberlist'\n\nimport Tabmenu from '../Bookings/EventBooking/Modal/Memberlist';\nconst ButtonWarn = styled(Button)(({\n  theme\n}) => ({\n  background: theme.palette.warning.main,\n  color: theme.palette.warning.contrastText\n}));\nconst DialogTitleStyled = styled(DialogTitle)({\n  borderBottom: '1px solid #e0e0e0',\n  padding: '10px 24px',\n  marginBottom: 20\n});\nconst TypoPopHeadStyled = styled(Typography)(({\n  theme\n}) => ({\n  color: theme.palette.secondary.contrastText,\n  fontSize: 18,\n  fontWeight: '600'\n}));\nconst ButtonColor = styled(Button)(({\n  theme\n}) => ({\n  background: theme.palette.props.main,\n  color: theme.palette.props.contrastText\n}));\nconst AutocompleteStyled = styled(Autocomplete)({\n  height: 154,\n  '&>div': {\n    margin: 0,\n    '&>div': {\n      height: 154,\n      alignItems: 'flex-start'\n    }\n  }\n});\nconst FormFields = {\n  message: '',\n  EventForm_to_group: '',\n  eventForm_to: '',\n  user_id: '',\n  user_name: '',\n  subject: '',\n  category: '',\n  isPrivate: false,\n  // dynaminc_field: '',\n  // allow_parents:'',\n  set_date: '',\n  end_date: '' // id:'',\n\n};\n\nconst AddNewHolidayModal = props => {\n  const {\n    user_id,\n    business_code,\n    first_name,\n    last_name,\n    sc_bessi_name\n  } = JSON.parse(localStorage.getItem('userData'));\n  const {\n    enqueueSnackbar,\n    error,\n    sucessHoliday,\n    getGroups,\n    groups,\n    matched_contact,\n    businessusers,\n    getBusinessUsers,\n    createTerm,\n    UpdateHolidaylist,\n    loading\n  } = props;\n  const [formValue, setFormValue] = useState(FormFields);\n  const [formValidation, setFormValidation] = useState(FormFields);\n  const history = useHistory();\n  let {\n    ID\n  } = useParams();\n  useEffect(() => {\n    const dataToSend = {\n      user_id,\n      category_id: ''\n    }; // props.getcategories(dataToSend)\n\n    getGroups({\n      user_id\n    });\n    const SendToBusiness = {\n      user_id,\n      business_code\n    };\n    getBusinessUsers(SendToBusiness);\n\n    if (ID != undefined) {//  getBookListDetail({ID,user_id});\n    } //setFormValue([...formValue, { message:bookdetails[0].message}] )\n\n  }, []);\n  const [checked, setChecked] = useState([]);\n  const [memberchecked, setMemberchecked] = useState([]);\n  const [group_members, setGroup_members] = useState([]);\n  const [groupname_membersname, setGroupname_membersname] = useState([]);\n  const [eventForm_to, setEventForm_to] = useState('');\n  const [checkupdate, setCheckupdate] = useState(0);\n  const [setDate, setDateChange] = useState();\n  const [endDate, setEndDateChange] = useState();\n\n  const handleClose = newValue => {\n    setOpen(newValue);\n    const membername = [];\n    const groupname = [];\n    groups.forEach(element => {\n      const checkvalue = checked.indexOf(element.group_id);\n\n      if (checkvalue !== -1) {\n        groupname.push(element.group_name);\n      }\n    });\n    businessusers.forEach(element => {\n      const checkvalue = memberchecked.indexOf(element.user_id);\n\n      if (checkvalue !== -1) {\n        membername.push(`${element.first_name} ${element.last_name}`);\n      }\n    });\n    setGroupname_membersname(groupname.concat(membername));\n\n    if (memberchecked.length > 0) {\n      setFormValue({ ...formValue,\n        eventForm_to: memberchecked\n      });\n    }\n\n    if (checked.length > 0) {\n      setFormValue({ ...formValue,\n        EventForm_to_group: checked\n      });\n    }\n\n    const dataToSend = {\n      mobile_no: phoneNumber.join()\n    };\n\n    if (newValue) {// setValue(newValue);\n    }\n  };\n\n  const handleGroupToggle = value => {\n    const groupMembers = value.group_member_list;\n    const currentIndex = checked.indexOf(value.group_id);\n    const newChecked = [...checked];\n    const selectedmember = [...group_members];\n\n    if (currentIndex === -1) {\n      newChecked.push(value.group_id);\n      groupMembers.forEach(element => {\n        selectedmember.push(element.user_id);\n      });\n    } else {\n      newChecked.splice(currentIndex, 1);\n      groupMembers.forEach(element => {\n        const remomeitem = selectedmember.indexOf(element.user_id);\n        selectedmember.splice(remomeitem, 1);\n      });\n    }\n\n    const formvalidation = { ...formValidation\n    };\n    formvalidation.eventForm_to = '';\n    setFormValidation(formvalidation);\n    setFormValue({ ...formValue,\n      eventForm_to: ''\n    });\n    setChecked(newChecked);\n    setGroup_members(selectedmember);\n  };\n\n  const handleMemberToggle = value => {\n    const currentIndex = memberchecked.indexOf(value.user_id);\n    const newChecked = [...memberchecked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value.user_id);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    const formvalidation = { ...formValidation\n    };\n    setFormValue({ ...formValue,\n      eventForm_to: ''\n    });\n    formvalidation.eventForm_to = '';\n    setFormValidation(formvalidation);\n    setMemberchecked(newChecked);\n  };\n\n  const handleToopen = () => {\n    setOpen(true);\n  };\n\n  const handleToTagvalue = value => {\n    setPhoneNumber(value);\n  };\n\n  const [phoneNumber, setPhoneNumber] = useState([]);\n  const [state, setState] = useState({\n    checkedB: true,\n    switch: true\n  }); //const [selectedDate, handleDateChange] = useState(new Date())\n  // const [selectedTime, handleTimeChange] = useState(new Date())\n\n  const handleDateChange = e => {\n    const date = new Date(e);\n    const selecteddate = moment(date).format('YYYY-MM-DD');\n    setDateChange(selecteddate); // setEndDateChange(selecteddate);\n\n    const formvalidation = { ...formValidation\n    };\n    formvalidation.set_date = '';\n\n    if (selecteddate > endDate) {\n      formvalidation.end_date = 'You can not choose a date greater then end date.';\n      setFormValidation(formvalidation);\n    } else {\n      formvalidation.end_date = '';\n      setFormValidation(formvalidation);\n    }\n\n    setFormValue({ ...formValue,\n      set_date: selecteddate,\n      end_date: endDate\n    });\n  };\n\n  const handleEndDateChange = e => {\n    const formvalidation = { ...formValidation\n    };\n    const date = new Date(e);\n    const selectedenddate = moment(date).format('YYYY-MM-DD');\n    const currentDate = moment(new Date()).format('YYYY-MM-DD');\n    const startDate = moment(setDate).format('YYYY-MM-DD');\n    console.log('startDate===', startDate);\n    console.log('selectedenddate===', selectedenddate);\n\n    if (formValue.set_date == '') {\n      setDateChange(currentDate);\n      formvalidation.set_date = '';\n      setFormValue({ ...formValue,\n        set_date: currentDate\n      });\n      setFormValidation(formvalidation);\n    }\n\n    if (currentDate >= selectedenddate) {\n      formvalidation.end_date = 'You can not choose a date before the current date.';\n      setFormValidation(formvalidation);\n      setEndDateChange(selectedenddate);\n      setFormValue({ ...formValue,\n        end_date: selectedenddate\n      });\n    } else if (startDate > selectedenddate) {\n      formvalidation.end_date = 'End date must be greater than start date';\n      setEndDateChange(selectedenddate);\n      setFormValidation(formvalidation);\n      setFormValue({ ...formValue,\n        end_date: selectedenddate\n      });\n    } else {\n      setEndDateChange(selectedenddate);\n      formvalidation.end_date = '';\n      setFormValidation(formvalidation);\n      setFormValue({ ...formValue,\n        end_date: selectedenddate\n      });\n    }\n  }; // const handleEndDateChange = (e) => {\n  //   const date = new Date(e)\n  //   const selecteddate = moment(date).format('YYYY-MM-DD')\n  //   setEndDateChange(selecteddate)\n  //   const formvalidation = { ...formValidation }\n  //   formvalidation.end_date = ''\n  //   setFormValidation(formvalidation)\n  //   setFormValue({ ...formValue, end_date: selecteddate })\n  // }\n\n\n  const [open, setOpen] = React.useState(false);\n  const [openg, setOpeng] = React.useState(false);\n  const [isPrivate, setIsPrivate] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClickOpen1 = () => {\n    setOpeng(true);\n  };\n\n  const handleClose1 = () => {\n    setOpeng(false);\n    setDateChange('');\n    setEndDateChange('');\n    setGroup_members([]);\n    setMemberchecked(''); // setFormValue('')\n\n    setIsPrivate(false);\n    setMemberchecked([]);\n    setGroupname_membersname([]);\n    setFormValue(FormFields);\n    setFormValidation(FormFields);\n  };\n\n  const handleinput = e => {\n    const formdata = { ...formValue\n    };\n    const {\n      name,\n      value\n    } = e.target;\n    const formvalidation = { ...formValidation\n    };\n\n    if (name === 'message') {\n      formdata.message = value;\n      formvalidation.message = '';\n      setFormValidation(formvalidation);\n    } else if (name === 'subject') {\n      formdata.subject = value;\n      formvalidation.subject = '';\n      setFormValidation(formvalidation);\n    } else {\n      formdata[name] = value;\n    }\n\n    setFormValue(formdata);\n  };\n\n  const validate = () => {\n    const formvalidation = { ...formValidation\n    };\n    let isError = false;\n\n    if (!formValue.message) {\n      isError = true;\n      formvalidation.message = 'Please add Holiday Title';\n      setFormValidation(formvalidation);\n    }\n\n    if (!formValue.subject) {\n      isError = true;\n      formvalidation.subject = 'Please add Holiday name';\n      setFormValidation(formvalidation);\n    }\n\n    if (!formValue.eventForm_to && isPrivate && !formValue.EventForm_to_group && isPrivate) {\n      isError = true;\n      formvalidation.eventForm_to = 'Please add contact';\n      setFormValidation(formvalidation);\n    }\n\n    if (!formValue.set_date) {\n      isError = true;\n      formvalidation.set_date = 'Please Select valid Start Date';\n      setFormValidation(formvalidation);\n    }\n\n    if (!formValue.end_date) {\n      isError = true;\n      formvalidation.end_date = 'Please Select valid End Date';\n      setFormValidation(formvalidation);\n    }\n\n    if (formvalidation.end_date) {\n      isError = true;\n    }\n\n    return isError;\n  };\n\n  const handleChangeCheck = event => {\n    setIsPrivate(event.target.checked); // setState({ ...state, [event.target.name]: event.target.checked })\n\n    setFormValue({ ...formValue,\n      isPrivate: event.target.checked\n    });\n  };\n\n  const handleToSubmit = () => {\n    if (validate()) return false;\n    const formFeilds = { ...formValue\n    }; // if (validate()) return false\n\n    const EventFormField = { ...formFeilds\n    }; // if(isPrivate) {\n    //   if(checked.length > 0) {\n    //     EventFormField.EventForm_to_group = checked.join()\n    //   }\n    //   EventFormField.EventForm_group_members_to = [...new Set(group_members)].join()\n    //   EventFormField.eventForm_to =\n    //     matched_contact !== null ? memberchecked.join() + ',' + matched_contact.user_id : memberchecked.join()\n    // }\n\n    if (checked.length > 0) {\n      EventFormField.EventForm_to_group = checked.join();\n    }\n\n    if (group_members.length > 0) {\n      EventFormField.EventForm_group_members_to = [...new Set(group_members)].join();\n    } // EventFormField.EventForm_group_members_to = [...new Set(group_members)].join()\n\n\n    if (memberchecked.length > 0) {\n      EventFormField.eventForm_to = matched_contact !== null ? memberchecked.join() + ',' + matched_contact.user_id : memberchecked.join();\n    }\n\n    EventFormField.user_id = user_id;\n    EventFormField.user_name = first_name ? first_name : sc_bessi_name;\n    const unmatch = matched_contact ? matched_contact.mobile_no : '';\n    const sendAttachment = '';\n    EventFormField.category = 'holiday'; // console.log('EventFormField=====',EventFormField);\n    // return false;\n\n    if (checkupdate) {// updateEventbook(EventFormField, unmatch, history, sendAttachment);\n    } else {\n      createTerm(EventFormField, unmatch, history, sendAttachment);\n      UpdateHolidaylist(EventFormField);\n      setOpeng(false);\n    }\n\n    setDateChange('');\n    setEndDateChange('');\n    setGroup_members([]);\n    setMemberchecked(''); // setFormValue('')\n\n    setIsPrivate(false);\n    setMemberchecked([]);\n    setGroupname_membersname([]);\n    setFormValue(FormFields);\n    setFormValidation(FormFields);\n  };\n\n  useMemo(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]); // useMemo(() => {\n  //   setOpeng(false);\n  //   sucessHoliday && enqueueSnackbar(sucessHoliday, { variant: 'success' });\n  // }, [sucessHoliday])\n\n  useEffect(() => {\n    let mounted = true;\n    setTimeout(function () {\n      if (mounted) {\n        setOpeng(false);\n        sucessHoliday && enqueueSnackbar(sucessHoliday, {\n          variant: 'success'\n        });\n      }\n    }, 0);\n    return function cleanup() {\n      mounted = false;\n    };\n  }, [sucessHoliday]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ButtonColor, {\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    onClick: handleClickOpen1,\n    startIcon: /*#__PURE__*/React.createElement(BeachAccess, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 20\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }\n  }, \"Add new holiday\"), /*#__PURE__*/React.createElement(Dialog, {\n    open: openg,\n    onClose: handleClose1,\n    \"aria-labelledby\": \"form-dialog-title\",\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitleStyled, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TypoPopHeadStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 13\n    }\n  }, \"Add New Holiday\"), /*#__PURE__*/React.createElement(IconButton, {\n    color: \"default\",\n    onClick: handleClose1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Close, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: MomentUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmationDialogRaw, {\n    open: open,\n    onClose: handleClose,\n    groupdata: groups,\n    memberdata: businessusers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tabmenu, {\n    groupdata: groups,\n    memberdata: businessusers,\n    handleToggles: handleGroupToggle,\n    checked: checked,\n    handleMemberToggle: handleMemberToggle,\n    memberchecked: memberchecked,\n    handleToTagvalue: handleToTagvalue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Holiday\",\n    name: \"subject\",\n    fullWidth: true,\n    variant: \"outlined\",\n    value: formValue.subject,\n    onChange: handleinput,\n    error: !!formValidation.subject,\n    helperText: formValidation.subject,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    label: \"Start Date\",\n    inputVariant: \"outlined\",\n    value: setDate,\n    onChange: handleDateChange,\n    animateYearScrolling: true,\n    name: \"set_date\",\n    format: \"DD/MM/YYYY\",\n    fullWidth: true,\n    error: !!formValidation.set_date,\n    helperText: formValidation.set_date //disablePast={true}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    label: \"End Date\",\n    name: \"end_date\",\n    inputVariant: \"outlined\",\n    value: endDate,\n    onChange: handleEndDateChange,\n    animateYearScrolling: true,\n    format: \"DD/MM/YYYY\",\n    fullWidth: true,\n    error: !!formValidation.end_date,\n    helperText: formValidation.end_date,\n    disablePast: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: isPrivate,\n      onChange: handleChangeCheck,\n      name: \"isPrivate\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 21\n      }\n    }),\n    label: \"Make this holiday private ?  If checked only selected contacts will be added.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 17\n    }\n  })), isPrivate ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AutocompleteStyled, {\n    multiple: true,\n    limitTags: 4,\n    id: \"tags-filled\",\n    filterSelectedOptions: false,\n    options: [],\n    freeSolo: true,\n    onChange: (event, newValue) => {\n      let newVal = newValue.toString();\n      let getArray = newVal.split(',');\n      let user_id_arr = [];\n      let group_id_arr = [];\n\n      for (let i = 0; i < getArray.length; i++) {\n        var getNewList = businessusers.find(ele => (ele.first_name + ' ' + ele.last_name).trim() == getArray[i]);\n\n        if (getNewList) {\n          user_id_arr.push(getNewList.user_id);\n        } else {\n          //FOR GROUPS\n          let getNewGroupList = groups.find(ele => ele.group_name == getArray[i]);\n          getNewGroupList && getNewGroupList.group_id && group_id_arr.push(getNewGroupList.group_id);\n        }\n      }\n\n      setFormValue({ ...formValue,\n        eventForm_to: user_id_arr.length > 0 ? user_id_arr : '',\n        EventForm_to_group: group_id_arr.length > 0 ? group_id_arr : ''\n      });\n      setGroup_members(group_id_arr);\n      setGroupname_membersname(newValue);\n      setChecked(group_id_arr);\n      setMemberchecked(user_id_arr);\n    },\n    value: groupname_membersname,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"To\",\n      onChange: handleToopen,\n      onClick: handleToopen,\n      error: !!formValidation.eventForm_to,\n      helperText: formValidation.eventForm_to,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 23\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 19\n    }\n  })) : null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"What\\u2019s the rymindr\",\n    fullWidth: true,\n    variant: \"outlined\",\n    name: \"message\",\n    rows: 4,\n    rowsMax: 100,\n    value: formValue.message,\n    onChange: handleinput,\n    error: !!formValidation.message,\n    helperText: formValidation.message,\n    className: \"mb-40\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonWarn, {\n    onClick: handleToSubmit,\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    startIcon: /*#__PURE__*/React.createElement(Send, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 30\n      }\n    }),\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 17\n    }\n  }, loading && /*#__PURE__*/React.createElement(CircularSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 31\n    }\n  }), checkupdate == 1 ? 'Update Rymindr' : 'Send Rymindr')))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.bookterm.loading,\n    error: state.bookterm.error,\n    sucessHoliday: state.bookterm.sucessHoliday,\n    groups: state.bookevent.groups,\n    bookdetails: state.booklist.bookdetails,\n    businessusers: state.bookevent.businessusers,\n    matched_contact: state.bookevent.matched_contact\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getGroups: data => dispatch(getGroups(data)),\n    getBusinessUsers: data => dispatch(getBusinessUsers(data)),\n    createTerm: (data, unmatch, history, sendAttachment) => dispatch(createTerm(data, unmatch, history, sendAttachment))\n  };\n};\n\nAddNewHolidayModal.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  businessusers: PropTypes.array.isRequired,\n  getBusinessUsers: PropTypes.func.isRequired,\n  createTerm: PropTypes.func.isRequired,\n  getGroups: PropTypes.func.isRequired,\n  matched_contact: PropTypes.any.isRequired,\n  UpdateHolidaylist: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(AddNewHolidayModal));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/TermDatesHolidays/AddNewHolidayModal.js"],"names":["Button","Grid","MenuItem","Typography","IconButton","Box","Checkbox","FormControlLabel","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Flag","Send","Close","BeachAccess","DatePicker","MuiPickersUtilsProvider","TimePicker","Autocomplete","MomentUtils","makeStyles","styled","Link","useHistory","useParams","connect","useDispatch","getBusinessUsers","getGroups","createTerm","React","useEffect","useMemo","useState","moment","withSnackbar","PropTypes","CircularSpinner","ConfirmationDialogRaw","Tabmenu","ButtonWarn","theme","background","palette","warning","main","color","contrastText","DialogTitleStyled","borderBottom","padding","marginBottom","TypoPopHeadStyled","secondary","fontSize","fontWeight","ButtonColor","props","AutocompleteStyled","height","margin","alignItems","FormFields","message","EventForm_to_group","eventForm_to","user_id","user_name","subject","category","isPrivate","set_date","end_date","AddNewHolidayModal","business_code","first_name","last_name","sc_bessi_name","JSON","parse","localStorage","getItem","enqueueSnackbar","error","sucessHoliday","groups","matched_contact","businessusers","UpdateHolidaylist","loading","formValue","setFormValue","formValidation","setFormValidation","history","ID","dataToSend","category_id","SendToBusiness","undefined","checked","setChecked","memberchecked","setMemberchecked","group_members","setGroup_members","groupname_membersname","setGroupname_membersname","setEventForm_to","checkupdate","setCheckupdate","setDate","setDateChange","endDate","setEndDateChange","handleClose","newValue","setOpen","membername","groupname","forEach","element","checkvalue","indexOf","group_id","push","group_name","concat","length","mobile_no","phoneNumber","join","handleGroupToggle","value","groupMembers","group_member_list","currentIndex","newChecked","selectedmember","splice","remomeitem","formvalidation","handleMemberToggle","handleToopen","handleToTagvalue","setPhoneNumber","state","setState","checkedB","switch","handleDateChange","e","date","Date","selecteddate","format","handleEndDateChange","selectedenddate","currentDate","startDate","console","log","open","openg","setOpeng","setIsPrivate","handleClickOpen","handleClickOpen1","handleClose1","handleinput","formdata","name","target","validate","isError","handleChangeCheck","event","handleToSubmit","formFeilds","EventFormField","EventForm_group_members_to","Set","unmatch","sendAttachment","variant","mounted","setTimeout","cleanup","newVal","toString","getArray","split","user_id_arr","group_id_arr","i","getNewList","find","ele","trim","getNewGroupList","params","textAlign","mapStateToProps","bookterm","bookevent","bookdetails","booklist","mapDispatchToProps","dispatch","data","propTypes","func","isRequired","bool","array","any"],"mappings":"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","sourcesContent":["import { Button, Grid, MenuItem, Typography, IconButton, Box, Checkbox, FormControlLabel } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Flag, Send, Close, BeachAccess } from '@material-ui/icons';\nimport { DatePicker, MuiPickersUtilsProvider, TimePicker } from '@material-ui/pickers';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport MomentUtils from '@date-io/moment';\nimport { makeStyles, styled } from '@material-ui/core/styles';\n\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { connect, useDispatch } from 'react-redux';\nimport { getBusinessUsers, getGroups } from '../../store/actions/bookevent';\n\nimport { createTerm } from '../../store/actions/bookterm';\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport moment from 'moment';\nimport { withSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\n\nimport CircularSpinner from '../../component/CircularSpinner/index';\nimport ConfirmationDialogRaw from '../Bookings/EventBooking/Modal';\n//import Tabmenu from '../Bookings/EventBooking/Modal/Memberlist'\nimport Tabmenu from '../Bookings/EventBooking/Modal/Memberlist';\n\nconst ButtonWarn = styled(Button)(({ theme }) => ({\n  background: theme.palette.warning.main,\n  color: theme.palette.warning.contrastText,\n}));\n\nconst DialogTitleStyled = styled(DialogTitle)({\n  borderBottom: '1px solid #e0e0e0',\n  padding: '10px 24px',\n  marginBottom: 20,\n});\n\nconst TypoPopHeadStyled = styled(Typography)(({ theme }) => ({\n  color: theme.palette.secondary.contrastText,\n  fontSize: 18,\n  fontWeight: '600',\n}));\n\nconst ButtonColor = styled(Button)(({ theme }) => ({\n  background: theme.palette.props.main,\n  color: theme.palette.props.contrastText,\n}));\nconst AutocompleteStyled = styled(Autocomplete)({\n  height: 154,\n  '&>div': {\n    margin: 0,\n    '&>div': { height: 154, alignItems: 'flex-start' },\n  },\n});\n\nconst FormFields = {\n  message: '',\n  EventForm_to_group: '',\n  eventForm_to: '',\n  user_id: '',\n  user_name: '',\n  subject: '',\n  category: '',\n  isPrivate: false,\n  // dynaminc_field: '',\n  // allow_parents:'',\n  set_date: '',\n  end_date: '',\n  // id:'',\n};\n\nconst AddNewHolidayModal = (props) => {\n  const { user_id, business_code, first_name, last_name, sc_bessi_name } = JSON.parse(localStorage.getItem('userData'));\n\n  const {\n    enqueueSnackbar,\n    error,\n    sucessHoliday,\n    getGroups,\n    groups,\n    matched_contact,\n    businessusers,\n    getBusinessUsers,\n    createTerm,\n    UpdateHolidaylist,\n    loading,\n  } = props;\n\n  const [formValue, setFormValue] = useState(FormFields);\n  const [formValidation, setFormValidation] = useState(FormFields);\n  const history = useHistory();\n\n  let { ID } = useParams();\n\n  useEffect(() => {\n    const dataToSend = {\n      user_id,\n      category_id: '',\n    };\n    // props.getcategories(dataToSend)\n    getGroups({ user_id });\n    const SendToBusiness = {\n      user_id,\n      business_code,\n    };\n    getBusinessUsers(SendToBusiness);\n\n    if (ID != undefined) {\n      //  getBookListDetail({ID,user_id});\n    }\n    //setFormValue([...formValue, { message:bookdetails[0].message}] )\n  }, []);\n\n  const [checked, setChecked] = useState([]);\n  const [memberchecked, setMemberchecked] = useState([]);\n  const [group_members, setGroup_members] = useState([]);\n  const [groupname_membersname, setGroupname_membersname] = useState([]);\n  const [eventForm_to, setEventForm_to] = useState('');\n  const [checkupdate, setCheckupdate] = useState(0);\n  const [setDate, setDateChange] = useState();\n  const [endDate, setEndDateChange] = useState();\n\n  const handleClose = (newValue) => {\n    setOpen(newValue);\n    const membername = [];\n    const groupname = [];\n    groups.forEach((element) => {\n      const checkvalue = checked.indexOf(element.group_id);\n      if (checkvalue !== -1) {\n        groupname.push(element.group_name);\n      }\n    });\n    businessusers.forEach((element) => {\n      const checkvalue = memberchecked.indexOf(element.user_id);\n      if (checkvalue !== -1) {\n        membername.push(`${element.first_name} ${element.last_name}`);\n      }\n    });\n\n    setGroupname_membersname(groupname.concat(membername));\n    if (memberchecked.length > 0) {\n      setFormValue({ ...formValue, eventForm_to: memberchecked });\n    }\n    if (checked.length > 0) {\n      setFormValue({ ...formValue, EventForm_to_group: checked });\n    }\n    const dataToSend = {\n      mobile_no: phoneNumber.join(),\n    };\n    if (newValue) {\n      // setValue(newValue);\n    }\n  };\n\n  const handleGroupToggle = (value) => {\n    const groupMembers = value.group_member_list;\n    const currentIndex = checked.indexOf(value.group_id);\n    const newChecked = [...checked];\n    const selectedmember = [...group_members];\n\n    if (currentIndex === -1) {\n      newChecked.push(value.group_id);\n      groupMembers.forEach((element) => {\n        selectedmember.push(element.user_id);\n      });\n    } else {\n      newChecked.splice(currentIndex, 1);\n      groupMembers.forEach((element) => {\n        const remomeitem = selectedmember.indexOf(element.user_id);\n        selectedmember.splice(remomeitem, 1);\n      });\n    }\n    const formvalidation = { ...formValidation };\n    formvalidation.eventForm_to = '';\n    setFormValidation(formvalidation);\n    setFormValue({ ...formValue, eventForm_to: '' });\n    setChecked(newChecked);\n    setGroup_members(selectedmember);\n  };\n  const handleMemberToggle = (value) => {\n    const currentIndex = memberchecked.indexOf(value.user_id);\n    const newChecked = [...memberchecked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value.user_id);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    const formvalidation = { ...formValidation };\n    setFormValue({ ...formValue, eventForm_to: '' });\n    formvalidation.eventForm_to = '';\n    setFormValidation(formvalidation);\n\n    setMemberchecked(newChecked);\n  };\n\n  const handleToopen = () => {\n    setOpen(true);\n  };\n  const handleToTagvalue = (value) => {\n    setPhoneNumber(value);\n  };\n\n  const [phoneNumber, setPhoneNumber] = useState([]);\n\n  const [state, setState] = useState({\n    checkedB: true,\n    switch: true,\n  });\n  //const [selectedDate, handleDateChange] = useState(new Date())\n  // const [selectedTime, handleTimeChange] = useState(new Date())\n  const handleDateChange = (e) => {\n    const date = new Date(e);\n    const selecteddate = moment(date).format('YYYY-MM-DD');\n    setDateChange(selecteddate);\n    // setEndDateChange(selecteddate);\n    const formvalidation = { ...formValidation };\n    formvalidation.set_date = '';\n\n    if (selecteddate > endDate) {\n      formvalidation.end_date = 'You can not choose a date greater then end date.';\n      setFormValidation(formvalidation);\n    } else {\n      formvalidation.end_date = '';\n      setFormValidation(formvalidation);\n    }\n    setFormValue({ ...formValue, set_date: selecteddate, end_date: endDate });\n  };\n\n  const handleEndDateChange = (e) => {\n    const formvalidation = { ...formValidation };\n    const date = new Date(e);\n    const selectedenddate = moment(date).format('YYYY-MM-DD');\n    const currentDate = moment(new Date()).format('YYYY-MM-DD');\n    const startDate = moment(setDate).format('YYYY-MM-DD');\n    console.log('startDate===', startDate);\n    console.log('selectedenddate===', selectedenddate);\n    \n    if (formValue.set_date==''){\n      setDateChange(currentDate)\n      formvalidation.set_date = '';\n      setFormValue({...formValue,set_date:currentDate})\n      setFormValidation(formvalidation);\n    }\n\n    if (currentDate >= selectedenddate) {\n      formvalidation.end_date = 'You can not choose a date before the current date.';\n      setFormValidation(formvalidation);\n      setEndDateChange(selectedenddate)\n      setFormValue({ ...formValue, end_date: selectedenddate });\n    } else if (startDate > selectedenddate) {\n      formvalidation.end_date = 'End date must be greater than start date';\n      setEndDateChange(selectedenddate)\n      setFormValidation(formvalidation);\n      setFormValue({ ...formValue, end_date: selectedenddate });\n    } else {\n      setEndDateChange(selectedenddate);\n      formvalidation.end_date = '';\n      setFormValidation(formvalidation);\n      setFormValue({ ...formValue, end_date: selectedenddate });\n    }\n  };\n  // const handleEndDateChange = (e) => {\n  //   const date = new Date(e)\n  //   const selecteddate = moment(date).format('YYYY-MM-DD')\n  //   setEndDateChange(selecteddate)\n  //   const formvalidation = { ...formValidation }\n  //   formvalidation.end_date = ''\n  //   setFormValidation(formvalidation)\n  //   setFormValue({ ...formValue, end_date: selecteddate })\n  // }\n\n  const [open, setOpen] = React.useState(false);\n\n  const [openg, setOpeng] = React.useState(false);\n  const [isPrivate, setIsPrivate] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClickOpen1 = () => {\n    setOpeng(true);\n  };\n\n  const handleClose1 = () => {\n    setOpeng(false);\n    setDateChange('');\n    setEndDateChange('');\n    setGroup_members([]);\n    setMemberchecked('');\n    // setFormValue('')\n    setIsPrivate(false);\n    setMemberchecked([]);\n    setGroupname_membersname([]);\n    setFormValue(FormFields);\n    setFormValidation(FormFields);\n  };\n\n  const handleinput = (e) => {\n    const formdata = { ...formValue };\n    const { name, value } = e.target;\n    const formvalidation = { ...formValidation };\n    if (name === 'message') {\n      formdata.message = value;\n      formvalidation.message = '';\n      setFormValidation(formvalidation);\n    } else if (name === 'subject') {\n      formdata.subject = value;\n      formvalidation.subject = '';\n      setFormValidation(formvalidation);\n    } else {\n      formdata[name] = value;\n    }\n    setFormValue(formdata);\n  };\n\n  const validate = () => {\n    const formvalidation = { ...formValidation };\n\n    let isError = false;\n\n    if (!formValue.message) {\n      isError = true;\n      formvalidation.message = 'Please add Holiday Title';\n      setFormValidation(formvalidation);\n    }\n    if (!formValue.subject) {\n      isError = true;\n      formvalidation.subject = 'Please add Holiday name';\n      setFormValidation(formvalidation);\n    }\n    if (!formValue.eventForm_to && isPrivate && !formValue.EventForm_to_group && isPrivate) {\n      isError = true;\n      formvalidation.eventForm_to = 'Please add contact';\n      setFormValidation(formvalidation);\n    }\n    if (!formValue.set_date) {\n      isError = true;\n      formvalidation.set_date = 'Please Select valid Start Date';\n      setFormValidation(formvalidation);\n    }\n\n    if (!formValue.end_date) {\n      isError = true;\n      formvalidation.end_date = 'Please Select valid End Date';\n      setFormValidation(formvalidation);\n    }\n\n    if(formvalidation.end_date){\n      isError=true;\n    }\n\n    return isError;\n  };\n\n  const handleChangeCheck = (event) => {\n    setIsPrivate(event.target.checked);\n    // setState({ ...state, [event.target.name]: event.target.checked })\n    setFormValue({ ...formValue, isPrivate: event.target.checked });\n  };\n\n  const handleToSubmit = () => {\n    if (validate()) return false;\n\n    const formFeilds = { ...formValue };\n    // if (validate()) return false\n    const EventFormField = { ...formFeilds };\n\n    // if(isPrivate) {\n    //   if(checked.length > 0) {\n    //     EventFormField.EventForm_to_group = checked.join()\n    //   }\n    //   EventFormField.EventForm_group_members_to = [...new Set(group_members)].join()\n    //   EventFormField.eventForm_to =\n    //     matched_contact !== null ? memberchecked.join() + ',' + matched_contact.user_id : memberchecked.join()\n    // }\n\n    if (checked.length > 0) {\n      EventFormField.EventForm_to_group = checked.join();\n    }\n    if (group_members.length > 0) {\n      EventFormField.EventForm_group_members_to = [...new Set(group_members)].join();\n    }\n    // EventFormField.EventForm_group_members_to = [...new Set(group_members)].join()\n    if (memberchecked.length > 0) {\n      EventFormField.eventForm_to =\n        matched_contact !== null ? memberchecked.join() + ',' + matched_contact.user_id : memberchecked.join();\n    }\n\n    EventFormField.user_id = user_id;\n    EventFormField.user_name = first_name ? first_name : sc_bessi_name;\n\n    const unmatch = matched_contact ? matched_contact.mobile_no : '';\n\n    const sendAttachment = '';\n    EventFormField.category = 'holiday';\n    // console.log('EventFormField=====',EventFormField);\n    // return false;\n    if (checkupdate) {\n      // updateEventbook(EventFormField, unmatch, history, sendAttachment);\n    } else {\n      createTerm(EventFormField, unmatch, history, sendAttachment);\n\n      UpdateHolidaylist(EventFormField);\n      setOpeng(false);\n    }\n    setDateChange('');\n    setEndDateChange('');\n    setGroup_members([]);\n    setMemberchecked('');\n    // setFormValue('')\n    setIsPrivate(false);\n    setMemberchecked([]);\n    setGroupname_membersname([]);\n    setFormValue(FormFields);\n    setFormValidation(FormFields);\n  };\n\n  useMemo(() => {\n    error && enqueueSnackbar(error, { variant: 'error' });\n  }, [error]);\n\n  // useMemo(() => {\n  //   setOpeng(false);\n  //   sucessHoliday && enqueueSnackbar(sucessHoliday, { variant: 'success' });\n  // }, [sucessHoliday])\n\n  useEffect(() => {\n    let mounted = true;\n    setTimeout(function () {\n      if (mounted) {\n        setOpeng(false);\n        sucessHoliday && enqueueSnackbar(sucessHoliday, { variant: 'success' });\n      }\n    }, 0);\n    return function cleanup() {\n      mounted = false;\n    };\n  }, [sucessHoliday]);\n\n  return (\n    <div>\n      <ButtonColor\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"large\"\n        onClick={handleClickOpen1}\n        startIcon={<BeachAccess />}\n      >\n        Add new holiday\n      </ButtonColor>\n\n      <Dialog open={openg} onClose={handleClose1} aria-labelledby=\"form-dialog-title\" maxWidth=\"md\">\n        <DialogTitleStyled id=\"form-dialog-title\">\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n            <TypoPopHeadStyled>Add New Holiday</TypoPopHeadStyled>\n            <IconButton color=\"default\" onClick={handleClose1}>\n              <Close />\n            </IconButton>\n          </Box>\n        </DialogTitleStyled>\n        <DialogContent>\n          <MuiPickersUtilsProvider utils={MomentUtils}>\n            <ConfirmationDialogRaw open={open} onClose={handleClose} groupdata={groups} memberdata={businessusers}>\n              <Tabmenu\n                groupdata={groups}\n                memberdata={businessusers}\n                handleToggles={handleGroupToggle}\n                checked={checked}\n                handleMemberToggle={handleMemberToggle}\n                memberchecked={memberchecked}\n                handleToTagvalue={handleToTagvalue}\n              />\n            </ConfirmationDialogRaw>\n\n            <Grid container spacing={5}>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Holiday\"\n                  name=\"subject\"\n                  fullWidth\n                  variant=\"outlined\"\n                  value={formValue.subject}\n                  onChange={handleinput}\n                  error={!!formValidation.subject}\n                  helperText={formValidation.subject}\n                  fullWidth\n                />\n              </Grid>\n\n              <Grid item xs={6}>\n                <DatePicker\n                  label=\"Start Date\"\n                  inputVariant=\"outlined\"\n                  value={setDate}\n                  onChange={handleDateChange}\n                  animateYearScrolling\n                  name=\"set_date\"\n                  format=\"DD/MM/YYYY\"\n                  fullWidth\n                  error={!!formValidation.set_date}\n                  helperText={formValidation.set_date}\n                  //disablePast={true}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <DatePicker\n                  label=\"End Date\"\n                  name=\"end_date\"\n                  inputVariant=\"outlined\"\n                  value={endDate}\n                  onChange={handleEndDateChange}\n                  animateYearScrolling\n                  format=\"DD/MM/YYYY\"\n                  fullWidth\n                  error={!!formValidation.end_date}\n                  helperText={formValidation.end_date}\n                  disablePast={true}\n                />\n              </Grid>\n\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Checkbox checked={isPrivate} onChange={handleChangeCheck} name=\"isPrivate\" color=\"primary\" />\n                  }\n                  label=\"Make this holiday private ?  If checked only selected contacts will be added.\"\n                />\n              </Grid>\n\n              {isPrivate ? (\n                <Grid item xs={12}>\n                  <AutocompleteStyled\n                    multiple\n                    limitTags={4}\n                    id=\"tags-filled\"\n                    filterSelectedOptions={false}\n                    options={[]}\n                    freeSolo\n                    onChange={(event, newValue) => {\n                      let newVal = newValue.toString();\n                      let getArray = newVal.split(',');\n\n                      let user_id_arr = [];\n                      let group_id_arr = [];\n                      for (let i = 0; i < getArray.length; i++) {\n                        var getNewList = businessusers.find(\n                          (ele) => (ele.first_name + ' ' + ele.last_name).trim() == getArray[i]\n                        );\n                        if (getNewList) {\n                          user_id_arr.push(getNewList.user_id);\n                        } else {\n                          //FOR GROUPS\n                          let getNewGroupList = groups.find((ele) => ele.group_name == getArray[i]);\n                          getNewGroupList && getNewGroupList.group_id && group_id_arr.push(getNewGroupList.group_id);\n                        }\n                      }\n\n                      setFormValue({\n                        ...formValue,\n                        eventForm_to: user_id_arr.length > 0 ? user_id_arr : '',\n                        EventForm_to_group: group_id_arr.length > 0 ? group_id_arr : '',\n                      });\n\n                      setGroup_members(group_id_arr);\n                      setGroupname_membersname(newValue);\n                      setChecked(group_id_arr);\n                      setMemberchecked(user_id_arr);\n                    }}\n                    value={groupname_membersname}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        variant=\"outlined\"\n                        label=\"To\"\n                        onChange={handleToopen}\n                        onClick={handleToopen}\n                        error={!!formValidation.eventForm_to}\n                        helperText={formValidation.eventForm_to}\n                      />\n                    )}\n                  />\n                </Grid>\n              ) : null}\n\n              <Grid item xs={12}>\n                <TextField\n                  label=\"What’s the rymindr\"\n                  fullWidth\n                  variant=\"outlined\"\n                  name=\"message\"\n                  rows={4}\n                  rowsMax={100}\n                  value={formValue.message}\n                  onChange={handleinput}\n                  error={!!formValidation.message}\n                  helperText={formValidation.message}\n                  className=\"mb-40\"\n                />\n              </Grid>\n\n              <Grid item xs={12} style={{ textAlign: 'right' }}>\n                <ButtonWarn\n                  onClick={handleToSubmit}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  startIcon={<Send />}\n                  disabled={loading}\n                >\n                  {loading && <CircularSpinner />}\n                  {checkupdate == 1 ? 'Update Rymindr' : 'Send Rymindr'}\n                </ButtonWarn>\n              </Grid>\n            </Grid>\n          </MuiPickersUtilsProvider>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.bookterm.loading,\n    error: state.bookterm.error,\n    sucessHoliday: state.bookterm.sucessHoliday,\n    groups: state.bookevent.groups,\n    bookdetails: state.booklist.bookdetails,\n    businessusers: state.bookevent.businessusers,\n    matched_contact: state.bookevent.matched_contact,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getGroups: (data) => dispatch(getGroups(data)),\n    getBusinessUsers: (data) => dispatch(getBusinessUsers(data)),\n    createTerm: (data, unmatch, history, sendAttachment) =>\n      dispatch(createTerm(data, unmatch, history, sendAttachment)),\n  };\n};\n\nAddNewHolidayModal.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n\n  businessusers: PropTypes.array.isRequired,\n  getBusinessUsers: PropTypes.func.isRequired,\n  createTerm: PropTypes.func.isRequired,\n  getGroups: PropTypes.func.isRequired,\n  matched_contact: PropTypes.any.isRequired,\n  UpdateHolidaylist: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(AddNewHolidayModal));\n"]},"metadata":{},"sourceType":"module"}