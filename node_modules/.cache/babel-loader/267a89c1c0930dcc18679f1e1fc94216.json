{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/AccountSettings/Notifications.js\";\nimport { Box, Switch, Typography } from '@material-ui/core';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { notificationSetting } from '../../store/actions/accountsettingAction';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\nconst TypoStyled = styled(Typography)(({\n  theme\n}) => ({\n  fontSize: 17,\n  color: theme.palette.text.primary,\n  fontWeight: '600',\n  marginRight: 50,\n  width: 250\n}));\n\nconst Notifications = props => {\n  const {\n    notification_status,\n    notification_chat_status,\n    notification_post_status,\n    notification_msg_center_status,\n    user_id\n  } = JSON.parse(localStorage.getItem('userData'));\n  const {\n    NotificationSetting,\n    enqueueSnackbar,\n    error,\n    loading,\n    success_message,\n    sucess\n  } = props; // const [notificationState, setNotificationState] = useState(!!notification_status);\n\n  const [chatNotificationState, setchatNotificationState] = useState(notification_chat_status);\n  const [postNotificationState, setpostNotificationState] = useState(notification_post_status);\n  const [messagecenterNotificationState, setMessagecenterNotificationState] = useState(notification_msg_center_status);\n\n  const handleChange = (event, notification_type) => {\n    if (notification_type === 'notification_chat_status') setchatNotificationState(event.target.checked);\n    if (notification_type === 'notification_post_status') setpostNotificationState(event.target.checked);\n    if (notification_type === 'notification_msg_center_status') setMessagecenterNotificationState(event.target.checked);\n    const dataTosend = {\n      user_id,\n      notification_type,\n      notification_status: event.target.checked\n    };\n    NotificationSetting(dataTosend);\n  }; // useEffect(() => {\n  //   console.log('change state');\n  // }, [chatNotificationState]);\n\n\n  useMemo(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]);\n  useMemo(() => {\n    sucess && enqueueSnackbar(sucess, {\n      variant: 'sucess'\n    });\n  }, [sucess]);\n  useMemo(() => {\n    success_message && enqueueSnackbar(success_message, {\n      variant: 'success'\n    });\n  }, [success_message]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: 25,\n      paddingRight: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    className: \"mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TypoStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"Chat notifications\"), /*#__PURE__*/React.createElement(Switch, {\n    checked: chatNotificationState,\n    onChange: event => handleChange(event, 'notification_chat_status'),\n    color: \"primary\",\n    name: \"checkedA\",\n    inputProps: {\n      'aria-label': 'primary checkbox'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    className: \"mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TypoStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Posts and comments\"), /*#__PURE__*/React.createElement(Switch, {\n    checked: postNotificationState,\n    onChange: event => handleChange(event, 'notification_post_status'),\n    color: \"primary\",\n    name: \"checkedA\",\n    inputProps: {\n      'aria-label': 'primary checkbox'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    className: \"mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TypoStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Message center notifications\"), /*#__PURE__*/React.createElement(Switch, {\n    checked: messagecenterNotificationState,\n    onChange: event => handleChange(event, 'notification_msg_center_status'),\n    color: \"primary\",\n    name: \"checkedA\",\n    inputProps: {\n      'aria-label': 'primary checkbox'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = ({\n  account\n}) => {\n  return {\n    loading: account.loading,\n    error: account.error,\n    sucess: account.error,\n    success_message: account.success_message\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    NotificationSetting: data => dispatch(notificationSetting(data))\n  };\n};\n\nNotifications.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  NotificationSetting: PropTypes.func.isRequired,\n  success_message: PropTypes.any.isRequired,\n  sucess: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(Notifications));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/AccountSettings/Notifications.js"],"names":["Box","Switch","Typography","React","useState","useMemo","useEffect","PropTypes","connect","notificationSetting","styled","withSnackbar","TypoStyled","theme","fontSize","color","palette","text","primary","fontWeight","marginRight","width","Notifications","props","notification_status","notification_chat_status","notification_post_status","notification_msg_center_status","user_id","JSON","parse","localStorage","getItem","NotificationSetting","enqueueSnackbar","error","loading","success_message","sucess","chatNotificationState","setchatNotificationState","postNotificationState","setpostNotificationState","messagecenterNotificationState","setMessagecenterNotificationState","handleChange","event","notification_type","target","checked","dataTosend","variant","paddingLeft","paddingRight","mapStateToProps","account","mapDispatchToProps","dispatch","data","propTypes","func","isRequired","bool","string","any"],"mappings":";AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,UAAtB,QAAwC,mBAAxC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,QAAoD,OAApD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA,MAAMC,UAAU,GAAGF,MAAM,CAACR,UAAD,CAAN,CAAmB,CAAC;AAAEW,EAAAA;AAAF,CAAD,MAAgB;AACpDC,EAAAA,QAAQ,EAAE,EAD0C;AAEpDC,EAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmBC,OAF0B;AAGpDC,EAAAA,UAAU,EAAE,KAHwC;AAIpDC,EAAAA,WAAW,EAAE,EAJuC;AAKpDC,EAAAA,KAAK,EAAE;AAL6C,CAAhB,CAAnB,CAAnB;;AAQA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAM;AAAEC,IAAAA,mBAAF;AAAuBC,IAAAA,wBAAvB;AAAiDC,IAAAA,wBAAjD;AAA2EC,IAAAA,8BAA3E;AAA2GC,IAAAA;AAA3G,MAAuHC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAA7H;AACA,QAAM;AAAEC,IAAAA,mBAAF;AAAuBC,IAAAA,eAAvB;AAAwCC,IAAAA,KAAxC;AAA+CC,IAAAA,OAA/C;AAAwDC,IAAAA,eAAxD;AAAyEC,IAAAA;AAAzE,MAAoFf,KAA1F,CAF+B,CAG/B;;AACA,QAAM,CAACgB,qBAAD,EAAwBC,wBAAxB,IAAoDpC,QAAQ,CAACqB,wBAAD,CAAlE;AACA,QAAM,CAACgB,qBAAD,EAAwBC,wBAAxB,IAAoDtC,QAAQ,CAACsB,wBAAD,CAAlE;AACA,QAAM,CAACiB,8BAAD,EAAiCC,iCAAjC,IAAsExC,QAAQ,CAACuB,8BAAD,CAApF;;AAEA,QAAMkB,YAAY,GAAG,CAACC,KAAD,EAAQC,iBAAR,KAA8B;AACjD,QAAGA,iBAAiB,KAAK,0BAAzB,EAAqDP,wBAAwB,CAACM,KAAK,CAACE,MAAN,CAAaC,OAAd,CAAxB;AACrD,QAAGF,iBAAiB,KAAK,0BAAzB,EAAqDL,wBAAwB,CAACI,KAAK,CAACE,MAAN,CAAaC,OAAd,CAAxB;AACrD,QAAGF,iBAAiB,KAAK,gCAAzB,EAA2DH,iCAAiC,CAACE,KAAK,CAACE,MAAN,CAAaC,OAAd,CAAjC;AAC3D,UAAMC,UAAU,GAAG;AAAEtB,MAAAA,OAAF;AAAWmB,MAAAA,iBAAX;AAA8BvB,MAAAA,mBAAmB,EAAEsB,KAAK,CAACE,MAAN,CAAaC;AAAhE,KAAnB;AACAhB,IAAAA,mBAAmB,CAACiB,UAAD,CAAnB;AACD,GAND,CAR+B,CAgB/B;AACA;AACA;;;AAEA7C,EAAAA,OAAO,CAAC,MAAM;AACZ8B,IAAAA,KAAK,IAAID,eAAe,CAACC,KAAD,EAAQ;AAAEgB,MAAAA,OAAO,EAAE;AAAX,KAAR,CAAxB;AAED,GAHM,EAGJ,CAAChB,KAAD,CAHI,CAAP;AAIA9B,EAAAA,OAAO,CAAC,MAAM;AACZiC,IAAAA,MAAM,IAAIJ,eAAe,CAACI,MAAD,EAAS;AAAEa,MAAAA,OAAO,EAAE;AAAX,KAAT,CAAzB;AAED,GAHM,EAGJ,CAACb,MAAD,CAHI,CAAP;AAKAjC,EAAAA,OAAO,CAAC,MAAM;AAEZgC,IAAAA,eAAe,IAAIH,eAAe,CAACG,eAAD,EAAkB;AAAEc,MAAAA,OAAO,EAAE;AAAX,KAAlB,CAAlC;AACD,GAHM,EAGJ,CAACd,eAAD,CAHI,CAAP;AAMA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEe,MAAAA,WAAW,EAAE,EAAf;AAAmBC,MAAAA,YAAY,EAAE;AAAjC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,UAAU,EAAC,QAA/B;AAAwC,IAAA,SAAS,EAAC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEd,qBADX;AAEE,IAAA,QAAQ,EAAMO,KAAD,IAAWD,YAAY,CAClCC,KADkC,EAElC,0BAFkC,CAFtC;AAME,IAAA,KAAK,EAAC,SANR;AAOE,IAAA,IAAI,EAAC,UAPP;AAQE,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAcE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,UAAU,EAAC,QAA/B;AAAwC,IAAA,SAAS,EAAC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEL,qBADX;AAEE,IAAA,QAAQ,EAAMK,KAAD,IAAWD,YAAY,CAClCC,KADkC,EAElC,0BAFkC,CAFtC;AAME,IAAA,KAAK,EAAC,SANR;AAOE,IAAA,IAAI,EAAC,UAPP;AAQE,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAdF,eA2BE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,UAAU,EAAC,QAA/B;AAAwC,IAAA,SAAS,EAAC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,eAEE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEH,8BADX;AAEE,IAAA,QAAQ,EAAMG,KAAD,IAAWD,YAAY,CAClCC,KADkC,EAElC,gCAFkC,CAFtC;AAME,IAAA,KAAK,EAAC,SANR;AAOE,IAAA,IAAI,EAAC,UAPP;AAQE,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CA3BF,CADF;AA2CD,CA9ED;;AAgFA,MAAMQ,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACvC,SAAO;AACLnB,IAAAA,OAAO,EAAEmB,OAAO,CAACnB,OADZ;AAELD,IAAAA,KAAK,EAAEoB,OAAO,CAACpB,KAFV;AAGLG,IAAAA,MAAM,EAACiB,OAAO,CAACpB,KAHV;AAILE,IAAAA,eAAe,EAAEkB,OAAO,CAAClB;AAJpB,GAAP;AAOD,CARD;;AAUA,MAAMmB,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLxB,IAAAA,mBAAmB,EAAGyB,IAAD,IAAUD,QAAQ,CAAChD,mBAAmB,CAACiD,IAAD,CAApB;AADlC,GAAP;AAGD,CAJD;;AAMApC,aAAa,CAACqC,SAAd,GAA0B;AACxBzB,EAAAA,eAAe,EAAE3B,SAAS,CAACqD,IAAV,CAAeC,UADR;AAExBzB,EAAAA,OAAO,EAAE7B,SAAS,CAACuD,IAAV,CAAeD,UAFA;AAGxB1B,EAAAA,KAAK,EAAE5B,SAAS,CAACwD,MAAV,CAAiBF,UAHA;AAIxB5B,EAAAA,mBAAmB,EAAE1B,SAAS,CAACqD,IAAV,CAAeC,UAJZ;AAKxBxB,EAAAA,eAAe,EAAE9B,SAAS,CAACyD,GAAV,CAAcH,UALP;AAMxBvB,EAAAA,MAAM,EAAC/B,SAAS,CAACwD,MAAV,CAAiBF;AANA,CAA1B;AASA,eAAerD,OAAO,CAAC8C,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C7C,YAAY,CAACW,aAAD,CAAzD,CAAf","sourcesContent":["import { Box, Switch, Typography } from '@material-ui/core';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { notificationSetting } from '../../store/actions/accountsettingAction';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\n\nconst TypoStyled = styled(Typography)(({ theme }) => ({\n  fontSize: 17,\n  color: theme.palette.text.primary,\n  fontWeight: '600',\n  marginRight: 50,\n  width: 250\n}));\n\nconst Notifications = (props) => {\n  const { notification_status, notification_chat_status, notification_post_status, notification_msg_center_status, user_id } = JSON.parse(localStorage.getItem('userData'));\n  const { NotificationSetting, enqueueSnackbar, error, loading, success_message, sucess } = props;\n  // const [notificationState, setNotificationState] = useState(!!notification_status);\n  const [chatNotificationState, setchatNotificationState] = useState(notification_chat_status);\n  const [postNotificationState, setpostNotificationState] = useState(notification_post_status);\n  const [messagecenterNotificationState, setMessagecenterNotificationState] = useState(notification_msg_center_status);\n\n  const handleChange = (event, notification_type) => {\n    if(notification_type === 'notification_chat_status') setchatNotificationState(event.target.checked);\n    if(notification_type === 'notification_post_status') setpostNotificationState(event.target.checked);\n    if(notification_type === 'notification_msg_center_status') setMessagecenterNotificationState(event.target.checked);\n    const dataTosend = { user_id, notification_type, notification_status: event.target.checked };\n    NotificationSetting(dataTosend);\n  };\n\n  // useEffect(() => {\n  //   console.log('change state');\n  // }, [chatNotificationState]);\n\n  useMemo(() => {\n    error && enqueueSnackbar(error, { variant: 'error' });\n    \n  }, [error]);\n  useMemo(() => {\n    sucess && enqueueSnackbar(sucess, { variant: 'sucess' });\n    \n  }, [sucess]);\n\n  useMemo(() => {\n    \n    success_message && enqueueSnackbar(success_message, { variant: 'success' });\n  }, [success_message]);\n  \n  \n  return (\n    <div style={{ paddingLeft: 25, paddingRight: 25 }}>\n      <Box display=\"flex\" alignItems=\"center\" className=\"mt-10\">\n        <TypoStyled>Chat notifications</TypoStyled>\n        <Switch\n          checked={chatNotificationState}\n          onChange = { (event) => handleChange(\n            event,\n            'notification_chat_status'\n          ) }\n          color=\"primary\"\n          name=\"checkedA\"\n          inputProps={{ 'aria-label': 'primary checkbox' }}\n        />\n      </Box>\n      <Box display=\"flex\" alignItems=\"center\" className=\"mt-10\">\n        <TypoStyled>Posts and comments</TypoStyled>\n        <Switch\n          checked={postNotificationState}\n          onChange = { (event) => handleChange(\n            event,\n            'notification_post_status'\n          ) }\n          color=\"primary\"\n          name=\"checkedA\"\n          inputProps={{ 'aria-label': 'primary checkbox' }}\n        />\n      </Box>\n      <Box display=\"flex\" alignItems=\"center\" className=\"mt-10\">\n        <TypoStyled>Message center notifications</TypoStyled>\n        <Switch\n          checked={messagecenterNotificationState}\n          onChange = { (event) => handleChange(\n            event,\n            'notification_msg_center_status'\n          ) }\n          color=\"primary\"\n          name=\"checkedA\"\n          inputProps={{ 'aria-label': 'primary checkbox' }}\n        />\n      </Box>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ account }) => {\n  return {\n    loading: account.loading,\n    error: account.error,\n    sucess:account.error,\n    success_message: account.success_message\n\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    NotificationSetting: (data) => dispatch(notificationSetting(data)),\n  };\n};\n\nNotifications.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  NotificationSetting: PropTypes.func.isRequired,\n  success_message: PropTypes.any.isRequired,\n  sucess:PropTypes.string.isRequired,\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(Notifications));\n"]},"metadata":{},"sourceType":"module"}