{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/AccountDeactivate/AccountDeactivate.js\";\nimport { Grid, Paper, Typography } from '@material-ui/core';\nimport { Link, useParams } from 'react-router-dom';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport CircularSpinner from '../../component/CircularSpinner/index';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\nimport { deactivate_account } from '../../store/actions/auth';\nconst GridStyled = styled(Grid)({\n  height: '100vh'\n});\nconst PaperStyled = styled(Paper)({\n  width: 377,\n  textAlign: 'center',\n  padding: 30\n});\nconst TypoStyled = styled(Typography)(() => ({\n  fontSize: 18,\n  marginTop: 20,\n  marginBottom: 30,\n  fontWeight: 'bold'\n}));\n\nconst AccountDeactivate = props => {\n  const {\n    enqueueSnackbar,\n    error,\n    success_message\n  } = props;\n  const {\n    getemail,\n    getotp\n  } = useParams();\n  const [deactivated, setDeactivated] = useState(false);\n  useMemo(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]);\n  useMemo(() => {\n    success_message && enqueueSnackbar(success_message, {\n      variant: 'success'\n    });\n  }, [success_message]);\n  useEffect(() => {\n    async function accountDeactivate() {\n      const data = {\n        email: getemail,\n        otp: getotp\n      };\n      const isDeleted = await props.accountDeactivate(data);\n      if (isDeleted.status === true) setDeactivated(true);\n    }\n\n    accountDeactivate();\n  }, [getemail, getotp]);\n  return /*#__PURE__*/React.createElement(GridStyled, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: \"loginBg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PaperStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      width: 130\n    },\n    src: require('../../assets/images/login_logo.png'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TypoStyled, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, !deactivated ? /*#__PURE__*/React.createElement(CircularSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }) : 'We\\'re sorry to see you leave, but we\\'d love to have you back! You can recover your account by just signing back in again within 30 days from now.')));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    success_message: state.auth.success_message\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    accountDeactivate: email => dispatch(deactivate_account(email))\n  };\n};\n\nAccountDeactivate.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  accountDeactivate: PropTypes.func.isRequired,\n  error: PropTypes.string.isRequired,\n  success_message: PropTypes.any.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(AccountDeactivate));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/AccountDeactivate/AccountDeactivate.js"],"names":["Grid","Paper","Typography","Link","useParams","React","useEffect","useMemo","useState","CircularSpinner","PropTypes","connect","styled","withSnackbar","deactivate_account","GridStyled","height","PaperStyled","width","textAlign","padding","TypoStyled","fontSize","marginTop","marginBottom","fontWeight","AccountDeactivate","props","enqueueSnackbar","error","success_message","getemail","getotp","deactivated","setDeactivated","variant","accountDeactivate","data","email","otp","isDeleted","status","require","mapStateToProps","state","loading","auth","mapDispatchToProps","dispatch","propTypes","func","isRequired","bool","string","any"],"mappings":"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","sourcesContent":["import {\r\n    Grid,\r\n    Paper,\r\n    Typography,\r\n  } from '@material-ui/core';\r\n  import { Link,useParams } from 'react-router-dom';\r\n  import React, { useEffect,useMemo, useState } from 'react';\r\n  import CircularSpinner from '../../component/CircularSpinner/index';\r\n  import PropTypes from 'prop-types';\r\n  import { connect } from 'react-redux';\r\n  import { styled } from '@material-ui/core/styles';\r\n  import { withSnackbar } from 'notistack';\r\n  import { deactivate_account } from '../../store/actions/auth';\r\n  \r\n  const GridStyled = styled(Grid)({\r\n    height: '100vh',\r\n  });\r\n  \r\n  const PaperStyled = styled(Paper)({\r\n    width: 377,\r\n    textAlign: 'center',\r\n    padding: 30,\r\n  });\r\n  \r\n  const TypoStyled = styled(Typography)(() => ({\r\n    fontSize: 18,\r\n    marginTop: 20,\r\n    marginBottom: 30,\r\n    fontWeight: 'bold',\r\n  }));\r\n  \r\n\r\n  const AccountDeactivate = (props) => {\r\n\r\n    const { enqueueSnackbar, error, success_message } = props;\r\n    const {getemail,getotp} = useParams();\r\n\r\n    const [deactivated, setDeactivated] = useState(false);\r\n\r\n    useMemo(() => {\r\n      error && enqueueSnackbar(error, { variant: 'error' });\r\n    }, [error]);\r\n\r\n    useMemo(() => {\r\n        success_message && enqueueSnackbar(success_message, { variant: 'success' });\r\n      }, [success_message]);\r\n\r\n    useEffect(() => {\r\n      async function accountDeactivate(){\r\n        const data = {\r\n            email:getemail,\r\n            otp:getotp\r\n          }\r\n          const isDeleted = await props.accountDeactivate(data);\r\n          if(isDeleted.status === true)\r\n            setDeactivated(true);\r\n      }\r\n\r\n      accountDeactivate();\r\n    }, [getemail,getotp]);\r\n  \r\n    return (\r\n      <GridStyled container justify=\"center\" alignItems=\"center\" className=\"loginBg\">\r\n        <PaperStyled>\r\n          <img style={{width: 130}} src={require('../../assets/images/login_logo.png')} />\r\n          <TypoStyled variant=\"h6\">\r\n            {!deactivated? \r\n                <CircularSpinner/ >: \r\n                'We\\'re sorry to see you leave, but we\\'d love to have you back! You can recover your account by just signing back in again within 30 days from now.'}</TypoStyled>\r\n        </PaperStyled>\r\n      </GridStyled>\r\n    );\r\n  };\r\n  \r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      loading: state.auth.loading,\r\n      error: state.auth.error,\r\n      success_message: state.auth.success_message,\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        accountDeactivate: (email) => dispatch(deactivate_account(email)),\r\n    };\r\n  };\r\n  \r\n  AccountDeactivate.propTypes = {\r\n    enqueueSnackbar: PropTypes.func.isRequired,\r\n    loading: PropTypes.bool.isRequired,\r\n    accountDeactivate: PropTypes.func.isRequired,\r\n    error: PropTypes.string.isRequired,\r\n    success_message: PropTypes.any.isRequired,\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(AccountDeactivate));\r\n  "]},"metadata":{},"sourceType":"module"}