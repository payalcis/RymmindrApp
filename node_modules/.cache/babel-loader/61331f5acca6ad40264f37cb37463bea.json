{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n* @module easy-image/cloudservicesuploadadapter\n*/\nimport { Plugin } from 'ckeditor5/src/core';\nimport { FileRepository } from 'ckeditor5/src/upload';\n/**\n * A plugin that enables upload to [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/).\n *\n * It is mainly used by the {@link module:easy-image/easyimage~EasyImage} feature.\n *\n * After enabling this adapter you need to configure the CKEditor Cloud Services integration through\n * {@link module:cloud-services/cloudservices~CloudServicesConfig `config.cloudServices`}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class CloudServicesUploadAdapter extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'CloudServicesUploadAdapter';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return ['CloudServices', FileRepository];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const cloudServices = editor.plugins.get('CloudServices');\n    const token = cloudServices.token;\n    const uploadUrl = cloudServices.uploadUrl;\n\n    if (!token) {\n      return;\n    }\n\n    this._uploadGateway = editor.plugins.get('CloudServicesCore').createUploadGateway(token, uploadUrl);\n\n    editor.plugins.get(FileRepository).createUploadAdapter = loader => {\n      return new Adapter(this._uploadGateway, loader);\n    };\n  }\n\n}\n/**\n * @private\n */\n\nclass Adapter {\n  constructor(uploadGateway, loader) {\n    this.uploadGateway = uploadGateway;\n    this.loader = loader;\n  }\n\n  upload() {\n    return this.loader.file.then(file => {\n      this.fileUploader = this.uploadGateway.upload(file);\n      this.fileUploader.on('progress', (evt, data) => {\n        this.loader.uploadTotal = data.total;\n        this.loader.uploaded = data.uploaded;\n      });\n      return this.fileUploader.send();\n    });\n  }\n\n  abort() {\n    this.fileUploader.abort();\n  }\n\n}","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/node_modules/@ckeditor/ckeditor5-easy-image/src/cloudservicesuploadadapter.js"],"names":["Plugin","FileRepository","CloudServicesUploadAdapter","pluginName","requires","init","editor","cloudServices","plugins","get","token","uploadUrl","_uploadGateway","createUploadGateway","createUploadAdapter","loader","Adapter","constructor","uploadGateway","upload","file","then","fileUploader","on","evt","data","uploadTotal","total","uploaded","send","abort"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,sBAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,0BAAN,SAAyCF,MAAzC,CAAgD;AAC9D;AACD;AACA;AACsB,aAAVG,UAAU,GAAG;AACvB,WAAO,4BAAP;AACA;AAED;AACD;AACA;;;AACoB,aAARC,QAAQ,GAAG;AACrB,WAAO,CAAE,eAAF,EAAmBH,cAAnB,CAAP;AACA;AAED;AACD;AACA;;;AACCI,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AAEA,UAAMC,aAAa,GAAGD,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoB,eAApB,CAAtB;AAEA,UAAMC,KAAK,GAAGH,aAAa,CAACG,KAA5B;AACA,UAAMC,SAAS,GAAGJ,aAAa,CAACI,SAAhC;;AAEA,QAAK,CAACD,KAAN,EAAc;AACb;AACA;;AAED,SAAKE,cAAL,GAAsBN,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoB,mBAApB,EAA0CI,mBAA1C,CAA+DH,KAA/D,EAAsEC,SAAtE,CAAtB;;AAEAL,IAAAA,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoBR,cAApB,EAAqCa,mBAArC,GAA2DC,MAAM,IAAI;AACpE,aAAO,IAAIC,OAAJ,CAAa,KAAKJ,cAAlB,EAAkCG,MAAlC,CAAP;AACA,KAFD;AAGA;;AAnC6D;AAsC/D;AACA;AACA;;AACA,MAAMC,OAAN,CAAc;AACbC,EAAAA,WAAW,CAAEC,aAAF,EAAiBH,MAAjB,EAA0B;AACpC,SAAKG,aAAL,GAAqBA,aAArB;AAEA,SAAKH,MAAL,GAAcA,MAAd;AACA;;AAEDI,EAAAA,MAAM,GAAG;AACR,WAAO,KAAKJ,MAAL,CAAYK,IAAZ,CAAiBC,IAAjB,CAAuBD,IAAI,IAAI;AACrC,WAAKE,YAAL,GAAoB,KAAKJ,aAAL,CAAmBC,MAAnB,CAA2BC,IAA3B,CAApB;AAEA,WAAKE,YAAL,CAAkBC,EAAlB,CAAsB,UAAtB,EAAkC,CAAEC,GAAF,EAAOC,IAAP,KAAiB;AAClD,aAAKV,MAAL,CAAYW,WAAZ,GAA0BD,IAAI,CAACE,KAA/B;AACA,aAAKZ,MAAL,CAAYa,QAAZ,GAAuBH,IAAI,CAACG,QAA5B;AACA,OAHD;AAKA,aAAO,KAAKN,YAAL,CAAkBO,IAAlB,EAAP;AACA,KATM,CAAP;AAUA;;AAEDC,EAAAA,KAAK,GAAG;AACP,SAAKR,YAAL,CAAkBQ,KAAlB;AACA;;AAtBY","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n* @module easy-image/cloudservicesuploadadapter\n*/\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { FileRepository } from 'ckeditor5/src/upload';\n\n/**\n * A plugin that enables upload to [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/).\n *\n * It is mainly used by the {@link module:easy-image/easyimage~EasyImage} feature.\n *\n * After enabling this adapter you need to configure the CKEditor Cloud Services integration through\n * {@link module:cloud-services/cloudservices~CloudServicesConfig `config.cloudServices`}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CloudServicesUploadAdapter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'CloudServicesUploadAdapter';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ 'CloudServices', FileRepository ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\tconst cloudServices = editor.plugins.get( 'CloudServices' );\n\n\t\tconst token = cloudServices.token;\n\t\tconst uploadUrl = cloudServices.uploadUrl;\n\n\t\tif ( !token ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._uploadGateway = editor.plugins.get( 'CloudServicesCore' ).createUploadGateway( token, uploadUrl );\n\n\t\teditor.plugins.get( FileRepository ).createUploadAdapter = loader => {\n\t\t\treturn new Adapter( this._uploadGateway, loader );\n\t\t};\n\t}\n}\n\n/**\n * @private\n */\nclass Adapter {\n\tconstructor( uploadGateway, loader ) {\n\t\tthis.uploadGateway = uploadGateway;\n\n\t\tthis.loader = loader;\n\t}\n\n\tupload() {\n\t\treturn this.loader.file.then( file => {\n\t\t\tthis.fileUploader = this.uploadGateway.upload( file );\n\n\t\t\tthis.fileUploader.on( 'progress', ( evt, data ) => {\n\t\t\t\tthis.loader.uploadTotal = data.total;\n\t\t\t\tthis.loader.uploaded = data.uploaded;\n\t\t\t} );\n\n\t\t\treturn this.fileUploader.send();\n\t\t} );\n\t}\n\n\tabort() {\n\t\tthis.fileUploader.abort();\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}