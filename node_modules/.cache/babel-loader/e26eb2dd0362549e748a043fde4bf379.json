{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.CONTACT_ERROR,\n    error: error\n  };\n};\nexport const SuccessMessage = message => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE,\n    success_message: message\n  };\n};\nexport const getContactlist = data => {\n  let datatogroup = {\n    user_id: data.user_id\n  };\n  return async dispatch => {\n    try {\n      dispatch(SuccessMessage(null));\n      dispatch(isLoading());\n      const contactlist = await Axios().post('users/businessUserListrequest', data);\n      const grouplist = await Axios().post('users/getGroupList', datatogroup);\n      let mergedlist = [];\n      let GroupList = [];\n      let ContactList = [];\n\n      if (contactlist.data.data.length > 0 || grouplist.data.data.length > 0) {\n        if (grouplist.data.data.length > 0) {\n          GroupList = grouplist.data.data;\n          GroupList.map(item => {\n            data = {\n              id: item.group_id,\n              imageicon: item.group_icon,\n              type: 'groups',\n              name: item.group_name\n            };\n            mergedlist.push(data);\n          });\n        }\n\n        if (contactlist.data.data.length > 0) {\n          ContactList = contactlist.data.data;\n          ContactList.map(item => {\n            //if(item.accept_status==1){\n            data = {\n              id: item.user_id,\n              imageicon: item.profile_image,\n              type: 'contact',\n              name: item.first_name + ' ' + item.last_name,\n              mobile_no: item.mobile_no\n            };\n            mergedlist.push(data); //}\n          });\n        }\n\n        let newData = contactlist.data.data.filter(a => a.accept_status == 1);\n        dispatch(Success({\n          type: actionTypes.GETCONTACTLIST,\n          payload: {\n            mergedlist,\n            GroupList,\n            ContactList: ContactList\n          }\n        }));\n      } else {\n        dispatch(Success({\n          type: actionTypes.GETCONTACTLIST,\n          payload: {\n            mergedlist,\n            GroupList,\n            ContactList\n          }\n        }));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n}; // Get group list.\n\nexport const getGroupList = data => {\n  return async dispatch => {\n    try {\n      dispatch(SuccessMessage(null));\n      dispatch(isLoading());\n      const grouplist = await Axios().post('users/getGroupList', data);\n      let mergedlist = [];\n      let GroupList = [];\n\n      if (grouplist.data.data.length > 0) {\n        if (grouplist.data.data.length > 0) {\n          GroupList = grouplist.data.data;\n          GroupList.map(item => {\n            data = {\n              id: item.group_id,\n              imageicon: item.group_icon,\n              type: 'groups',\n              name: item.group_name\n            };\n            mergedlist.push(data);\n          });\n        }\n\n        dispatch(Success({\n          type: actionTypes.GETGROUPLIST,\n          payload: {\n            mergedlist,\n            GroupList\n          }\n        }));\n      } else {\n        dispatch(Success({\n          type: actionTypes.GETGROUPLIST,\n          payload: {\n            mergedlist,\n            GroupList\n          }\n        }));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const inviteGroup = (request_id, status, user_id, selected_user_id, keyword) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('user/invite-group-action', {\n        request_id,\n        status\n      });\n\n      if (response.data.status == '1') {\n        dispatch(getGroupList({\n          user_id,\n          selected_user_id,\n          keyword\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getGroupMemberList = data => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/getGroupDetail', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.CONTACT_GROUP_MEMBER_LIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const groupDelete = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/deleteGroup', data);\n\n      if (response.data.status === '1') {\n        dispatch(getContactlist(dataTosend));\n        dispatch(Success({\n          type: actionTypes.GROUPDELETE,\n          payload: response.data.message\n        }));\n        dispatch(SuccessMessage('Group has been deleted successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const contactDelete = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/removebusinessuser', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.CONTACTDELETE,\n          payload: response.data.message\n        }));\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage('Contact has been deleted successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const getAllUser = data => {\n  return async dispatch => {\n    dispatch(Success({\n      type: actionTypes.ISLOADING\n    }));\n\n    try {\n      // dispatch(\n      //   Success({\n      //     type: actionTypes.GET_SEARCHED_USERS,\n      //     payload: []\n      //   })\n      // );\n      // dispatch(isLoading());\n      const searchedlist = await Axios().post('users/searchDesktopUser', data);\n\n      if (searchedlist.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GET_SEARCHED_USERS,\n          payload: searchedlist.data.data\n        }));\n      } else {\n        console.log('GET_SEARCHED_USERSGET_SEARCHED_USERSGET_SEARCHED_USERS');\n        dispatch(Success({\n          type: actionTypes.GET_SEARCHED_USERS,\n          payload: null\n        }));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const addNewGroup = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/addNewGroup', data);\n\n      if (response.status == 200) {\n        dispatch(getContactlist(dataTosend));\n        dispatch(Success({\n          type: actionTypes.ADDNEWGROUP,\n          payload: response.data.message\n        }));\n        dispatch(SuccessMessage('Group has been added sucessfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const addContact = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const addcontact = await Axios().post('users/sendBusinessRequestToUser', data);\n\n      if (addcontact.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.ADD_CONTACT,\n          payload: addcontact.data.data\n        }));\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage('Contact added successfully.'));\n      } else {\n        dispatch(Fail(addcontact.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const updateGroup = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/updateGroup', data);\n\n      if (response.status == 200) {\n        dispatch(Success({\n          type: actionTypes.ADDNEWGROUP,\n          payload: response.data.message\n        }));\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage('Group has been updated successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const getRyminderList = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().get('rymindr/getRymindrsTermsHolidays', {\n        params: data\n      });\n      let payload;\n\n      if (response.data.status === 1) {\n        payload = response.data.data;\n      } else {\n        payload = response.data;\n      }\n\n      dispatch(Success({\n        type: actionTypes.RYMINDR_LIST,\n        payload: payload\n      }));\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n}; //add contact to Rymindr\n\nexport const addToRymindr = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('rymindr/updateContactToRymindrTermHoliday', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.ADDCONTACTTORYMINDR,\n          payload: response.data.data\n        }));\n        dispatch(SuccessMessage(response.data.message));\n        dispatch(getRyminderList(dataTosend));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n}; //add contact to Event.\n\nexport const addToEvent = data => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/updateEventUser', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.ADDCONTACTTOEVENT,\n          payload: response.data.data\n        }));\n        dispatch(SuccessMessage('Contact added to Event successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const InviteUser = data => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/invite_user', data);\n\n      if (response.data.status === '1') {\n        dispatch(SuccessMessage(response.data.message));\n      } else {}\n    } catch (error) {\n      console.log(error);\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const InviteUserInBulk = data => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('user/bulkInvite', data);\n      console.log('response==============', response);\n\n      if (response.data.status == '1') {\n        dispatch(SuccessMessage(response.data.message));\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n}; // Cancel Invitition Request\n\nexport const CancelInvititionRequest = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('users/cancel_invitation_request', data);\n\n      if (response.data.status === '1') {\n        const dataTosend = {\n          user_id: data.user_id,\n          business_code: data.business_code\n        };\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n}; // Check if group exists in active rymindrs.\n\nexport const checkGroupExistInActiveRymindrs = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios.post('rymindr/checkGroupExistInActiveRymindr', data);\n      dispatch(SuccessMessage(null));\n      return response.data.status;\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/contactActions.js"],"names":["actionTypes","Axios","isLoading","type","ISLOADING","Success","response","Fail","error","CONTACT_ERROR","SuccessMessage","message","SUCCESS_MESSAGE","success_message","getContactlist","data","datatogroup","user_id","dispatch","contactlist","post","grouplist","mergedlist","GroupList","ContactList","length","map","item","id","group_id","imageicon","group_icon","name","group_name","push","profile_image","first_name","last_name","mobile_no","newData","filter","a","accept_status","GETCONTACTLIST","payload","getGroupList","GETGROUPLIST","inviteGroup","request_id","status","selected_user_id","keyword","getGroupMemberList","CONTACT_GROUP_MEMBER_LIST","groupDelete","dataTosend","GROUPDELETE","contactDelete","CONTACTDELETE","getAllUser","searchedlist","GET_SEARCHED_USERS","console","log","addNewGroup","ADDNEWGROUP","addContact","addcontact","ADD_CONTACT","updateGroup","getRyminderList","get","params","RYMINDR_LIST","addToRymindr","ADDCONTACTTORYMINDR","addToEvent","ADDCONTACTTOEVENT","InviteUser","InviteUserInBulk","CancelInvititionRequest","business_code","checkGroupExistInActiveRymindrs"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\n\nexport const isLoading = () => {\n    return {\n        type: actionTypes.ISLOADING,\n    };\n};\n\nexport const Success = (response) => {\n    return response;\n};\n\nexport const Fail = (error) => {\n    return {\n        type: actionTypes.CONTACT_ERROR,\n        error: error,\n    };\n};\n\nexport const SuccessMessage = (message) => {\n    return {\n        type: actionTypes.SUCCESS_MESSAGE,\n        success_message: message,\n    };\n};\nexport const getContactlist = (data) => {\n\n    let datatogroup = {\n        user_id: data.user_id\n    };\n    return async(dispatch) => {\n        try {\n            dispatch(SuccessMessage(null));\n            dispatch(isLoading());\n            const contactlist = await Axios().post('users/businessUserListrequest', data);\n            const grouplist = await Axios().post('users/getGroupList', datatogroup);\n            let mergedlist = [];\n            let GroupList = [];\n            let ContactList = [];\n            if (contactlist.data.data.length > 0 || grouplist.data.data.length > 0) {\n                if (grouplist.data.data.length > 0) {\n                    GroupList = grouplist.data.data;\n                    GroupList.map((item) => {\n                        data = {\n                            id: item.group_id,\n                            imageicon: item.group_icon,\n                            type: 'groups',\n                            name: item.group_name,\n                        };\n                        mergedlist.push(data);\n                    });\n                }\n\n                if (contactlist.data.data.length > 0) {\n                    ContactList = contactlist.data.data;\n                    ContactList.map((item) => {\n\n                        //if(item.accept_status==1){\n                        data = {\n                            id: item.user_id,\n                            imageicon: item.profile_image,\n                            type: 'contact',\n                            name: item.first_name + ' ' + item.last_name,\n                            mobile_no: item.mobile_no\n                        };\n                        mergedlist.push(data);\n                        //}\n                    });\n                }\n\n                let newData = contactlist.data.data.filter(a => a.accept_status == 1);\n                dispatch(\n                    Success({\n                        type: actionTypes.GETCONTACTLIST,\n                        payload: { mergedlist, GroupList, ContactList: ContactList }\n                    })\n                );\n            } else {\n                dispatch(\n                    Success({\n                        type: actionTypes.GETCONTACTLIST,\n                        payload: { mergedlist, GroupList, ContactList }\n                    })\n                );\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\n// Get group list.\nexport const getGroupList = (data) => {\n\n    return async(dispatch) => {\n        try {\n            dispatch(SuccessMessage(null));\n            dispatch(isLoading());\n            const grouplist = await Axios().post('users/getGroupList', data);\n            let mergedlist = [];\n            let GroupList = [];\n\n            if (grouplist.data.data.length > 0) {\n                if (grouplist.data.data.length > 0) {\n                    GroupList = grouplist.data.data;\n                    GroupList.map((item) => {\n                        data = {\n                            id: item.group_id,\n                            imageicon: item.group_icon,\n                            type: 'groups',\n                            name: item.group_name,\n                        };\n                        mergedlist.push(data);\n                    });\n                }\n\n                dispatch(\n                    Success({\n                        type: actionTypes.GETGROUPLIST,\n                        payload: { mergedlist, GroupList }\n                    })\n                );\n            } else {\n                dispatch(\n                    Success({\n                        type: actionTypes.GETGROUPLIST,\n                        payload: { mergedlist, GroupList }\n                    })\n                );\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\nexport const inviteGroup = (request_id, status, user_id, selected_user_id, keyword) => {\n    return async(dispatch) => {\n        try {\n            const response = await Axios().post('user/invite-group-action', { request_id, status })\n            if (response.data.status == '1') {\n                dispatch(\n                    getGroupList({ user_id, selected_user_id, keyword })\n                )\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    }\n}\n\n\nexport const getGroupMemberList = (data) => {\n    return async(dispatch) => {\n        try {\n            const response = await Axios().post('users/getGroupDetail', data);\n            if (response.data.status === '1') {\n                dispatch(\n                    Success({\n                        type: actionTypes.CONTACT_GROUP_MEMBER_LIST,\n                        payload: response.data.data,\n                    })\n                );\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\nexport const groupDelete = (data, dataTosend) => {\n    return async(dispatch) => {\n        try {\n            const response = await Axios().post('users/deleteGroup', data);\n            if (response.data.status === '1') {\n                dispatch(getContactlist(dataTosend));\n                dispatch(\n                    Success({\n                        type: actionTypes.GROUPDELETE,\n                        payload: response.data.message,\n                    })\n                );\n                dispatch(SuccessMessage('Group has been deleted successfully.'));\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n\n        }\n    };\n};\nexport const contactDelete = (data, dataTosend) => {\n    return async(dispatch) => {\n        try {\n            const response = await Axios().post('users/removebusinessuser', data);\n            if (response.data.status === '1') {\n                dispatch(\n                    Success({\n                        type: actionTypes.CONTACTDELETE,\n                        payload: response.data.message,\n                    })\n                );\n                dispatch(getContactlist(dataTosend));\n                dispatch(SuccessMessage('Contact has been deleted successfully.'));\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n\n        }\n    };\n};\nexport const getAllUser = (data) => {\n    return async(dispatch) => {\n        dispatch(\n            Success({\n                type: actionTypes.ISLOADING\n            })\n        );\n        try {\n            // dispatch(\n            //   Success({\n            //     type: actionTypes.GET_SEARCHED_USERS,\n            //     payload: []\n            //   })\n            // );\n            // dispatch(isLoading());\n            const searchedlist = await Axios().post('users/searchDesktopUser', data);\n\n            if (searchedlist.data.status === '1') {\n                dispatch(\n                    Success({\n                        type: actionTypes.GET_SEARCHED_USERS,\n                        payload: searchedlist.data.data\n                    })\n                );\n            } else {\n\n                console.log('GET_SEARCHED_USERSGET_SEARCHED_USERSGET_SEARCHED_USERS');\n                dispatch(\n                    Success({\n                        type: actionTypes.GET_SEARCHED_USERS,\n                        payload: null\n                    })\n                );\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n}\nexport const addNewGroup = (data, dataTosend) => {\n    return async(dispatch) => {\n        try {\n\n            const response = await Axios().post('users/addNewGroup', data);\n\n            if (response.status == 200) {\n                dispatch(getContactlist(dataTosend));\n\n                dispatch(\n                    Success({\n                        type: actionTypes.ADDNEWGROUP,\n                        payload: response.data.message,\n                    })\n\n                );\n                dispatch(SuccessMessage('Group has been added sucessfully.'));\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n\n        }\n    };\n};\nexport const addContact = (data, dataTosend) => {\n    return async(dispatch) => {\n        try {\n            const addcontact = await Axios().post('users/sendBusinessRequestToUser', data);\n            if (addcontact.data.status === '1') {\n                dispatch(\n                    Success({\n                        type: actionTypes.ADD_CONTACT,\n                        payload: addcontact.data.data\n                    })\n                );\n                dispatch(getContactlist(dataTosend));\n                dispatch(SuccessMessage('Contact added successfully.'));\n            } else {\n                dispatch(Fail(addcontact.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n\n        }\n    };\n};\nexport const updateGroup = (data, dataTosend) => {\n    return async(dispatch) => {\n        try {\n            const response = await Axios().post('users/updateGroup', data);\n            if (response.status == 200) {\n                dispatch(\n                    Success({\n                        type: actionTypes.ADDNEWGROUP,\n                        payload: response.data.message,\n                    })\n                );\n                dispatch(getContactlist(dataTosend));\n                dispatch(SuccessMessage('Group has been updated successfully.'));\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n\n        }\n    };\n}\nexport const getRyminderList = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().get('rymindr/getRymindrsTermsHolidays', { params: data });\n            let payload;\n            if (response.data.status === 1) {\n                payload = response.data.data;\n            } else {\n                payload = response.data;\n            }\n            dispatch(\n                Success({\n                    type: actionTypes.RYMINDR_LIST,\n                    payload: payload,\n                })\n            );\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\n//add contact to Rymindr\nexport const addToRymindr = (data, dataTosend) => {\n    return async(dispatch) => {\n        try {\n            const response = await Axios().post('rymindr/updateContactToRymindrTermHoliday', data);\n            if (response.data.status === '1') {\n                dispatch(\n                    Success({\n                        type: actionTypes.ADDCONTACTTORYMINDR,\n                        payload: response.data.data,\n                    })\n                );\n                dispatch(SuccessMessage(response.data.message));\n                dispatch(getRyminderList(dataTosend));\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n\n        }\n    };\n};\n\n//add contact to Event.\nexport const addToEvent = (data) => {\n    return async(dispatch) => {\n        try {\n            const response = await Axios().post('users/updateEventUser', data);\n            if (response.data.status === '1') {\n                dispatch(\n                    Success({\n                        type: actionTypes.ADDCONTACTTOEVENT,\n                        payload: response.data.data,\n                    })\n                );\n                dispatch(SuccessMessage('Contact added to Event successfully.'));\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n\n        }\n    };\n};\n\nexport const InviteUser = (data) => {\n    return async(dispatch) => {\n        try {\n            const response = await Axios().post('users/invite_user', data);\n            if (response.data.status === '1') {\n                dispatch(SuccessMessage(response.data.message));\n            } else {}\n        } catch (error) {\n            console.log(error);\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n\n        }\n    };\n};\n\nexport const InviteUserInBulk = (data) => {\n    return async(dispatch) => {\n        try {\n            const response = await Axios().post('user/bulkInvite', data);\n            console.log('response==============', response);\n            if (response.data.status == '1') {\n                dispatch(SuccessMessage(response.data.message));\n            }\n        } catch (error) {\n            console.log(error);\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n        }\n    };\n};\n\n// Cancel Invitition Request\nexport const CancelInvititionRequest = (data) => {\n\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('users/cancel_invitation_request', data);\n            if (response.data.status === '1') {\n\n                const dataTosend = {\n                    user_id: data.user_id,\n                    business_code: data.business_code,\n                };\n\n                dispatch(getContactlist(dataTosend));\n                dispatch(SuccessMessage(response.data.message));\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage(null));\n            dispatch(Fail(null));\n\n        }\n    };\n};\n\n// Check if group exists in active rymindrs.\nexport const checkGroupExistInActiveRymindrs = (data) => {\n\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios.post('rymindr/checkGroupExistInActiveRymindr', data);\n            dispatch(SuccessMessage(null));\n            return response.data.status;\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}