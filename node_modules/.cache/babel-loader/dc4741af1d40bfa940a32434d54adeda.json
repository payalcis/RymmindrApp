{"ast":null,"code":"import { uuid, toArray } from './util';\nexport function clonePseudoElements(nativeNode, clonedNode) {\n  const pseudos = [':before', ':after'];\n  pseudos.forEach(pseudo => Pseudo.clonePseudoElement(nativeNode, clonedNode, pseudo));\n}\nvar Pseudo;\n\n(function (Pseudo) {\n  function clonePseudoElement(nativeNode, clonedNode, pseudo) {\n    const style = window.getComputedStyle(nativeNode, pseudo);\n    const content = style.getPropertyValue('content');\n\n    if (content === '' || content === 'none') {\n      return;\n    }\n\n    const className = uuid();\n    const styleElement = document.createElement('style');\n    styleElement.appendChild(getPseudoElementStyle(className, pseudo, style));\n    clonedNode.className = `${clonedNode.className} ${className}`;\n    clonedNode.appendChild(styleElement);\n  }\n\n  Pseudo.clonePseudoElement = clonePseudoElement;\n\n  function getPseudoElementStyle(className, pseudo, style) {\n    const selector = `.${className}:${pseudo}`;\n    const cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);\n    return document.createTextNode(`${selector}{${cssText}}`);\n  }\n\n  function formatCssText(style) {\n    const content = style.getPropertyValue('content');\n    return `${style.cssText} content: ${content};`;\n  }\n\n  function formatCssProperties(style) {\n    return toArray(style).map(name => {\n      const value = style.getPropertyValue(name);\n      const priority = style.getPropertyPriority(name);\n      return `${name}: ${value}${priority ? ' !important' : ''};`;\n    }).join(' ');\n  }\n})(Pseudo || (Pseudo = {}));","map":{"version":3,"sources":["../src/clonePseudoElements.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,EAAe,OAAf,QAA8B,QAA9B;AAEA,OAAM,SAAU,mBAAV,CACJ,UADI,EAEJ,UAFI,EAEmB;AAEvB,QAAM,OAAO,GAAG,CAAC,SAAD,EAAY,QAAZ,CAAhB;AACA,EAAA,OAAO,CAAC,OAAR,CAAiB,MAAD,IACd,MAAM,CAAC,kBAAP,CAA0B,UAA1B,EAAsC,UAAtC,EAAkD,MAAlD,CADF;AAGD;AAED,IAAU,MAAV;;AAAA,CAAA,UAAU,MAAV,EAAgB;AAGd,WAAgB,kBAAhB,CACE,UADF,EAEE,UAFF,EAGE,MAHF,EAGc;AAEZ,UAAM,KAAK,GAAG,MAAM,CAAC,gBAAP,CAAwB,UAAxB,EAAoC,MAApC,CAAd;AACA,UAAM,OAAO,GAAG,KAAK,CAAC,gBAAN,CAAuB,SAAvB,CAAhB;;AAEA,QAAI,OAAO,KAAK,EAAZ,IAAkB,OAAO,KAAK,MAAlC,EAA0C;AACxC;AACD;;AAED,UAAM,SAAS,GAAG,IAAI,EAAtB;AACA,UAAM,YAAY,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAArB;AACA,IAAA,YAAY,CAAC,WAAb,CAAyB,qBAAqB,CAAC,SAAD,EAAY,MAAZ,EAAoB,KAApB,CAA9C;AACA,IAAA,UAAU,CAAC,SAAX,GAAuB,GAAG,UAAU,CAAC,SAAS,IAAI,SAAS,EAA3D;AACA,IAAA,UAAU,CAAC,WAAX,CAAuB,YAAvB;AACD;;AAjBe,EAAA,MAAA,CAAA,kBAAA,GAAkB,kBAAlB;;AAmBhB,WAAS,qBAAT,CACE,SADF,EAEE,MAFF,EAGE,KAHF,EAG4B;AAE1B,UAAM,QAAQ,GAAG,IAAI,SAAS,IAAI,MAAM,EAAxC;AACA,UAAM,OAAO,GAAG,KAAK,CAAC,OAAN,GACZ,aAAa,CAAC,KAAD,CADD,GAEZ,mBAAmB,CAAC,KAAD,CAFvB;AAIA,WAAO,QAAQ,CAAC,cAAT,CAAwB,GAAG,QAAQ,IAAI,OAAO,GAA9C,CAAP;AACD;;AAED,WAAS,aAAT,CAAuB,KAAvB,EAAiD;AAC/C,UAAM,OAAO,GAAG,KAAK,CAAC,gBAAN,CAAuB,SAAvB,CAAhB;AACA,WAAO,GAAG,KAAK,CAAC,OAAO,aAAa,OAAO,GAA3C;AACD;;AAED,WAAS,mBAAT,CAA6B,KAA7B,EAAuD;AACrD,WAAO,OAAO,CAAS,KAAT,CAAP,CACJ,GADI,CACC,IAAD,IAAS;AACZ,YAAM,KAAK,GAAG,KAAK,CAAC,gBAAN,CAAuB,IAAvB,CAAd;AACA,YAAM,QAAQ,GAAG,KAAK,CAAC,mBAAN,CAA0B,IAA1B,CAAjB;AAEA,aAAO,GAAG,IAAI,KAAK,KAAK,GAAG,QAAQ,GAAG,aAAH,GAAmB,EAAE,GAAxD;AACD,KANI,EAOJ,IAPI,CAOC,GAPD,CAAP;AAQD;AACF,CAlDD,EAAU,MAAM,KAAN,MAAM,GAAA,EAAA,CAAhB","sourceRoot":"","sourcesContent":["import { uuid, toArray } from './util';\nexport function clonePseudoElements(nativeNode, clonedNode) {\n    const pseudos = [':before', ':after'];\n    pseudos.forEach((pseudo) => Pseudo.clonePseudoElement(nativeNode, clonedNode, pseudo));\n}\nvar Pseudo;\n(function (Pseudo) {\n    function clonePseudoElement(nativeNode, clonedNode, pseudo) {\n        const style = window.getComputedStyle(nativeNode, pseudo);\n        const content = style.getPropertyValue('content');\n        if (content === '' || content === 'none') {\n            return;\n        }\n        const className = uuid();\n        const styleElement = document.createElement('style');\n        styleElement.appendChild(getPseudoElementStyle(className, pseudo, style));\n        clonedNode.className = `${clonedNode.className} ${className}`;\n        clonedNode.appendChild(styleElement);\n    }\n    Pseudo.clonePseudoElement = clonePseudoElement;\n    function getPseudoElementStyle(className, pseudo, style) {\n        const selector = `.${className}:${pseudo}`;\n        const cssText = style.cssText\n            ? formatCssText(style)\n            : formatCssProperties(style);\n        return document.createTextNode(`${selector}{${cssText}}`);\n    }\n    function formatCssText(style) {\n        const content = style.getPropertyValue('content');\n        return `${style.cssText} content: ${content};`;\n    }\n    function formatCssProperties(style) {\n        return toArray(style)\n            .map((name) => {\n            const value = style.getPropertyValue(name);\n            const priority = style.getPropertyPriority(name);\n            return `${name}: ${value}${priority ? ' !important' : ''};`;\n        })\n            .join(' ');\n    }\n})(Pseudo || (Pseudo = {}));\n//# sourceMappingURL=clonePseudoElements.js.map"]},"metadata":{},"sourceType":"module"}