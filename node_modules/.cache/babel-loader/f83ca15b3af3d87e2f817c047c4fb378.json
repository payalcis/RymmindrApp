{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/MessageCenter/Modal/MessageModalDelete.js\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField, Divider } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme, styled } from '@material-ui/core/styles';\nconst ButtonStyled = styled(Button)(({\n  theme\n}) => ({\n  color: theme.palette.error.main\n}));\nconst FormFields = {\n  category: 'term',\n  message: ''\n};\n\nconst DeleteRymindr = ({\n  handleClose,\n  open,\n  deleteMsg\n}) => {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const [formValue, setFormValue] = useState(FormFields);\n  const [formValidation, setFormValidation] = useState(FormFields);\n\n  const handleinput = e => {\n    const formdata = { ...formValue\n    };\n    const {\n      name,\n      value\n    } = e.target;\n    const formvalidation = { ...formValidation\n    };\n\n    if (name === 'message') {\n      formdata.message = value;\n      formvalidation.message = '';\n      setFormValidation(formvalidation);\n    } else {\n      formdata[name] = value;\n    }\n\n    setFormValue(formdata);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    fullScreen: fullScreen,\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"responsive-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"responsive-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"Are you sure you want to delete this message?\"), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Reason(Optional)\",\n    name: \"message\",\n    fullWidth: true,\n    variant: \"outlined\",\n    value: formValue.message,\n    onChange: handleinput,\n    error: !!formValidation.message,\n    helperText: formValidation.message,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonStyled, {\n    autoFocus: true,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"No\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: deleteMsg,\n    color: \"primary\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, \"Yes\"))));\n};\n\nDeleteRymindr.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  deleteMsg: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};\nexport default DeleteRymindr;","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/MessageCenter/Modal/MessageModalDelete.js"],"names":["Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Grid","TextField","Divider","React","useState","PropTypes","useMediaQuery","useTheme","styled","ButtonStyled","theme","color","palette","error","main","FormFields","category","message","DeleteRymindr","handleClose","open","deleteMsg","fullScreen","breakpoints","down","formValue","setFormValue","formValidation","setFormValidation","handleinput","e","formdata","name","value","target","formvalidation","propTypes","func","isRequired","bool"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,MAAjB,EAAyBC,aAAzB,EAAwCC,aAAxC,EAAuDC,iBAAvD,EAA0EC,WAA1E,EAAuFC,IAAvF,EAA6FC,SAA7F,EAAwGC,OAAxG,QAAuH,mBAAvH;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,0BAAjC;AAEA,MAAMC,YAAY,GAAGD,MAAM,CAACd,MAAD,CAAN,CAAe,CAAC;AAAEgB,EAAAA;AAAF,CAAD,MAAgB;AAClDC,EAAAA,KAAK,EAAED,KAAK,CAACE,OAAN,CAAcC,KAAd,CAAoBC;AADuB,CAAhB,CAAf,CAArB;AAIA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,QAAQ,EAAC,MADQ;AAEjBC,EAAAA,OAAO,EAAC;AAFS,CAAnB;;AAKA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,IAAf;AAAqBC,EAAAA;AAArB,CAAD,KAAsC;AAC1D,QAAMX,KAAK,GAAGH,QAAQ,EAAtB;AACD,QAAMe,UAAU,GAAGhB,aAAa,CAACI,KAAK,CAACa,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,CAAhC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAACW,UAAD,CAA1C;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCxB,QAAQ,CAACW,UAAD,CAApD;;AAEA,QAAMc,WAAW,GAAIC,CAAD,IAAO;AACxB,UAAMC,QAAQ,GAAG,EAAE,GAAGN;AAAL,KAAjB;AACA,UAAM;AAAEO,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBH,CAAC,CAACI,MAA1B;AACA,UAAMC,cAAc,GAAG,EAAE,GAAGR;AAAL,KAAvB;;AACI,QAAIK,IAAI,KAAK,SAAb,EAAwB;AAC3BD,MAAAA,QAAQ,CAACd,OAAT,GAAmBgB,KAAnB;AACAE,MAAAA,cAAc,CAAClB,OAAf,GAAyB,EAAzB;AACGW,MAAAA,iBAAiB,CAACO,cAAD,CAAjB;AACC,KAJD,MAKK;AACHJ,MAAAA,QAAQ,CAACC,IAAD,CAAR,GAAiBC,KAAjB;AACD;;AACLP,IAAAA,YAAY,CAACK,QAAD,CAAZ;AACD,GAbF;;AAeC,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,UAAU,EAAET,UAApB;AAAgC,IAAA,IAAI,EAAEF,IAAtC;AAA4C,IAAA,OAAO,EAAED,WAArD;AAAkE,uBAAgB,yBAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,yBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADF,eAGI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,kBAAjB;AACA,IAAA,IAAI,EAAC,SADL;AAEA,IAAA,SAAS,MAFT;AAEU,IAAA,OAAO,EAAC,UAFlB;AAGA,IAAA,KAAK,EAAEM,SAAS,CAACR,OAHjB;AAIA,IAAA,QAAQ,EAAEY,WAJV;AAKA,IAAA,KAAK,EAAE,CAAC,CAACF,cAAc,CAACV,OALxB;AAMA,IAAA,UAAU,EAAEU,cAAc,CAACV,OAN3B;AAOA,IAAA,SAAS,MAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHJ,CAFF,eAiBE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,SAAS,MAAvB;AAAwB,IAAA,OAAO,EAAEE,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,eAIE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEE,SAAjB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAA4C,IAAA,SAAS,MAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAJF,CAjBF,CADF,CADF;AA8BD,CAnDD;;AAqDAH,aAAa,CAACkB,SAAd,GAA0B;AACxBjB,EAAAA,WAAW,EAAEd,SAAS,CAACgC,IAAV,CAAeC,UADJ;AAExBjB,EAAAA,SAAS,EAAEhB,SAAS,CAACgC,IAAV,CAAeC,UAFF;AAGxBlB,EAAAA,IAAI,EAAEf,SAAS,CAACkC,IAAV,CAAeD;AAHG,CAA1B;AAMA,eAAepB,aAAf","sourcesContent":["import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField, Divider } from '@material-ui/core';\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme, styled } from '@material-ui/core/styles';\n\nconst ButtonStyled = styled(Button)(({ theme }) => ({\n  color: theme.palette.error.main,\n}));\n\nconst FormFields = {\n  category:'term',\n  message:'',\n}\n\nconst DeleteRymindr = ({ handleClose, open, deleteMsg }) => {\n  const theme = useTheme();\n\tconst fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\tconst [formValue, setFormValue] = useState(FormFields)\n\tconst [formValidation, setFormValidation] = useState(FormFields)\n\t\n\tconst handleinput = (e) => {\n    const formdata = { ...formValue}\n    const { name, value } = e.target;\n    const formvalidation = { ...formValidation }\n        if (name === 'message') {\n\t\t\t\t\tformdata.message = value\n\t\t\t\t\tformvalidation.message = ''\n        setFormValidation(formvalidation)\n        }\n        else {\n          formdata[name] = value\n        }\n    setFormValue(formdata)\n  }\n\n  return (\n    <div>\n      <Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\n        <DialogTitle id=\"responsive-dialog-title\"></DialogTitle>\n        <DialogContent>\n          <DialogContentText>Are you sure you want to delete this message?</DialogContentText>\n          {/* <Divider variant='inset' component='li' /> */}\n            <Grid item xs={12}>\n              <TextField label='Reason(Optional)'  \n              name=\"message\" \n              fullWidth variant='outlined' \n              value={formValue.message} \n              onChange={handleinput}\n              error={!!formValidation.message}\n              helperText={formValidation.message}\n              fullWidth\n            />\n            </Grid>\n        </DialogContent>\n        <DialogActions>\n          <ButtonStyled autoFocus onClick={handleClose}>\n            No\n          </ButtonStyled>\n          <Button onClick={deleteMsg} color=\"primary\" autoFocus>\n            Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nDeleteRymindr.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  deleteMsg: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};\n\nexport default DeleteRymindr;\n"]},"metadata":{},"sourceType":"module"}