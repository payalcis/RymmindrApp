{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/Login/Login.js\";\nimport * as actions from '../../store/actions/index';\nimport { Box, Button, FormControl, Grid, IconButton, InputAdornment, InputLabel, OutlinedInput, Paper, TextField, Typography } from '@material-ui/core';\nimport { Link, Redirect } from 'react-router-dom';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport CircularSpinner from '../../component/CircularSpinner/index';\nimport PropTypes from 'prop-types';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { connect } from 'react-redux';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\nconst GridStyled = styled(Grid)({\n  height: '100%'\n});\nconst PaperStyled = styled(Paper)({\n  width: 377,\n  textAlign: 'center',\n  padding: 30\n});\nconst TypoStyled = styled(Typography)(() => ({\n  fontSize: 24,\n  marginTop: 20,\n  marginBottom: 30,\n  fontWeight: 'bold'\n}));\nconst LinkStyled = styled(Link)(({\n  theme\n}) => ({\n  color: theme.palette.primary.main,\n  textDecoration: 'none'\n}));\nconst FormFields = {\n  email: '',\n  password: ''\n};\n\nconst Login = props => {\n  const {\n    enqueueSnackbar,\n    error,\n    Fail\n  } = props; // useEffect(() => {\n  //   error && enqueueSnackbar(error, { variant: 'error' });\n  // }, [error]);\n\n  useEffect(() => {\n    let mounted = true;\n    setTimeout(function () {\n      if (mounted) {\n        error && enqueueSnackbar(error, {\n          variant: 'error'\n        });\n      }\n    }, 0);\n    return function cleanup() {\n      mounted = false;\n      Fail(null);\n    };\n  }, [error]);\n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n    showPassword: false\n  });\n  const [formvalues, setFormvalues] = useState(FormFields);\n  const [formvalidation, setFormvalidation] = useState(FormFields);\n\n  const handleChange = e => {\n    const form = { ...formvalues\n    };\n    const formerr = { ...formvalidation\n    };\n    form[e.target.name] = e.target.value;\n    formerr[e.target.name] = '';\n    setFormvalues(form);\n    setFormvalidation(FormFields);\n  };\n\n  const handlevalidation = () => {\n    let error = false;\n    const formerr = { ...formvalidation\n    };\n\n    if (!formvalues.email) {\n      error = true;\n      formerr.email = 'Email is required!';\n      setFormvalidation(formerr);\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formvalues.email)) {\n      error = true;\n      formerr.email = 'Invalid email address';\n      setFormvalidation(formerr);\n    }\n\n    if (!formvalues.password) {\n      error = true;\n      formerr.password = 'Password is required!';\n      setFormvalidation(formerr);\n    }\n\n    return error;\n  };\n\n  const loginSubmitHandler = e => {\n    e.preventDefault();\n    if (handlevalidation()) return false;\n    props.onAuth(formvalues.email, formvalues.password);\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values,\n      showPassword: !values.showPassword\n    });\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const userId = localStorage.getItem('token');\n  let authRedirect = null;\n\n  if (userId) {\n    authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 20\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(GridStyled, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: \"loginBg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, authRedirect, /*#__PURE__*/React.createElement(PaperStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      width: 130\n    },\n    src: require('../../assets/images/login_logo.png'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TypoStyled, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"LOGIN\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: loginSubmitHandler,\n    validate: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    error: !!formvalidation.email,\n    helperText: formvalidation.email,\n    id: \"email\",\n    label: \"Email\",\n    name: \"email\",\n    variant: \"outlined\",\n    fullWidth: true,\n    onChange: handleChange,\n    value: formvalues.email,\n    margin: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    margin: \"normal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"outlined-adornment-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(OutlinedInput, {\n    id: \"outlined-adornment-password\",\n    type: values.showPassword ? 'text' : 'password',\n    fullWidth: true,\n    error: !!formvalidation.password,\n    label: \"Password\",\n    name: \"password\",\n    variant: \"Outlined\",\n    onChange: handleChange,\n    value: formvalues.password,\n    autoComplete: \"current-password\",\n    helpertext: formvalidation.password,\n    endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: handleClickShowPassword,\n      onMouseDown: handleMouseDownPassword,\n      edge: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 19\n      }\n    }, values.showPassword ? /*#__PURE__*/React.createElement(Visibility, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 44\n      }\n    }) : /*#__PURE__*/React.createElement(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 61\n      }\n    }))),\n    labelWidth: 70,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Box, {\n    my: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LinkStyled, {\n    style: {\n      fontSize: 14,\n      fontWeight: '500'\n    },\n    to: \"/forget-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Forgot Password?\")), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, props.loginLoading && /*#__PURE__*/React.createElement(CircularSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 38\n    }\n  }), \"Login\"))), /*#__PURE__*/React.createElement(Box, {\n    flexDirection: \"row\",\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      fontSize: 14,\n      fontWeight: '500'\n    },\n    component: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, \"Don\\u2019t have an account? \"), /*#__PURE__*/React.createElement(LinkStyled, {\n    style: {\n      fontSize: 14,\n      fontWeight: '500'\n    },\n    to: \"/register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, \"Create Account\"))));\n};\n\nconsole.log('err', error);\n\nconst mapStateToProps = state => {\n  return {\n    loginLoading: state.auth.loginLoading,\n    error: state.auth.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth(email, password)),\n    Fail: err => dispatch(actions.Fail(err))\n  };\n};\n\nLogin.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loginLoading: PropTypes.bool.isRequired,\n  onAuth: PropTypes.func.isRequired,\n  error: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(Login));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/Login/Login.js"],"names":["actions","Box","Button","FormControl","Grid","IconButton","InputAdornment","InputLabel","OutlinedInput","Paper","TextField","Typography","Link","Redirect","React","useEffect","useMemo","useState","CircularSpinner","PropTypes","Visibility","VisibilityOff","connect","styled","withSnackbar","GridStyled","height","PaperStyled","width","textAlign","padding","TypoStyled","fontSize","marginTop","marginBottom","fontWeight","LinkStyled","theme","color","palette","primary","main","textDecoration","FormFields","email","password","Login","props","enqueueSnackbar","error","Fail","mounted","setTimeout","variant","cleanup","values","setValues","showPassword","formvalues","setFormvalues","formvalidation","setFormvalidation","handleChange","e","form","formerr","target","name","value","handlevalidation","test","loginSubmitHandler","preventDefault","onAuth","handleClickShowPassword","handleMouseDownPassword","event","userId","localStorage","getItem","authRedirect","require","loginLoading","console","log","mapStateToProps","state","auth","mapDispatchToProps","dispatch","err","propTypes","func","isRequired","bool","string"],"mappings":"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","sourcesContent":["import * as actions from '../../store/actions/index';\nimport {\n  Box,\n  Button,\n  FormControl,\n  Grid,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n  Paper,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport { Link, Redirect } from 'react-router-dom';\nimport React, { useEffect,useMemo, useState } from 'react';\nimport CircularSpinner from '../../component/CircularSpinner/index';\nimport PropTypes from 'prop-types';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { connect } from 'react-redux';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\n\nconst GridStyled = styled(Grid)({\n  height: '100%',\n});\n\nconst PaperStyled = styled(Paper)({\n  width: 377,\n  textAlign: 'center',\n  padding: 30,\n});\n\nconst TypoStyled = styled(Typography)(() => ({\n  fontSize: 24,\n  marginTop: 20,\n  marginBottom: 30,\n  fontWeight: 'bold',\n}));\n\nconst LinkStyled = styled(Link)(({ theme }) => ({\n  color: theme.palette.primary.main,\n  textDecoration: 'none',\n}));\n\nconst FormFields = { email: '', password: '' };\nconst Login = (props) => {\n  const { enqueueSnackbar, error , Fail} = props;\n\n  // useEffect(() => {\n  //   error && enqueueSnackbar(error, { variant: 'error' });\n  // }, [error]);\n  useEffect(() => {\n    let mounted = true\n    setTimeout(function(){\n      if(mounted){\n        error && enqueueSnackbar(error, { variant: 'error' })\n      }\n    },0)\n    return function cleanup() {\n        mounted = false\n        Fail(null)\n    }\n  }, [error])\n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n    showPassword: false,\n  });\n\n  const [formvalues, setFormvalues] = useState(FormFields);\n  const [formvalidation, setFormvalidation] = useState(FormFields);\n\n  const handleChange = (e) => {\n    const form = { ...formvalues };\n    const formerr = { ...formvalidation };\n    form[e.target.name] = e.target.value;\n    formerr[e.target.name] = '';\n    setFormvalues(form);\n    setFormvalidation(FormFields);\n  };\n\n  const handlevalidation = () => {\n    let error = false;\n    const formerr = { ...formvalidation };\n    \n    if (!formvalues.email) {\n      error = true;\n      formerr.email = 'Email is required!';\n      setFormvalidation(formerr);\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formvalues.email)) {\n      error = true;\n      formerr.email = 'Invalid email address';\n      setFormvalidation(formerr);\n    }\n\n    if (!formvalues.password) {\n      error = true;\n      formerr.password = 'Password is required!';\n      setFormvalidation(formerr);\n    }\n    return error;\n  };\n  \n  const loginSubmitHandler = (e) => {\n    e.preventDefault();\n    if (handlevalidation()) return false;\n    props.onAuth(formvalues.email, formvalues.password);\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values, showPassword: !values.showPassword });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const userId = localStorage.getItem('token');\n  let authRedirect = null;\n  if (userId) {\n    authRedirect = <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <GridStyled container justify=\"center\" alignItems=\"center\" className=\"loginBg\">\n      {authRedirect}\n      <PaperStyled>\n        <img style={{width: 130}} src={require('../../assets/images/login_logo.png')} />\n        <TypoStyled variant=\"h6\">LOGIN</TypoStyled>\n\n        <form onSubmit={loginSubmitHandler} validate=\"true\">\n          <TextField\n            \n            error={!!formvalidation.email}\n            helperText={formvalidation.email}\n            id=\"email\"\n            label=\"Email\"\n            name=\"email\"\n            variant=\"outlined\"\n            fullWidth\n            onChange={handleChange}\n            value={formvalues.email}\n            margin=\"normal\"\n          />\n          <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n            <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n            <OutlinedInput\n              id=\"outlined-adornment-password\"\n              type={values.showPassword ? 'text' : 'password'}\n              fullWidth\n              error={!!formvalidation.password}\n              label=\"Password\"\n              name=\"password\"\n              variant=\"Outlined\"\n              onChange={handleChange}\n              value={formvalues.password}\n              autoComplete=\"current-password\"\n              helpertext={formvalidation.password}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={handleClickShowPassword}\n                    onMouseDown={handleMouseDownPassword}\n                    edge=\"end\"\n                  >\n                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              }\n              labelWidth={70}\n            />\n          </FormControl>\n          <Box my={4}>\n            <LinkStyled style={{fontSize: 14, fontWeight: '500'}} to=\"/forget-password\">Forgot Password?</LinkStyled>\n          </Box>\n\n          <Box>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">\n              {props.loginLoading && <CircularSpinner />}\n              Login\n            </Button>\n          </Box>\n        </form>\n        <Box  flexDirection=\"row\" mt={4}>\n          <Typography style={{fontSize: 14, fontWeight: '500'}} component=\"span\">Don’t have an account? </Typography>\n          <LinkStyled style={{fontSize: 14, fontWeight: '500'}} to=\"/register\">Create Account</LinkStyled>\n        </Box>\n      </PaperStyled>\n    </GridStyled>\n  );\n};\nconsole.log('err',error)\nconst mapStateToProps = (state) => {\n  return {\n    loginLoading: state.auth.loginLoading,\n    error: state.auth.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth(email, password)),\n    Fail: (err) => dispatch (actions.Fail(err))\n  };\n};\n\nLogin.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loginLoading: PropTypes.bool.isRequired,\n  onAuth: PropTypes.func.isRequired,\n  error: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(Login));\n"]},"metadata":{},"sourceType":"module"}