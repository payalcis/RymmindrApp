{"ast":null,"code":"/* tslint:disable:max-line-length */\nimport { getDataURLContent } from './util'; // KNOWN ISSUE\n// -----------\n// Can not handle redirect-url, such as when access 'http://something.com/avatar.png'\n// will redirect to 'http://something.com/65fc2ffcc8aea7ba65a1d1feda173540'\n\nconst TIMEOUT = 30000;\nexport function getBlobFromURL(url, options) {\n  // cache bypass so we dont have CORS issues with cached images\n  // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n  if (options.cacheBust) {\n    // tslint:disable-next-line\n    url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n  }\n\n  const failed = reason => {\n    let placeholder = '';\n\n    if (options.imagePlaceholder) {\n      const parts = options.imagePlaceholder.split(/,/);\n\n      if (parts && parts[1]) {\n        placeholder = parts[1];\n      }\n    }\n\n    let msg = `Failed to fetch resource: ${url}`;\n\n    if (reason) {\n      msg = typeof reason === 'string' ? reason : reason.message;\n    }\n\n    if (msg) {\n      console.error(msg);\n    }\n\n    return placeholder;\n  };\n\n  const deferred = window.fetch ? window.fetch(url).then(response => response.blob()).then(blob => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onloadend = () => resolve(reader.result);\n\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  })).then(getDataURLContent).catch(() => new Promise((resolve, reject) => reject())) : new Promise((resolve, reject) => {\n    const req = new XMLHttpRequest();\n\n    const timeout = () => {\n      reject(new Error(`Timeout of ${TIMEOUT}ms occured while fetching resource: ${url}`));\n    };\n\n    const done = () => {\n      if (req.readyState !== 4) {\n        return;\n      }\n\n      if (req.status !== 200) {\n        reject(new Error(`Failed to fetch resource: ${url}, status: ${req.status}`));\n        return;\n      }\n\n      const encoder = new FileReader();\n\n      encoder.onloadend = () => {\n        resolve(getDataURLContent(encoder.result));\n      };\n\n      encoder.readAsDataURL(req.response);\n    };\n\n    req.onreadystatechange = done;\n    req.ontimeout = timeout;\n    req.responseType = 'blob';\n    req.timeout = TIMEOUT;\n    req.open('GET', url, true);\n    req.send();\n  });\n  return deferred.catch(failed);\n}","map":{"version":3,"sources":["../src/getBlobFromURL.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* tslint:disable:max-line-length */\nimport { getDataURLContent } from './util';\n// KNOWN ISSUE\n// -----------\n// Can not handle redirect-url, such as when access 'http://something.com/avatar.png'\n// will redirect to 'http://something.com/65fc2ffcc8aea7ba65a1d1feda173540'\nconst TIMEOUT = 30000;\nexport function getBlobFromURL(url, options) {\n    // cache bypass so we dont have CORS issues with cached images\n    // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n    if (options.cacheBust) {\n        // tslint:disable-next-line\n        url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n    }\n    const failed = (reason) => {\n        let placeholder = '';\n        if (options.imagePlaceholder) {\n            const parts = options.imagePlaceholder.split(/,/);\n            if (parts && parts[1]) {\n                placeholder = parts[1];\n            }\n        }\n        let msg = `Failed to fetch resource: ${url}`;\n        if (reason) {\n            msg = typeof reason === 'string' ? reason : reason.message;\n        }\n        if (msg) {\n            console.error(msg);\n        }\n        return placeholder;\n    };\n    const deferred = window.fetch\n        ? window\n            .fetch(url)\n            .then((response) => response.blob())\n            .then((blob) => new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n        }))\n            .then(getDataURLContent)\n            .catch(() => new Promise((resolve, reject) => reject()))\n        : new Promise((resolve, reject) => {\n            const req = new XMLHttpRequest();\n            const timeout = () => {\n                reject(new Error(`Timeout of ${TIMEOUT}ms occured while fetching resource: ${url}`));\n            };\n            const done = () => {\n                if (req.readyState !== 4) {\n                    return;\n                }\n                if (req.status !== 200) {\n                    reject(new Error(`Failed to fetch resource: ${url}, status: ${req.status}`));\n                    return;\n                }\n                const encoder = new FileReader();\n                encoder.onloadend = () => {\n                    resolve(getDataURLContent(encoder.result));\n                };\n                encoder.readAsDataURL(req.response);\n            };\n            req.onreadystatechange = done;\n            req.ontimeout = timeout;\n            req.responseType = 'blob';\n            req.timeout = TIMEOUT;\n            req.open('GET', url, true);\n            req.send();\n        });\n    return deferred.catch(failed);\n}\n//# sourceMappingURL=getBlobFromURL.js.map"]},"metadata":{},"sourceType":"module"}