{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { cloneNode } from './cloneNode';\nimport { embedImages } from './embedImages';\nimport { embedWebFonts } from './embedWebFonts';\nimport { createSvgDataURL } from './createSvgDataURL';\nimport { applyStyleWithOptions } from './applyStyleWithOptions';\nimport { delay, createImage, canvasToBlob, getNodeWidth, getNodeHeight, getPixelRatio } from './util';\n\nfunction getImageSize(domNode, options = {}) {\n  const width = options.width || getNodeWidth(domNode);\n  const height = options.height || getNodeHeight(domNode);\n  return {\n    width,\n    height\n  };\n}\n\nexport function toSvg(domNode, options = {}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      width,\n      height\n    } = getImageSize(domNode, options);\n    return cloneNode(domNode, options.filter, true).then(clonedNode => embedWebFonts(clonedNode, options)).then(clonedNode => embedImages(clonedNode, options)).then(clonedNode => applyStyleWithOptions(clonedNode, options)).then(clonedNode => createSvgDataURL(clonedNode, width, height));\n  });\n}\nexport const toSvgDataURL = toSvg;\nexport function toCanvas(domNode, options = {}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return toSvg(domNode, options).then(createImage).then(delay(100)).then(image => {\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      const ratio = options.pixelRatio || getPixelRatio();\n      const {\n        width,\n        height\n      } = getImageSize(domNode, options);\n      canvas.width = width * ratio;\n      canvas.height = height * ratio;\n      canvas.style.width = `${width}`;\n      canvas.style.height = `${height}`;\n\n      if (options.backgroundColor) {\n        context.fillStyle = options.backgroundColor;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n      }\n\n      context.drawImage(image, 0, 0);\n      return canvas;\n    });\n  });\n}\nexport function toPixelData(domNode, options = {}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      width,\n      height\n    } = getImageSize(domNode, options);\n    return toCanvas(domNode, options).then(canvas => {\n      const ctx = canvas.getContext('2d');\n      return ctx.getImageData(0, 0, width, height).data;\n    });\n  });\n}\nexport function toPng(domNode, options = {}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return toCanvas(domNode, options).then(canvas => canvas.toDataURL());\n  });\n}\nexport function toJpeg(domNode, options = {}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return toCanvas(domNode, options).then(canvas => canvas.toDataURL('image/jpeg', options.quality || 1));\n  });\n}\nexport function toBlob(domNode, options = {}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return toCanvas(domNode, options).then(canvasToBlob);\n  });\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { cloneNode } from './cloneNode';\nimport { embedImages } from './embedImages';\nimport { embedWebFonts } from './embedWebFonts';\nimport { createSvgDataURL } from './createSvgDataURL';\nimport { applyStyleWithOptions } from './applyStyleWithOptions';\nimport { delay, createImage, canvasToBlob, getNodeWidth, getNodeHeight, getPixelRatio, } from './util';\nfunction getImageSize(domNode, options = {}) {\n    const width = options.width || getNodeWidth(domNode);\n    const height = options.height || getNodeHeight(domNode);\n    return { width, height };\n}\nexport function toSvg(domNode, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { width, height } = getImageSize(domNode, options);\n        return cloneNode(domNode, options.filter, true)\n            .then((clonedNode) => embedWebFonts(clonedNode, options))\n            .then((clonedNode) => embedImages(clonedNode, options))\n            .then((clonedNode) => applyStyleWithOptions(clonedNode, options))\n            .then((clonedNode) => createSvgDataURL(clonedNode, width, height));\n    });\n}\nexport const toSvgDataURL = toSvg;\nexport function toCanvas(domNode, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return toSvg(domNode, options)\n            .then(createImage)\n            .then(delay(100))\n            .then((image) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            const ratio = options.pixelRatio || getPixelRatio();\n            const { width, height } = getImageSize(domNode, options);\n            canvas.width = width * ratio;\n            canvas.height = height * ratio;\n            canvas.style.width = `${width}`;\n            canvas.style.height = `${height}`;\n            if (options.backgroundColor) {\n                context.fillStyle = options.backgroundColor;\n                context.fillRect(0, 0, canvas.width, canvas.height);\n            }\n            context.drawImage(image, 0, 0);\n            return canvas;\n        });\n    });\n}\nexport function toPixelData(domNode, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { width, height } = getImageSize(domNode, options);\n        return toCanvas(domNode, options).then((canvas) => {\n            const ctx = canvas.getContext('2d');\n            return ctx.getImageData(0, 0, width, height).data;\n        });\n    });\n}\nexport function toPng(domNode, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return toCanvas(domNode, options).then((canvas) => canvas.toDataURL());\n    });\n}\nexport function toJpeg(domNode, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return toCanvas(domNode, options).then((canvas) => canvas.toDataURL('image/jpeg', options.quality || 1));\n    });\n}\nexport function toBlob(domNode, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return toCanvas(domNode, options).then(canvasToBlob);\n    });\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}