{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/AccountSettings/DeleteAccount.js\";\nimport { Button, Typography, TextField, Grid } from '@material-ui/core';\nimport React, { useMemo, useState } from 'react';\nimport CircularSpinner from '../../component/CircularSpinner';\nimport { Delete } from '@material-ui/icons';\nimport DeleteUserModal from './deletUserModal';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteUserAccount } from '../../store/actions/accountsettingAction';\nimport { styled } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport { withSnackbar } from 'notistack';\nconst TypoStyled = styled(Typography)(({\n  theme\n}) => ({\n  fontSize: 17,\n  color: theme.palette.text.primary,\n  fontWeight: '600',\n  paddingTop: 20\n}));\nconst TypoSubStyled = styled(TypoStyled)(({\n  theme\n}) => ({\n  fontSize: 16,\n  fontWeight: '500',\n  marginBottom: 30\n}));\nconst TypoVerifiStyled = styled(TypoStyled)(({\n  theme\n}) => ({\n  fontSize: 16,\n  fontWeight: '500',\n  marginTop: 20\n}));\nconst ButtonDanger = styled(Button)(({\n  theme\n}) => ({\n  background: '#FD7F7F',\n  color: theme.palette.warning.contrastText,\n  marginBottom: 50\n}));\nconst ButtonStyled = styled(Button)(({\n  theme\n}) => ({\n  width: 170\n}));\n\nconst DeleteAccount = props => {\n  const {\n    deleteUserAccount,\n    enqueueSnackbar,\n    error,\n    loading,\n    success_message\n  } = props;\n  const history = useHistory();\n  const {\n    user_id,\n    email\n  } = JSON.parse(localStorage.getItem('userData'));\n  const [open, setOpen] = useState(false);\n  const [accountDeletedMailSent, setAccountDeletedMailSent] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const deletUseraccount = async () => {\n    setOpen(false); //const delAcc = { user_id, email: sessionStorage.getItem('email') }\n\n    const delAcc = {\n      user_id,\n      email\n    };\n    const deleted = await deleteUserAccount(delAcc);\n    if (deleted.status === true) setAccountDeletedMailSent(true);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  useMemo(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]);\n  useMemo(() => {\n    success_message && enqueueSnackbar(success_message, {\n      variant: 'success'\n    });\n  }, [success_message]); // Message to be shown when account delete mail has been sent!\n\n  let deletedMailSentInfo = null;\n\n  if (accountDeletedMailSent) {\n    deletedMailSentInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TypoStyled, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Didn't receive the email?\"), /*#__PURE__*/React.createElement(TypoSubStyled, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"-Check your Spam or Junk folder just in case. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 57\n      }\n    }), \"-It can take up to 10 mins during busy periods.  Maybe worth waiting.\"), /*#__PURE__*/React.createElement(TypoStyled, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"Need help?  Email us on support@rymindr.com \"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: 25,\n      paddingRight: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DeleteUserModal, {\n    open: open,\n    handleClose: handleClose,\n    deletUseraccount: deletUseraccount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TypoStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"Delete my Rymindr account\"), /*#__PURE__*/React.createElement(TypoSubStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"1. We'll keep your Rymindrs and connection live for 30 days, just in case. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 84\n    }\n  }), \"2. After 30 days all Rymindrs, connections, messages, comments and posts will be removed and irrecoverable.\"), /*#__PURE__*/React.createElement(ButtonDanger, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleOpen,\n    startIcon: /*#__PURE__*/React.createElement(Delete, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 89\n      }\n    }),\n    disabled: loading || deletedMailSentInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, loading && /*#__PURE__*/React.createElement(CircularSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }), \"Delete Account\"), deletedMailSentInfo);\n};\n\nconst mapStateToProps = ({\n  account\n}) => {\n  return {\n    loading: account.loading,\n    error: account.error,\n    success_message: account.success_message\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteUserAccount: (data, history) => dispatch(deleteUserAccount(data, history))\n  };\n};\n\nDeleteAccount.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  deleteUserAccount: PropTypes.func.isRequired,\n  success_message: PropTypes.any.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(DeleteAccount));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/AccountSettings/DeleteAccount.js"],"names":["Button","Typography","TextField","Grid","React","useMemo","useState","CircularSpinner","Delete","DeleteUserModal","PropTypes","connect","deleteUserAccount","styled","useHistory","withSnackbar","TypoStyled","theme","fontSize","color","palette","text","primary","fontWeight","paddingTop","TypoSubStyled","marginBottom","TypoVerifiStyled","marginTop","ButtonDanger","background","warning","contrastText","ButtonStyled","width","DeleteAccount","props","enqueueSnackbar","error","loading","success_message","history","user_id","email","JSON","parse","localStorage","getItem","open","setOpen","accountDeletedMailSent","setAccountDeletedMailSent","handleClose","deletUseraccount","delAcc","deleted","status","handleOpen","variant","deletedMailSentInfo","paddingLeft","paddingRight","mapStateToProps","account","mapDispatchToProps","dispatch","data","propTypes","func","isRequired","bool","string","any"],"mappings":"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","sourcesContent":["import { Button, Typography, TextField, Grid } from '@material-ui/core'\nimport React, { useMemo, useState } from 'react'\nimport CircularSpinner from '../../component/CircularSpinner'\nimport { Delete } from '@material-ui/icons'\nimport DeleteUserModal from './deletUserModal'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { deleteUserAccount } from '../../store/actions/accountsettingAction'\nimport { styled } from '@material-ui/core/styles'\nimport { useHistory } from 'react-router-dom'\nimport { withSnackbar } from 'notistack'\n\nconst TypoStyled = styled(Typography)(({ theme }) => ({\n  fontSize: 17,\n  color: theme.palette.text.primary,\n  fontWeight: '600',\n  paddingTop: 20\n}))\n\nconst TypoSubStyled = styled(TypoStyled)(({ theme }) => ({\n  fontSize: 16,\n  fontWeight: '500',\n  marginBottom: 30\n}))\n\nconst TypoVerifiStyled = styled(TypoStyled)(({ theme }) => ({\n  fontSize: 16,\n  fontWeight: '500',\n  marginTop: 20\n}))\n\nconst ButtonDanger = styled(Button)(({ theme }) => ({\n  background: '#FD7F7F',\n  color: theme.palette.warning.contrastText,\n  marginBottom: 50\n}))\n\nconst ButtonStyled = styled(Button)(({ theme }) => ({\n  width: 170\n}))\n\nconst DeleteAccount = (props) => {\n  const { deleteUserAccount, enqueueSnackbar, error, loading, success_message } = props\n  const history = useHistory()\n  const { user_id, email } = JSON.parse(localStorage.getItem('userData'))\n  const [open, setOpen] = useState(false)\n  const [accountDeletedMailSent, setAccountDeletedMailSent] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const deletUseraccount = async () => {\n    setOpen(false)\n    //const delAcc = { user_id, email: sessionStorage.getItem('email') }\n    const delAcc = { user_id, email }\n    const deleted = await deleteUserAccount(delAcc);\n\n    if(deleted.status === true )\n      setAccountDeletedMailSent(true);\n  }\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n  useMemo(() => {\n    error && enqueueSnackbar(error, { variant: 'error' })\n  }, [error])\n\n  useMemo(() => {\n    success_message && enqueueSnackbar(success_message, { variant: 'success' });\n  }, [success_message]);\n\n  // Message to be shown when account delete mail has been sent!\n  let deletedMailSentInfo = null;\n  if(accountDeletedMailSent) {\n    deletedMailSentInfo = (\n      <>\n        <TypoStyled>Didn't receive the email?</TypoStyled>\n        <TypoSubStyled>\n          -Check your Spam or Junk folder just in case. <br />\n          -It can take up to 10 mins during busy periods.  Maybe worth waiting.\n        </TypoSubStyled>\n        <TypoStyled>Need help?  Email us on support@rymindr.com </TypoStyled>\n      </>\n    );\n  }\n\n  return (\n    <div style={{ paddingLeft: 25, paddingRight: 25 }}>\n      <DeleteUserModal open={open} handleClose={handleClose} deletUseraccount={deletUseraccount} />\n      <TypoStyled>Delete my Rymindr account</TypoStyled>\n      <TypoSubStyled>\n        1. We'll keep your Rymindrs and connection live for 30 days, just in case. <br />\n        2. After 30 days all Rymindrs, connections, messages, comments and posts will be removed and irrecoverable.\n      </TypoSubStyled>\n\n      <ButtonDanger variant='contained' color='primary' onClick={handleOpen} startIcon={<Delete />} disabled={loading || deletedMailSentInfo}>\n        {loading && <CircularSpinner />}\n        Delete Account\n      </ButtonDanger>\n      {deletedMailSentInfo}\n    </div>\n  )\n}\n\nconst mapStateToProps = ({ account }) => {\n  return {\n    loading: account.loading,\n    error: account.error,\n    success_message: account.success_message,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteUserAccount: (data, history) => dispatch(deleteUserAccount(data, history))\n  }\n}\n\nDeleteAccount.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  deleteUserAccount: PropTypes.func.isRequired,\n  success_message: PropTypes.any.isRequired,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(DeleteAccount))\n"]},"metadata":{},"sourceType":"module"}