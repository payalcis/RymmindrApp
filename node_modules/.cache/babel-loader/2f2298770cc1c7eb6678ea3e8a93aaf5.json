{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.CONTACT_ERROR,\n    error: error\n  };\n};\nexport const SuccessMessage = message => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE,\n    success_message: message\n  };\n};\nexport const getContactlist = data => {\n  let datatogroup = {\n    user_id: data.user_id\n  };\n  return async dispatch => {\n    try {\n      dispatch(SuccessMessage(null));\n      dispatch(isLoading());\n      const contactlist = await Axios().post('users/businessUserListrequest', data);\n      const grouplist = await Axios().post('users/getGroupList', datatogroup);\n      let mergedlist = [];\n      let GroupList = [];\n      let ContactList = [];\n\n      if (contactlist.data.data.length > 0 || grouplist.data.data.length > 0) {\n        if (grouplist.data.data.length > 0) {\n          GroupList = grouplist.data.data;\n          GroupList.map(item => {\n            data = {\n              id: item.group_id,\n              imageicon: item.group_icon,\n              type: 'groups',\n              name: item.group_name\n            };\n            mergedlist.push(data);\n          });\n        }\n\n        if (contactlist.data.data.length > 0) {\n          ContactList = contactlist.data.data;\n          ContactList.map(item => {\n            //if(item.accept_status==1){\n            data = {\n              id: item.user_id,\n              imageicon: item.profile_image,\n              type: 'contact',\n              name: item.first_name + ' ' + item.last_name,\n              mobile_no: item.mobile_no\n            };\n            mergedlist.push(data); //}\n          });\n        }\n\n        let newData = contactlist.data.data.filter(a => a.accept_status == 1);\n        dispatch(Success({\n          type: actionTypes.GETCONTACTLIST,\n          payload: {\n            mergedlist,\n            GroupList,\n            ContactList: ContactList\n          }\n        }));\n      } else {\n        dispatch(Success({\n          type: actionTypes.GETCONTACTLIST,\n          payload: {\n            mergedlist,\n            GroupList,\n            ContactList\n          }\n        }));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n}; // Get group list.\n\nexport const getGroupList = data => {\n  return async dispatch => {\n    try {\n      dispatch(SuccessMessage(null));\n      dispatch(isLoading());\n      const grouplist = await Axios().post('users/getGroupList', data);\n      let mergedlist = [];\n      let GroupList = [];\n\n      if (grouplist.data.data.length > 0) {\n        if (grouplist.data.data.length > 0) {\n          GroupList = grouplist.data.data;\n          GroupList.map(item => {\n            data = {\n              id: item.group_id,\n              imageicon: item.group_icon,\n              type: 'groups',\n              name: item.group_name\n            };\n            mergedlist.push(data);\n          });\n        }\n\n        dispatch(Success({\n          type: actionTypes.GETGROUPLIST,\n          payload: {\n            mergedlist,\n            GroupList\n          }\n        }));\n      } else {\n        dispatch(Success({\n          type: actionTypes.GETGROUPLIST,\n          payload: {\n            mergedlist,\n            GroupList\n          }\n        }));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const inviteGroup = ({\n  request_id,\n  status,\n  user_id,\n  business_code\n}) => {\n  const data = {\n    request_id,\n    status\n  };\n  const dataToSend = {\n    user_id,\n    business_code\n  };\n  return async dispatch => {\n    try {\n      console.log('accept Success');\n      const response = await Axios().post('user/invite-group-action', data);\n      console.log('response--', response);\n\n      if (response.data.status === '1') {\n        dispatch(getContactlist(dataToSend));\n      } else {\n        dispatch(Fail(response.data.message));\n        console.log('invite api error');\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getGroupMemberList = data => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/getGroupDetail', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.CONTACT_GROUP_MEMBER_LIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const groupDelete = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/deleteGroup', data);\n\n      if (response.data.status === '1') {\n        dispatch(getContactlist(dataTosend));\n        dispatch(Success({\n          type: actionTypes.GROUPDELETE,\n          payload: response.data.message\n        }));\n        dispatch(SuccessMessage('Group has been deleted successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const contactDelete = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/removebusinessuser', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.CONTACTDELETE,\n          payload: response.data.message\n        }));\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage('Contact has been deleted successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const getAllUser = data => {\n  return async dispatch => {\n    dispatch(Success({\n      type: actionTypes.ISLOADING\n    }));\n\n    try {\n      // dispatch(\n      //   Success({\n      //     type: actionTypes.GET_SEARCHED_USERS,\n      //     payload: []\n      //   })\n      // );\n      // dispatch(isLoading());\n      const searchedlist = await Axios().post('users/searchDesktopUser', data);\n\n      if (searchedlist.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GET_SEARCHED_USERS,\n          payload: searchedlist.data.data\n        }));\n      } else {\n        console.log('GET_SEARCHED_USERSGET_SEARCHED_USERSGET_SEARCHED_USERS');\n        dispatch(Success({\n          type: actionTypes.GET_SEARCHED_USERS,\n          payload: null\n        }));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const addNewGroup = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/addNewGroup', data);\n\n      if (response.status == 200) {\n        dispatch(getContactlist(dataTosend));\n        dispatch(Success({\n          type: actionTypes.ADDNEWGROUP,\n          payload: response.data.message\n        }));\n        dispatch(SuccessMessage('Group has been added sucessfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const addContact = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const addcontact = await Axios().post('users/sendBusinessRequestToUser', data);\n\n      if (addcontact.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.ADD_CONTACT,\n          payload: addcontact.data.data\n        }));\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage('Contact added successfully.'));\n      } else {\n        dispatch(Fail(addcontact.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const updateGroup = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/updateGroup', data);\n\n      if (response.status == 200) {\n        dispatch(Success({\n          type: actionTypes.ADDNEWGROUP,\n          payload: response.data.message\n        }));\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage('Group has been updated successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const getRyminderList = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().get('rymindr/getRymindrsTermsHolidays', {\n        params: data\n      });\n      let payload;\n\n      if (response.data.status === 1) {\n        payload = response.data.data;\n      } else {\n        payload = response.data;\n      }\n\n      dispatch(Success({\n        type: actionTypes.RYMINDR_LIST,\n        payload: payload\n      }));\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n}; //add contact to Rymindr\n\nexport const addToRymindr = (data, dataTosend) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('rymindr/updateContactToRymindrTermHoliday', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.ADDCONTACTTORYMINDR,\n          payload: response.data.data\n        }));\n        dispatch(SuccessMessage(response.data.message));\n        dispatch(getRyminderList(dataTosend));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n}; //add contact to Event.\n\nexport const addToEvent = data => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/updateEventUser', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.ADDCONTACTTOEVENT,\n          payload: response.data.data\n        }));\n        dispatch(SuccessMessage('Contact added to Event successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const InviteUser = data => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/invite_user', data);\n\n      if (response.data.status === '1') {\n        dispatch(SuccessMessage(response.data.message));\n      } else {}\n    } catch (error) {\n      console.log(error);\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const InviteUserInBulk = data => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('user/bulkInvite', data);\n      console.log('response==============', response);\n\n      if (response.data.status == '1') {\n        dispatch(SuccessMessage(response.data.message));\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n}; // Cancel Invitition Request\n\nexport const CancelInvititionRequest = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('users/cancel_invitation_request', data);\n\n      if (response.data.status === '1') {\n        const dataTosend = {\n          user_id: data.user_id,\n          business_code: data.business_code\n        };\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n}; // Check if group exists in active rymindrs.\n\nexport const checkGroupExistInActiveRymindrs = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios.post('rymindr/checkGroupExistInActiveRymindr', data);\n      dispatch(SuccessMessage(null));\n      return response.data.status;\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/contactActions.js"],"names":["actionTypes","Axios","isLoading","type","ISLOADING","Success","response","Fail","error","CONTACT_ERROR","SuccessMessage","message","SUCCESS_MESSAGE","success_message","getContactlist","data","datatogroup","user_id","dispatch","contactlist","post","grouplist","mergedlist","GroupList","ContactList","length","map","item","id","group_id","imageicon","group_icon","name","group_name","push","profile_image","first_name","last_name","mobile_no","newData","filter","a","accept_status","GETCONTACTLIST","payload","getGroupList","GETGROUPLIST","inviteGroup","request_id","status","business_code","dataToSend","console","log","getGroupMemberList","CONTACT_GROUP_MEMBER_LIST","groupDelete","dataTosend","GROUPDELETE","contactDelete","CONTACTDELETE","getAllUser","searchedlist","GET_SEARCHED_USERS","addNewGroup","ADDNEWGROUP","addContact","addcontact","ADD_CONTACT","updateGroup","getRyminderList","get","params","RYMINDR_LIST","addToRymindr","ADDCONTACTTORYMINDR","addToEvent","ADDCONTACTTOEVENT","InviteUser","InviteUserInBulk","CancelInvititionRequest","checkGroupExistInActiveRymindrs"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\n\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ISLOADING,\n  };\n};\n\nexport const Success = (response) => {\n  return response;\n};\n\nexport const Fail = (error) => {\n  return {\n    type: actionTypes.CONTACT_ERROR,\n    error: error,\n  };\n};\n\nexport const SuccessMessage = (message) => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE,\n    success_message: message,\n  };\n};\nexport const getContactlist = (data) => {\n\n  let datatogroup = {\n    user_id: data.user_id\n  };\n  return async (dispatch) => {\n    try {\n      dispatch(SuccessMessage(null));\n      dispatch(isLoading());\n      const contactlist = await Axios().post('users/businessUserListrequest', data);\n      const grouplist = await Axios().post('users/getGroupList', datatogroup);\n      let mergedlist = [];\n      let GroupList = [];\n      let ContactList = [];\n      if (contactlist.data.data.length > 0 || grouplist.data.data.length > 0) {\n        if (grouplist.data.data.length > 0) {\n          GroupList = grouplist.data.data;\n          GroupList.map((item) => {\n            data = {\n              id: item.group_id,\n              imageicon: item.group_icon,\n              type: 'groups',\n              name: item.group_name,\n            };\n            mergedlist.push(data);\n          });\n        }\n\n        if (contactlist.data.data.length > 0) {\n          ContactList = contactlist.data.data;\n          ContactList.map((item) => {\n\n            //if(item.accept_status==1){\n              data = {\n                id: item.user_id,\n                imageicon: item.profile_image,\n                type: 'contact',\n                name: item.first_name + ' ' + item.last_name,\n                mobile_no: item.mobile_no\n              };\n              mergedlist.push(data);\n            //}\n          });\n        }\n\n        let newData = contactlist.data.data.filter(a=>a.accept_status==1);\n        dispatch(\n          Success({\n            type: actionTypes.GETCONTACTLIST,\n            payload: { mergedlist, GroupList, ContactList:ContactList }\n          })\n        );\n      } else {\n        dispatch(\n          Success({\n            type: actionTypes.GETCONTACTLIST,\n            payload: { mergedlist, GroupList, ContactList }\n          })\n        );\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\n// Get group list.\nexport const getGroupList = (data) => {\n\n  return async (dispatch) => {\n    try {\n      dispatch(SuccessMessage(null));\n      dispatch(isLoading());\n      const grouplist = await Axios().post('users/getGroupList', data);\n      let mergedlist = [];\n      let GroupList = [];\n\n      if (grouplist.data.data.length > 0) {\n        if (grouplist.data.data.length > 0) {\n          GroupList = grouplist.data.data;\n          GroupList.map((item) => {\n            data = {\n              id: item.group_id,\n              imageicon: item.group_icon,\n              type: 'groups',\n              name: item.group_name,\n            };\n            mergedlist.push(data);\n          });\n        }\n\n        dispatch(\n          Success({\n            type: actionTypes.GETGROUPLIST,\n            payload: { mergedlist, GroupList }\n          })\n        );\n      } else {\n        dispatch(\n          Success({\n            type: actionTypes.GETGROUPLIST,\n            payload: { mergedlist, GroupList }\n          })\n        );\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const inviteGroup =({request_id,status,user_id ,business_code}) =>{\n  const data= {\n    request_id,\n    status\n  }\n  const dataToSend= {\n    user_id ,\n    business_code\n  }\n  return async (dispatch)=>{\n    try {\n      console.log('accept Success')\n      const response= await Axios().post('user/invite-group-action',data)\n      console.log('response--',response)\n      if (response.data.status==='1'){\n        dispatch(\n          getContactlist(dataToSend)\n        )\n      }\n      else{\n        dispatch(Fail(response.data.message));\n        console.log('invite api error')\n      }\n    }\n    catch(error){\n      dispatch(Fail(error.message));\n    }\n  }\n}\n\n\nexport const getGroupMemberList = (data) => {\n  return async (dispatch) => {\n    try {\n      const response = await Axios().post('users/getGroupDetail', data);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.CONTACT_GROUP_MEMBER_LIST,\n            payload: response.data.data,\n          })\n        );\n      }\n      else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const groupDelete = (data, dataTosend) => {\n  return async (dispatch) => {\n    try {\n      const response = await Axios().post('users/deleteGroup', data);\n      if (response.data.status === '1') {\n        dispatch(getContactlist(dataTosend));\n        dispatch(\n          Success({\n            type: actionTypes.GROUPDELETE,\n            payload: response.data.message,\n          })\n        );\n        dispatch(SuccessMessage('Group has been deleted successfully.'));\n      }\n      else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n\n    }\n  };\n};\nexport const contactDelete = (data, dataTosend) => {\n  return async (dispatch) => {\n    try {\n      const response = await Axios().post('users/removebusinessuser', data);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.CONTACTDELETE,\n            payload: response.data.message,\n          })\n        );\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage('Contact has been deleted successfully.'));\n      }\n      else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n\n    }\n  };\n};\nexport const getAllUser = (data) => {\n  return async (dispatch) => {\n    dispatch(\n      Success({\n        type: actionTypes.ISLOADING\n      })\n    );\n    try {\n      // dispatch(\n      //   Success({\n      //     type: actionTypes.GET_SEARCHED_USERS,\n      //     payload: []\n      //   })\n      // );\n      // dispatch(isLoading());\n      const searchedlist = await Axios().post('users/searchDesktopUser', data);\n\n      if (searchedlist.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.GET_SEARCHED_USERS,\n            payload: searchedlist.data.data\n          })\n        );\n      } else {\n\n        console.log('GET_SEARCHED_USERSGET_SEARCHED_USERSGET_SEARCHED_USERS');\n        dispatch(\n          Success({\n            type: actionTypes.GET_SEARCHED_USERS,\n            payload: null\n          })\n        );\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n}\nexport const addNewGroup = (data, dataTosend) => {\n  return async (dispatch) => {\n    try {\n\n      const response = await Axios().post('users/addNewGroup', data);\n\n      if (response.status == 200) {\n        dispatch(getContactlist(dataTosend));\n\n        dispatch(\n          Success({\n            type: actionTypes.ADDNEWGROUP,\n            payload: response.data.message,\n          })\n\n        );\n        dispatch(SuccessMessage('Group has been added sucessfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n\n    }\n  };\n};\nexport const addContact = (data, dataTosend) => {\n  return async (dispatch) => {\n    try {\n      const addcontact = await Axios().post('users/sendBusinessRequestToUser', data);\n      if (addcontact.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.ADD_CONTACT,\n            payload: addcontact.data.data\n          })\n        );\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage('Contact added successfully.'));\n      } else {\n        dispatch(Fail(addcontact.data.message));\n      }\n    }\n    catch (error) {\n      dispatch(Fail(error.message));\n    }\n    finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n\n    }\n  };\n};\nexport const updateGroup = (data, dataTosend) => {\n  \n  return async (dispatch) => {\n    try {\n      const response = await Axios().post('users/updateGroup', data);\n      if (response.status == 200) {\n        dispatch(\n          Success({\n            type: actionTypes.ADDNEWGROUP,\n            payload: response.data.message,\n          })\n        );\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage('Group has been updated successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n\n      dispatch(Fail(error.message));\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n\n    }\n  };\n}\nexport const getRyminderList = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().get('rymindr/getRymindrsTermsHolidays', { params: data });\n      let payload;\n      if (response.data.status === 1) {\n        payload = response.data.data;\n      }\n      else {\n        payload = response.data;\n      }\n      dispatch(\n        Success({\n          type: actionTypes.RYMINDR_LIST,\n          payload: payload,\n        })\n      );\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\n//add contact to Rymindr\nexport const addToRymindr = (data, dataTosend) => {\n  return async (dispatch) => {\n    try {\n      const response = await Axios().post('rymindr/updateContactToRymindrTermHoliday', data);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.ADDCONTACTTORYMINDR,\n            payload: response.data.data,\n          })\n        );\n        dispatch(SuccessMessage(response.data.message));\n        dispatch(getRyminderList(dataTosend));\n      }\n      else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n\n    }\n  };\n};\n\n//add contact to Event.\nexport const addToEvent = (data) => {\n  return async (dispatch) => {\n    try {\n      const response = await Axios().post('users/updateEventUser', data);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.ADDCONTACTTOEVENT,\n            payload: response.data.data,\n          })\n        );\n        dispatch(SuccessMessage('Contact added to Event successfully.'));\n      }\n      else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n\n    }\n  };\n};\n\nexport const InviteUser = (data) => {\n  return async (dispatch) => {\n    try {\n      const response = await Axios().post('users/invite_user', data);\n      if (response.data.status === '1') {\n        dispatch(SuccessMessage(response.data.message));\n      }\n      else {\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n\n    }\n  };\n};\n\nexport const InviteUserInBulk = (data) => {\n  return async (dispatch) => {\n    try {\n      const response = await Axios().post('user/bulkInvite', data);\n      console.log('response==============',response);\n      if (response.data.status == '1') {\n        dispatch(SuccessMessage(response.data.message));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\n\n// Cancel Invitition Request\nexport const CancelInvititionRequest = (data) => {\n\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('users/cancel_invitation_request', data);\n      if (response.data.status === '1') {\n\n        const dataTosend = {\n          user_id: data.user_id,\n          business_code: data.business_code,\n        };\n\n        dispatch(getContactlist(dataTosend));\n        dispatch(SuccessMessage(response.data.message));\n      }\n      else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n\n    }\n  };\n};\n\n// Check if group exists in active rymindrs.\nexport const checkGroupExistInActiveRymindrs = (data) => {\n\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios.post('rymindr/checkGroupExistInActiveRymindr', data);\n      dispatch(SuccessMessage(null));\n      return response.data.status;\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}