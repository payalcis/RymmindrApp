{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios';\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.ERROR,\n    error: error\n  };\n};\nexport const getUserAndGroupList = data => {\n  return async dispatch => {\n    dispatch(isLoading());\n    await Axios().post('livechat/getuserandgrouplist', data).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GET_USER_AND_GROUP_LIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const createGroup = data => {\n  const formData = new FormData();\n  formData.append(\"userId\", data.userId);\n  formData.append(\"groupIcon\", data.groupIcon);\n  formData.append(\"groupName\", data.groupName);\n  formData.append(\"users\", data.users);\n  return async dispatch => {\n    dispatch(isLoading());\n    await Axios()({\n      method: 'post',\n      url: 'livechat/creategroup',\n      data: formData,\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.CREATE_GROUP,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const initChat = data => {\n  return async dispatch => {\n    dispatch(isLoading());\n    await Axios().post('livechat/initchat', data).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.INIT_CHAT,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/LiveChatActions.js"],"names":["actionTypes","Axios","axios","isLoading","type","ISLOADING","Success","response","Fail","error","ERROR","getUserAndGroupList","data","dispatch","post","then","status","GET_USER_AND_GROUP_LIST","payload","message","catch","err","createGroup","formData","FormData","append","userId","groupIcon","groupName","users","method","url","headers","CREATE_GROUP","initChat","INIT_CHAT"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios';\n\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ISLOADING,\n  };\n};\n\nexport const Success = (response) => {\n  return response;\n};\n\nexport const Fail = (error) => {\n  return {\n    type: actionTypes.ERROR,\n    error: error,\n  };\n};\n\nexport const getUserAndGroupList = (data) => {\n    return async (dispatch) => {\n        dispatch(isLoading());\n\n        await Axios().post('livechat/getuserandgrouplist', data)\n            .then((response) => {\n                if (response.data.status === '1') {\n                    dispatch(\n                        Success({\n                            type: actionTypes.GET_USER_AND_GROUP_LIST,\n                            payload: response.data.data\n                        })\n                    );\n                }\n                else\n                {\n                    dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n            dispatch(Fail(err.message));\n        });\n    };\n};\n\nexport const createGroup = (data) => {\n    const formData = new FormData();\n    formData.append(\"userId\", data.userId);\n    formData.append(\"groupIcon\", data.groupIcon);\n    formData.append(\"groupName\", data.groupName);\n    formData.append(\"users\", data.users);\n\n    return async (dispatch) => {\n        dispatch(isLoading());\n\n        await Axios()({\n            method: 'post',\n            url: 'livechat/creategroup',\n            data: formData,\n            headers: {'Content-Type': 'multipart/form-data'}\n        })\n        .then((response) => {\n            if (response.data.status === '1') {\n                dispatch(\n                    Success({\n                        type: actionTypes.CREATE_GROUP,\n                        payload: response.data.data\n                    })\n                );\n            }\n            else\n            {\n                dispatch(Fail(response.data.message));\n            }\n        })\n        .catch((err) => {\n            dispatch(Fail(err.message));\n        });\n    };\n};\n\nexport const initChat = (data) => {\n    return async (dispatch) => {\n        dispatch(isLoading());\n\n        await Axios().post('livechat/initchat', data)\n            .then((response) => {\n                if (response.data.status === '1') {\n                    dispatch(\n                        Success({\n                            type: actionTypes.INIT_CHAT,\n                            payload: response.data.data\n                        })\n                    );\n                }\n                else\n                {\n                    dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n            dispatch(Fail(err.message));\n        });\n    };\n};\n\n"]},"metadata":{},"sourceType":"module"}