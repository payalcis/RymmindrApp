{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/MailSent/MailSent.js\";\nimport { Box, Button, FormControl, Grid, IconButton, InputAdornment, InputLabel, OutlinedInput, Paper, TextField, Typography, Container } from '@material-ui/core';\nimport { Link, Redirect, useParams, useHistory } from 'react-router-dom';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport CircularSpinner from '../../component/CircularSpinner/index';\nimport PropTypes from 'prop-types';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { connect } from 'react-redux';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\nimport { email_verify } from '../../store/actions/auth';\nconst GridStyled = styled(Grid)({\n  height: '100vh'\n});\nconst ContainerStyled = styled(Container)({\n  // width: 377,\n  textAlign: 'center',\n  padding: 30\n});\nconst TypoStyled = styled(Typography)(() => ({\n  fontSize: 32,\n  marginTop: 15,\n  marginBottom: 0,\n  fontWeight: '300'\n}));\nconst LinkStyled = styled(Link)(({\n  theme\n}) => ({\n  color: theme.palette.primary.main,\n  textDecoration: 'none'\n}));\nconst FormFields = {\n  email: '',\n  password: ''\n};\n\nconst MailSent = props => {\n  console.log(\"Rtessssss\", props);\n  const {\n    enqueueSnackbar,\n    error\n  } = props;\n  const {\n    getemail,\n    getotp,\n    isRegister\n  } = useParams();\n  useEffect(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]);\n  useMemo(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]);\n  const [values, setValues] = useState({\n    email: '',\n    password: '',\n    showPassword: false\n  });\n  const [formvalues, setFormvalues] = useState(FormFields);\n  const [formvalidation, setFormvalidation] = useState(FormFields);\n  const history = useHistory();\n  const userId = localStorage.getItem('token');\n  let authRedirect = null;\n\n  if (userId) {\n    authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 22\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(GridStyled, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: \"loginBg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ContainerStyled, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 10\n    }\n  }, authRedirect, isRegister == 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('../../assets/images/sent.svg'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 26\n    }\n  })), /*#__PURE__*/React.createElement(TypoStyled, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"Verification Mail has been sent to your mail\"), /*#__PURE__*/React.createElement(TypoStyled, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, \"Please check \", getemail)) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('../../assets/images/sent.svg'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 24\n    }\n  })), /*#__PURE__*/React.createElement(TypoStyled, {\n    style: {\n      marginTop: 47\n    },\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, \"We have sent and reset password link to your email\"), /*#__PURE__*/React.createElement(TypoStyled, {\n    style: {\n      color: '#17BAFF'\n    },\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }\n  }, \"Please check \", getemail))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, history) => dispatch(email_verify(email, history))\n  };\n};\n\nMailSent.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  onAuth: PropTypes.func.isRequired,\n  error: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(MailSent));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/MailSent/MailSent.js"],"names":["Box","Button","FormControl","Grid","IconButton","InputAdornment","InputLabel","OutlinedInput","Paper","TextField","Typography","Container","Link","Redirect","useParams","useHistory","React","useEffect","useMemo","useState","CircularSpinner","PropTypes","Visibility","VisibilityOff","connect","styled","withSnackbar","email_verify","GridStyled","height","ContainerStyled","textAlign","padding","TypoStyled","fontSize","marginTop","marginBottom","fontWeight","LinkStyled","theme","color","palette","primary","main","textDecoration","FormFields","email","password","MailSent","props","console","log","enqueueSnackbar","error","getemail","getotp","isRegister","variant","values","setValues","showPassword","formvalues","setFormvalues","formvalidation","setFormvalidation","history","userId","localStorage","getItem","authRedirect","require","mapStateToProps","state","loading","auth","mapDispatchToProps","dispatch","onAuth","propTypes","func","isRequired","bool","string"],"mappings":"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","sourcesContent":["import {\n    Box,\n    Button,\n    FormControl,\n    Grid,\n    IconButton,\n    InputAdornment,\n    InputLabel,\n    OutlinedInput,\n    Paper,\n    TextField,\n    Typography,\n    Container\n  } from '@material-ui/core';\n  import { Link, Redirect,useParams ,useHistory} from 'react-router-dom';\n  import React, { useEffect,useMemo, useState } from 'react';\n  import CircularSpinner from '../../component/CircularSpinner/index';\n  import PropTypes from 'prop-types';\n  import Visibility from '@material-ui/icons/Visibility';\n  import VisibilityOff from '@material-ui/icons/VisibilityOff';\n  import { connect } from 'react-redux';\n  import { styled } from '@material-ui/core/styles';\n  import { withSnackbar } from 'notistack';\n  import { email_verify } from '../../store/actions/auth';\n\n  const GridStyled = styled(Grid)({\n    height: '100vh',\n  });\n\n  const ContainerStyled = styled(Container)({\n    // width: 377,\n    textAlign: 'center',\n    padding: 30,\n  });\n\n  const TypoStyled = styled(Typography)(() => ({\n    fontSize: 32,\n    marginTop: 15 ,\n    marginBottom: 0,\n    fontWeight: '300',\n  }));\n\n  const LinkStyled = styled(Link)(({ theme }) => ({\n    color: theme.palette.primary.main,\n    textDecoration: 'none',\n  }));\n\n  const FormFields = { email: '', password: '' };\n  const MailSent = (props) => {\n    console.log(\"Rtessssss\", props);\n    const { enqueueSnackbar, error } = props;\n    const {getemail,getotp, isRegister} = useParams();\n    useEffect(() => {\n      error && enqueueSnackbar(error, { variant: 'error' });\n    }, [error]);\n    useMemo(() => {\n      error && enqueueSnackbar(error, { variant: 'error' });\n    }, [error]);\n\n\n\n    const [values, setValues] = useState({\n      email: '',\n      password: '',\n      showPassword: false,\n    });\n\n    const [formvalues, setFormvalues] = useState(FormFields);\n    const [formvalidation, setFormvalidation] = useState(FormFields);\n\n\n    const history = useHistory();\n\n\n    const userId = localStorage.getItem('token');\n    let authRedirect = null;\n    if (userId) {\n      authRedirect = <Redirect to=\"/dashboard\" />;\n    }\n\n    return (\n      <GridStyled container justify=\"center\" alignItems=\"center\" className=\"loginBg\">\n         <ContainerStyled container justify=\"center\" alignItems=\"center\" >\n        {authRedirect}\n              {\n                isRegister == 1 ?\n                  <div>\n                    <div><img src={require('../../assets/images/sent.svg')} /></div>\n                    <TypoStyled variant=\"h6\">Verification Mail has been sent to your mail</TypoStyled>\n                    <TypoStyled variant=\"h6\">Please check {getemail}</TypoStyled>\n                        {/* <Button onClick={loginSubmitHandler} variant=\"contained\" color=\"primary\" size=\"large\">\n                          {props.loading && <CircularSpinner />}\n                          Confirm\n                        </Button> */}\n                  </div>\n                :\n                <div>\n                  <div><img src={require('../../assets/images/sent.svg')} /></div>\n                  <TypoStyled style={{marginTop: 47}} variant=\"h6\">We have sent and reset password link to your email</TypoStyled>\n                  <TypoStyled style={{color: '#17BAFF'}} variant=\"h6\">Please check {getemail}</TypoStyled>\n                </div>\n              }\n      </ContainerStyled>\n\n      </GridStyled>\n    );\n  };\n\n  const mapStateToProps = (state) => {\n    return {\n      loading: state.auth.loading,\n      error: state.auth.error,\n    };\n  };\n\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      onAuth: (email, history) => dispatch(email_verify(email,history)),\n    };\n  };\n\n  MailSent.propTypes = {\n    enqueueSnackbar: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    onAuth: PropTypes.func.isRequired,\n    error: PropTypes.string.isRequired,\n  };\n\n  export default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(MailSent));\n"]},"metadata":{},"sourceType":"module"}