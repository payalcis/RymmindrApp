{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const SuccessMessage = message => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE_NOTIFICATION,\n    success_message: message\n  };\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.ERROR,\n    error: error\n  };\n};\nexport const getNotifications = data => {\n  return dispatch => {\n    Axios().post('/notification', data).then(response => {\n      // console.warn('hello notify', response)\n      if (response.data.status === 200) {\n        dispatch(Success({\n          type: actionTypes.GETNOTIFICATION,\n          payload: response.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const notificationRead = data => {\n  return dispatch => {\n    Axios().post('/notification/read', data).then(response => {\n      if (response.data.status === 200) {\n        dispatch(Success({\n          type: actionTypes.NOTIFICATIONREAD,\n          payload: response.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      console.log('err');\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const notificationClear = user_id => {\n  return dispatch => {\n    console.warn('hello 333');\n    Axios().post('users/clearDesktopNotification', {\n      user_id: user_id\n    }).then(response => {\n      if (response.data.status === '1') {\n        dispatch(SuccessMessage(response.data));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      console.log('err');\n      dispatch(Fail(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/notificationActions.js"],"names":["actionTypes","Axios","isLoading","type","ISLOADING","Success","response","SuccessMessage","message","SUCCESS_MESSAGE_NOTIFICATION","success_message","Fail","error","ERROR","getNotifications","data","dispatch","post","then","status","GETNOTIFICATION","payload","catch","err","notificationRead","NOTIFICATIONREAD","console","log","notificationClear","user_id","warn"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\n\nexport const isLoading = () => {\n    return {\n        type: actionTypes.ISLOADING,\n    };\n};\n\nexport const Success = (response) => {\n    return response;\n};\n\nexport const SuccessMessage = (message) => {\n\n    return {\n        type: actionTypes.SUCCESS_MESSAGE_NOTIFICATION,\n        success_message: message,\n    };\n};\n\nexport const Fail = (error) => {\n    return {\n        type: actionTypes.ERROR,\n        error: error,\n    };\n};\n\nexport const getNotifications = (data) => {\n    return (dispatch) => {\n        Axios().post('/notification', data)\n            .then((response) => {\n                // console.warn('hello notify', response)\n                if (response.data.status === 200) {\n                    dispatch(\n                        Success({\n                            type: actionTypes.GETNOTIFICATION,\n                            payload: response.data\n                        })\n                    );\n                } else {\n                    dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n                dispatch(Fail(err.message));\n            });\n    };\n};\n\nexport const notificationRead = (data) => {\n    return (dispatch) => {\n        Axios().post('/notification/read', data)\n            .then((response) => {\n                if (response.data.status === 200) {\n                    dispatch(\n                        Success({\n                            type: actionTypes.NOTIFICATIONREAD,\n                            payload: response.data\n                        })\n                    );\n                } else {\n                    dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n                console.log('err');\n                dispatch(Fail(err.message));\n            });\n    };\n};\n\n\nexport const notificationClear = (user_id) => {\n    return (dispatch) => {\n        console.warn('hello 333')\n        Axios().post('users/clearDesktopNotification', { user_id: user_id })\n            .then((response) => {\n                if (response.data.status === '1') {\n\n                    dispatch(SuccessMessage(response.data));\n                } else {\n                    dispatch(Fail(response.data.message));\n                }\n            })\n            .catch((err) => {\n                console.log('err');\n                dispatch(Fail(err.message));\n            });\n    };\n};"]},"metadata":{},"sourceType":"module"}