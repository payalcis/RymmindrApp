{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/AccountSettings/ChangePassword.js\";\nimport { Box, Button, FormControl, FormHelperText, Grid, IconButton, InputAdornment, InputLabel, OutlinedInput, Typography } from '@material-ui/core';\nimport React, { useMemo, useState } from 'react';\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport CircularSpinner from '../../component/CircularSpinner';\nimport PropTypes from 'prop-types';\nimport { changePassword } from '../../store/actions/accountsettingAction';\nimport clsx from 'clsx';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { withSnackbar } from 'notistack';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  }\n}));\nconst TypoStyled = styled(Typography)(({\n  theme\n}) => ({\n  fontSize: 17,\n  color: theme.palette.text.primary,\n  fontWeight: '600',\n  paddingTop: 20,\n  paddingBottom: 50\n}));\nconst formFields = {\n  user_id: '2892',\n  current_password: '',\n  password: '',\n  password_confirmation: ''\n};\nconst showPassword = {\n  current_password: false,\n  password: false,\n  password_confirmation: false\n};\n\nconst ChangePassword = props => {\n  const history = useHistory();\n  const {\n    user_id\n  } = JSON.parse(localStorage.getItem('userData'));\n  const {\n    changePassword,\n    enqueueSnackbar,\n    error,\n    loading,\n    success_message\n  } = props;\n  const classes = useStyles();\n  const [values, setValues] = useState(formFields);\n  const [validatevalues, setValidateValues] = useState(formFields);\n  const [showvalue, setShowValues] = useState(showPassword);\n\n  const handleChange = prop => event => {\n    setValues({ ...values,\n      [prop]: event.target.value\n    });\n    setValidateValues({ ...validatevalues,\n      [prop]: ''\n    });\n  };\n\n  const handleClickShowPassword = prop => {\n    setShowValues({ ...showvalue,\n      [prop]: !showvalue[prop]\n    });\n  };\n\n  const formValidation = () => {\n    let error = false;\n    let formvalid = { ...validatevalues\n    };\n    let formvalue = { ...values\n    };\n    var upperCaseLetters = /[A-Z]/g;\n    var numbers = /[0-9]/g;\n\n    if (!formvalue.current_password) {\n      error = true;\n      formvalid.current_password = 'This field is required.';\n    }\n\n    if (!formvalue.password) {\n      error = true;\n      formvalid.password = 'This field is required.';\n    } else if (!formvalue.password.match(upperCaseLetters)) {\n      error = true;\n      formvalid.password = 'Password must contain an upper case letter!';\n    } else if (!formvalue.password.match(numbers)) {\n      error = true;\n      formvalid.password = 'Password must contain a digit!';\n    } else if (!formvalue.password.length >= 8) {\n      error = true;\n      formvalid.password = 'Password must contain 8 or more characters!';\n    }\n\n    if (!formvalue.password_confirmation) {\n      error = true;\n      formvalid.password_confirmation = 'This field is required.';\n    }\n\n    if (formvalue.password_confirmation !== formvalue.password) {\n      error = true;\n      formvalid.password_confirmation = 'Password and confirm password should be same.';\n    }\n\n    setValidateValues(formvalid);\n    return error;\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (formValidation()) return false;\n    const sendReq = { ...values\n    };\n    sendReq.user_id = user_id;\n    changePassword(sendReq, history);\n  };\n\n  useMemo(() => {\n    error && enqueueSnackbar(error, {\n      variant: 'error'\n    });\n  }, [error]);\n  useMemo(() => {\n    success_message && enqueueSnackbar(success_message, {\n      variant: 'success'\n    });\n  }, [success_message]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingLeft: 25,\n      paddingRight: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TypoStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, \"Change Password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: clsx(classes.margin, classes.textField),\n    variant: \"outlined\",\n    fullWidth: true,\n    error: !!validatevalues.current_password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"outlined-adornment-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"Current Password\"), /*#__PURE__*/React.createElement(OutlinedInput, {\n    type: showvalue.current_password ? 'text' : 'password',\n    value: values.current_password,\n    onChange: handleChange('current_password'),\n    name: \"current_password\",\n    endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: () => handleClickShowPassword('current_password'),\n      onMouseDown: handleMouseDownPassword,\n      edge: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, showvalue.current_password ? /*#__PURE__*/React.createElement(Visibility, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 70\n      }\n    }))),\n    labelWidth: 125,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, validatevalues.current_password)))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 5,\n    className: \"mt-20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: clsx(classes.margin, classes.textField),\n    variant: \"outlined\",\n    fullWidth: true,\n    error: !!validatevalues.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"new-pass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, \"New Password\"), /*#__PURE__*/React.createElement(OutlinedInput, {\n    id: \"new-pass\",\n    type: showvalue.password ? 'text' : 'password',\n    value: values.password,\n    onChange: handleChange('password'),\n    endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: () => handleClickShowPassword('password'),\n      onMouseDown: handleMouseDownPassword,\n      edge: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }, showvalue.password ? /*#__PURE__*/React.createElement(Visibility, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 45\n      }\n    }) : /*#__PURE__*/React.createElement(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 62\n      }\n    }))),\n    labelWidth: 105,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 15\n    }\n  }, validatevalues.password))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: clsx(classes.margin, classes.textField),\n    variant: \"outlined\",\n    fullWidth: true,\n    error: !!validatevalues.password_confirmation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"outlined-adornment-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }, \"Confirm Password\"), /*#__PURE__*/React.createElement(OutlinedInput, {\n    type: showvalue.password_confirmation ? 'text' : 'password',\n    value: values.password_confirmation,\n    onChange: handleChange('password_confirmation'),\n    endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: () => handleClickShowPassword('password_confirmation'),\n      onMouseDown: handleMouseDownPassword,\n      edge: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }, showvalue.password_confirmation ? /*#__PURE__*/React.createElement(Visibility, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 58\n      }\n    }) : /*#__PURE__*/React.createElement(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 75\n      }\n    }))),\n    labelWidth: 125,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 15\n    }\n  }, validatevalues.password_confirmation)), /*#__PURE__*/React.createElement(Box, {\n    style: {\n      textAlign: 'right',\n      marginTop: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  }, loading && /*#__PURE__*/React.createElement(CircularSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 29\n    }\n  }), \"update password\"))))));\n};\n\nconst mapStateToProps = ({\n  account\n}) => {\n  return {\n    loading: account.loading,\n    error: account.error,\n    success_message: account.success_message\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changePassword: (data, history) => dispatch(changePassword(data, history))\n  };\n};\n\nChangePassword.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  changePassword: PropTypes.func.isRequired,\n  success_message: PropTypes.any.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(ChangePassword));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/AccountSettings/ChangePassword.js"],"names":["Box","Button","FormControl","FormHelperText","Grid","IconButton","InputAdornment","InputLabel","OutlinedInput","Typography","React","useMemo","useState","Visibility","VisibilityOff","makeStyles","styled","CircularSpinner","PropTypes","changePassword","clsx","connect","useHistory","withSnackbar","useStyles","theme","root","flexGrow","TypoStyled","fontSize","color","palette","text","primary","fontWeight","paddingTop","paddingBottom","formFields","user_id","current_password","password","password_confirmation","showPassword","ChangePassword","props","history","JSON","parse","localStorage","getItem","enqueueSnackbar","error","loading","success_message","classes","values","setValues","validatevalues","setValidateValues","showvalue","setShowValues","handleChange","prop","event","target","value","handleClickShowPassword","formValidation","formvalid","formvalue","upperCaseLetters","numbers","match","length","handleMouseDownPassword","preventDefault","handleSubmit","e","sendReq","variant","paddingLeft","paddingRight","margin","textField","textAlign","marginTop","mapStateToProps","account","mapDispatchToProps","dispatch","data","propTypes","func","isRequired","bool","string","any"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  FormControl,\n  FormHelperText,\n  Grid,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n  Typography,\n} from '@material-ui/core';\nimport React, { useMemo, useState } from 'react';\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport CircularSpinner from '../../component/CircularSpinner';\nimport PropTypes from 'prop-types';\nimport { changePassword } from '../../store/actions/accountsettingAction';\nimport clsx from 'clsx';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { withSnackbar } from 'notistack';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\nconst TypoStyled = styled(Typography)(({ theme }) => ({\n  fontSize: 17,\n  color: theme.palette.text.primary,\n  fontWeight: '600',\n  paddingTop: 20,\n  paddingBottom: 50,\n}));\n\nconst formFields = {\n  user_id: '2892',\n  current_password: '',\n  password: '',\n  password_confirmation: '',\n};\n\nconst showPassword = {\n  current_password: false,\n  password: false,\n  password_confirmation: false,\n};\n\nconst ChangePassword = (props) => {\n  const history = useHistory();\n  const { user_id } = JSON.parse(localStorage.getItem('userData'));\n  const { changePassword, enqueueSnackbar, error, loading,success_message } = props;\n  const classes = useStyles();\n  const [values, setValues] = useState(formFields);\n  const [validatevalues, setValidateValues] = useState(formFields);\n  const [showvalue, setShowValues] = useState(showPassword);\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n    setValidateValues({ ...validatevalues, [prop]: '' });\n  };\n\n  const handleClickShowPassword = (prop) => {\n    setShowValues({ ...showvalue, [prop]: !showvalue[prop] });\n  };\n\n  const formValidation = () => {\n    let error = false;\n    let formvalid = { ...validatevalues };\n    let formvalue = { ...values };\n    var upperCaseLetters = /[A-Z]/g;\n    var numbers = /[0-9]/g;\n\n    if (!formvalue.current_password) {\n      error = true;\n      formvalid.current_password = 'This field is required.';\n    }\n\n    if (!formvalue.password) {\n      error = true;\n      formvalid.password = 'This field is required.';\n    }\n    else if (!(formvalue.password).match(upperCaseLetters)) {\n      error = true;\n      formvalid.password = 'Password must contain an upper case letter!';\n    }\n    else if (!(formvalue.password).match(numbers)) {\n      error = true;\n      formvalid.password = 'Password must contain a digit!';\n    }\n    else if (!(formvalue.password).length >= 8) {\n      error = true;\n      formvalid.password = 'Password must contain 8 or more characters!';\n    }\n\n    if (!formvalue.password_confirmation) {\n      error = true;\n      formvalid.password_confirmation = 'This field is required.';\n    }\n\n    if (formvalue.password_confirmation !== formvalue.password) {\n      error = true;\n      formvalid.password_confirmation = 'Password and confirm password should be same.';\n    }\n\n    setValidateValues(formvalid);\n    return error;\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (formValidation()) return false;\n    const sendReq = { ...values };\n    sendReq.user_id = user_id;\n    changePassword(sendReq, history);\n  };\n\n  useMemo(() => {\n    error && enqueueSnackbar(error, { variant: 'error' });\n  }, [error]);\n  useMemo(() => {\n    \n    success_message && enqueueSnackbar(success_message, { variant: 'success' });\n  }, [success_message]);\n  return (\n    <div style={{ paddingLeft: 25, paddingRight: 25 }}>\n      <TypoStyled>Change Password</TypoStyled>\n      <form onSubmit={handleSubmit}>\n        <Grid container spacing={5}>\n          <Grid item xs={5}>\n            <FormControl\n              className={clsx(classes.margin, classes.textField)}\n              variant=\"outlined\"\n              fullWidth\n              error={!!validatevalues.current_password}\n            >\n              <InputLabel htmlFor=\"outlined-adornment-password\">Current Password</InputLabel>\n              <OutlinedInput\n                type={showvalue.current_password ? 'text' : 'password'}\n                value={values.current_password}\n                onChange={handleChange('current_password')}\n                name=\"current_password\"\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={() => handleClickShowPassword('current_password')}\n                      onMouseDown={handleMouseDownPassword}\n                      edge=\"end\"\n                    >\n                      {showvalue.current_password ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={125}\n              />\n              <FormHelperText>{validatevalues.current_password}</FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n\n        <Grid container spacing={5} className=\"mt-20\">\n          <Grid item xs={5}>\n            <FormControl\n              className={clsx(classes.margin, classes.textField)}\n              variant=\"outlined\"\n              fullWidth\n              error={!!validatevalues.password}\n            >\n              <InputLabel htmlFor=\"new-pass\">New Password</InputLabel>\n              <OutlinedInput\n                id=\"new-pass\"\n                type={showvalue.password ? 'text' : 'password'}\n                value={values.password}\n                onChange={handleChange('password')}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={() => handleClickShowPassword('password')}\n                      onMouseDown={handleMouseDownPassword}\n                      edge=\"end\"\n                    >\n                      {showvalue.password ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={105}\n              />\n              <FormHelperText>{validatevalues.password}</FormHelperText>\n            </FormControl>\n          </Grid>\n          <Grid item xs={5}>\n            <FormControl\n              className={clsx(classes.margin, classes.textField)}\n              variant=\"outlined\"\n              fullWidth\n              error={!!validatevalues.password_confirmation}\n            >\n              <InputLabel htmlFor=\"outlined-adornment-password\">Confirm Password</InputLabel>\n              <OutlinedInput\n                type={showvalue.password_confirmation ? 'text' : 'password'}\n                value={values.password_confirmation}\n                onChange={handleChange('password_confirmation')}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={() => handleClickShowPassword('password_confirmation')}\n                      onMouseDown={handleMouseDownPassword}\n                      edge=\"end\"\n                    >\n                      {showvalue.password_confirmation ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={125}\n              />\n              <FormHelperText>{validatevalues.password_confirmation}</FormHelperText>\n            </FormControl>\n            <Box style={{ textAlign: 'right', marginTop: 50 }}>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={loading}>\n                {loading && <CircularSpinner />}\n                update password\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ account }) => {\n  return {\n    loading: account.loading,\n    error: account.error,\n    success_message: account.success_message\n\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changePassword: (data, history) => dispatch(changePassword(data, history)),\n  };\n};\n\nChangePassword.propTypes = {\n  enqueueSnackbar: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  changePassword: PropTypes.func.isRequired,\n  success_message: PropTypes.any.isRequired,\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(ChangePassword));\n"]},"metadata":{},"sourceType":"module"}