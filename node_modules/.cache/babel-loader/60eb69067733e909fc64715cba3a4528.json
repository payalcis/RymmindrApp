{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ACISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.ACERROR,\n    error: error\n  };\n};\nexport const SuccessMessage = message => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE_ACCOUNT_SETTING,\n    success_message: message\n  };\n};\nexport const notificationSetting = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/updateNotificationStatus', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        userData.notification_status = data.notification_status;\n        localStorage.setItem('userData', JSON.stringify(userData));\n        dispatch(Success({\n          type: actionTypes.CHANGENOTIFICATIONSETTING,\n          payload: record\n        }));\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const makeDefaultCategory = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/updatedefaultcategory', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        dispatch(Success({\n          type: actionTypes.MAKEDEFAULTCATEGORY,\n          payload: record\n        }));\n        let tempUserData = JSON.parse(localStorage.getItem('userData'));\n        const {\n          user_id,\n          business_code,\n          country_name,\n          device_token,\n          notification_status,\n          notification_chat_status,\n          notification_post_status,\n          notification_msg_center_status,\n          profile_image,\n          first_name,\n          last_name,\n          sc_bessi_name,\n          address,\n          post_code,\n          email,\n          mobile_no,\n          account_type\n        } = tempUserData;\n        const default_category = data.default_category;\n        const userData = {\n          user_id,\n          business_code,\n          country_name,\n          device_token,\n          notification_status,\n          notification_chat_status,\n          notification_post_status,\n          notification_msg_center_status,\n          profile_image,\n          first_name,\n          last_name,\n          sc_bessi_name,\n          address,\n          post_code,\n          email,\n          mobile_no,\n          account_type,\n          default_category\n        };\n        console.log('userData', userData);\n        localStorage.setItem('userData', JSON.stringify(userData));\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const changePassword = (data, history) => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/updatePassword', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        await dispatch(Success({\n          type: actionTypes.CHANGEPASSWORD,\n          payload: record\n        }));\n        dispatch(SuccessMessage(response.data.message));\n        await localStorage.clear();\n        history.push('/login');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const updateProfile = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/update_profile', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        const {\n          user_id,\n          business_code,\n          country_name,\n          device_token,\n          notification_status,\n          notification_chat_status,\n          notification_post_status,\n          notification_msg_center_status,\n          profile_image,\n          first_name,\n          // last_name,\n          sc_bessi_name,\n          address,\n          post_code,\n          email,\n          mobile_no,\n          account_type,\n          first_login,\n          default_category\n        } = response.data.data;\n        const userData = {\n          user_id,\n          business_code,\n          country_name,\n          device_token,\n          notification_status,\n          notification_chat_status,\n          notification_post_status,\n          notification_msg_center_status,\n          profile_image,\n          first_name,\n          // last_name,\n          sc_bessi_name,\n          address,\n          post_code,\n          email,\n          mobile_no,\n          account_type,\n          first_login,\n          default_category\n        };\n        localStorage.setItem('userData', JSON.stringify(userData));\n        dispatch(Success({\n          type: actionTypes.UPDATEPROFILE,\n          payload: record\n        }));\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const deleteUserAccount = data => {\n  let resp = {\n    status: false\n  };\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/deleteDesktopAccount', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        dispatch(Success({\n          type: actionTypes.DELETEUSERACCOUNT,\n          payload: record\n        }));\n        dispatch(SuccessMessage(response.data.message));\n        resp.status = true;\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n\n    return resp;\n  };\n};\nexport const sendOtpcode = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/requestOneTimePassword', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        await dispatch(Success({\n          type: actionTypes.SENDOTP,\n          payload: record\n        }));\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const verifyOtp = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('users/verify', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        await dispatch(Success({\n          type: actionTypes.VERIFYOTP,\n          payload: record\n        }));\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const resetData = () => {\n  return async dispatch => {\n    try {\n      dispatch(Success({\n        type: actionTypes.RESETDATA,\n        payload: ''\n      }));\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getUserDetails = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/user_detail', data); // console.warn('response123123', response.data.data);\n\n      if (response.data.status === '1') {\n        // console.warn('hello if');\n        const record = response.data.data;\n        await dispatch(Success({\n          type: actionTypes.GETUSERDETAILS,\n          payload: record\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const genrateQrCode = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/getQRUserCode', data);\n\n      if (response.data.status === '1') {\n        dispatch(getUserDetails(data));\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/accountsettingAction.js"],"names":["actionTypes","Axios","isLoading","type","ACISLOADING","Success","response","Fail","error","ACERROR","SuccessMessage","message","SUCCESS_MESSAGE_ACCOUNT_SETTING","success_message","notificationSetting","data","dispatch","post","status","record","userData","JSON","parse","localStorage","getItem","notification_status","setItem","stringify","CHANGENOTIFICATIONSETTING","payload","makeDefaultCategory","MAKEDEFAULTCATEGORY","tempUserData","user_id","business_code","country_name","device_token","notification_chat_status","notification_post_status","notification_msg_center_status","profile_image","first_name","last_name","sc_bessi_name","address","post_code","email","mobile_no","account_type","default_category","console","log","changePassword","history","CHANGEPASSWORD","clear","push","updateProfile","first_login","UPDATEPROFILE","deleteUserAccount","resp","DELETEUSERACCOUNT","sendOtpcode","SENDOTP","verifyOtp","VERIFYOTP","resetData","RESETDATA","getUserDetails","GETUSERDETAILS","genrateQrCode"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\n\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ACISLOADING,\n  };\n};\n\nexport const Success = (response) => {\n  return response;\n};\n\nexport const Fail = (error) => {\n  return {\n    type: actionTypes.ACERROR,\n    error: error,\n  };\n};\nexport const SuccessMessage = (message) => {\n\n  return {\n    type: actionTypes.SUCCESS_MESSAGE_ACCOUNT_SETTING,\n    success_message: message,\n  };\n};\nexport const notificationSetting = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/updateNotificationStatus', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        userData.notification_status = data.notification_status;\n        localStorage.setItem('userData', JSON.stringify(userData));\n\n\n        dispatch(\n          Success({\n            type: actionTypes.CHANGENOTIFICATIONSETTING,\n            payload: record,\n          })\n        );\n\n        dispatch(SuccessMessage(response.data.message));\n\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\n\nexport const makeDefaultCategory = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/updatedefaultcategory', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        dispatch(\n          Success({\n            type: actionTypes.MAKEDEFAULTCATEGORY,\n            payload: record,\n          })\n        );\n        \n\n        let tempUserData = JSON.parse(localStorage.getItem('userData'));\n        \n        const {\n          user_id,\n          business_code,\n          country_name,\n          device_token,\n          notification_status,\n          notification_chat_status,\n          notification_post_status,\n          notification_msg_center_status,\n          profile_image,\n          first_name,\n          last_name,\n          sc_bessi_name,\n          address,\n          post_code,\n          email,\n          mobile_no,\n          account_type,\n        } = tempUserData;\n\n        const default_category = data.default_category;\n\n        const userData = {\n          user_id,\n          business_code,\n          country_name,\n          device_token,\n          notification_status,\n          notification_chat_status,\n          notification_post_status,\n          notification_msg_center_status,\n          profile_image,\n          first_name,\n          last_name,\n          sc_bessi_name,\n          address,\n          post_code,\n          email,\n          mobile_no,\n          account_type,\n          default_category\n        }\n        console.log('userData',userData)\n\n        localStorage.setItem('userData', JSON.stringify(userData));\n        dispatch(SuccessMessage(response.data.message));\n\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\n\nexport const changePassword = (data, history) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/updatePassword', data);\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        await dispatch(\n          Success({\n            type: actionTypes.CHANGEPASSWORD,\n            payload: record,\n          })\n        );\n\n        dispatch(SuccessMessage(response.data.message));\n        await localStorage.clear();\n        history.push('/login');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\n\nexport const updateProfile = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/update_profile', data);\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        const {\n          user_id,\n          business_code,\n          country_name,\n          device_token,\n          notification_status,\n          notification_chat_status,\n          notification_post_status,\n          notification_msg_center_status,\n          profile_image,\n          first_name,\n          // last_name,\n          sc_bessi_name,\n          address,\n          post_code,\n          email,\n          mobile_no,\n          account_type,\n          first_login,\n          default_category\n        } = response.data.data;\n\n        const userData = {\n          user_id,\n          business_code,\n          country_name,\n          device_token,\n          notification_status,\n          notification_chat_status,\n          notification_post_status,\n          notification_msg_center_status,\n          profile_image,\n          first_name,\n          // last_name,\n          sc_bessi_name,\n          address,\n          post_code,\n          email,\n          mobile_no,\n          account_type,\n          first_login,\n          default_category\n        };\n        localStorage.setItem('userData', JSON.stringify(userData));\n        dispatch(\n          Success({\n            type: actionTypes.UPDATEPROFILE,\n            payload: record,\n          })\n        );\n        dispatch(SuccessMessage(response.data.message));\n\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\n\nexport const deleteUserAccount = (data) => {\n\n  let resp = {\n    status: false\n  };\n\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/deleteDesktopAccount', data);\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        dispatch(\n          Success({\n            type: actionTypes.DELETEUSERACCOUNT,\n            payload: record,\n          })\n        );\n\n        dispatch(SuccessMessage(response.data.message));\n        resp.status = true;\n\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n\n    return resp;\n  };\n};\n\nexport const sendOtpcode = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/requestOneTimePassword', data);\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        await dispatch(\n          Success({\n            type: actionTypes.SENDOTP,\n            payload: record,\n          })\n        );\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\n\nexport const verifyOtp = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('users/verify', data);\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        await dispatch(\n          Success({\n            type: actionTypes.VERIFYOTP,\n            payload: record,\n          })\n        );\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\n\nexport const resetData = () => {\n  return async (dispatch) => {\n    try {\n      dispatch(\n        Success({\n          type: actionTypes.RESETDATA,\n          payload: '',\n        })\n      );\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getUserDetails = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/users/user_detail', data);\n      // console.warn('response123123', response.data.data);\n      if (response.data.status === '1') {\n        // console.warn('hello if');\n        const record = response.data.data;\n        await dispatch(\n          Success({\n            type: actionTypes.GETUSERDETAILS,\n            payload: record,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n    finally{\n\n      dispatch(Fail(null));\n    }\n  };\n};\n\nexport const genrateQrCode = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/getQRUserCode', data);\n      if (response.data.status === '1') {\n        dispatch(getUserDetails(data));\n        dispatch(SuccessMessage(response.data.message));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n    finally{\n      dispatch(SuccessMessage(null));\n      dispatch(Fail(null));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}