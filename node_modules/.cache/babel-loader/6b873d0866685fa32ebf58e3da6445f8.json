{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios';\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.ERROR,\n    error: error\n  };\n};\nexport const SuccessMessage2 = message => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE_FORM,\n    success_message2: message\n  };\n};\nexport const createForm = (data, history, user_id) => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('user/create-form', data);\n      console.log('response===', response);\n\n      if (response.data.status == '1') {\n        dispatch(getFormBuilderList({\n          user_id\n        }));\n        dispatch(SuccessMessage2(response.data.message));\n        dispatch(Success({\n          type: actionTypes.CREATEFORMBUILDER,\n          payload: []\n        }));\n        history.push('/form-builders');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage2(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const createTemplateForm = (data, history, user_id) => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('user/create-template', data);\n\n      if (response.data.status == '1') {\n        dispatch(getTemplatesList({\n          user_id\n        }));\n        dispatch(SuccessMessage2(response.data.message));\n        dispatch(Success({\n          type: actionTypes.CREATETEMPLATE,\n          payload: []\n        }));\n        history.push('/form-templates');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    } finally {\n      dispatch(SuccessMessage2(null));\n      dispatch(Fail(null));\n    }\n  };\n};\nexport const getFormBuilderList = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('user/list-form', data);\n\n      if (response.data.status == 1) {\n        dispatch(Success({\n          type: actionTypes.FORM_BUILDER_LIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getExamDetailsForContact = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('user/exam-details-for-contact', data);\n\n      if (response.data.status == 1) {\n        dispatch(Success({\n          type: actionTypes.SUBMITTED_FORM_BY_CONTACT,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getTemplatesList = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('user/list-template', data);\n\n      if (response.data.status == 1) {\n        dispatch(Success({\n          type: actionTypes.FORM_TEMPLATES_LIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getSubmittedFormsList = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('user/exam-details-by-id', data);\n      console.log('response====', response);\n\n      if (response.data.status == 1) {\n        dispatch(Success({\n          type: actionTypes.SUBMITTED_FORM_LIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const deleteFormData = ({\n  id,\n  user_id\n}) => {\n  const data = {\n    \"form_id\": id\n  };\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('user/delete-form', data);\n      console.log('delresponse====', response);\n\n      if (response.data.status == 1) {\n        dispatch(Success({\n          type: actionTypes.DELETE_FORM_DATA\n        }));\n        dispatch(SuccessMessage2('Form has been deleted successfully.'));\n        dispatch(getFormBuilderList({\n          user_id\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const deleteTemplateData = ({\n  id,\n  user_id\n}) => {\n  const data = {\n    \"temp_id\": id\n  };\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('user/delete-template', data);\n      console.log('delresponse====', response);\n\n      if (response.data.status == 1) {\n        dispatch(Success({\n          type: actionTypes.DELETE_TEMPLATE_DATA\n        }));\n        dispatch(SuccessMessage2('Template has been deleted successfully.'));\n        dispatch(getTemplatesList({\n          user_id\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/formBuilder.js"],"names":["actionTypes","Axios","axios","isLoading","type","ISLOADING","Success","response","Fail","error","ERROR","SuccessMessage2","message","SUCCESS_MESSAGE_FORM","success_message2","createForm","data","history","user_id","dispatch","post","console","log","status","getFormBuilderList","CREATEFORMBUILDER","payload","push","createTemplateForm","getTemplatesList","CREATETEMPLATE","FORM_BUILDER_LIST","getExamDetailsForContact","SUBMITTED_FORM_BY_CONTACT","FORM_TEMPLATES_LIST","getSubmittedFormsList","SUBMITTED_FORM_LIST","deleteFormData","id","DELETE_FORM_DATA","deleteTemplateData","DELETE_TEMPLATE_DATA"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACK;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,OAAO,GAAIC,QAAD,IAAc;AACjC,SAAOA,QAAP;AACH,CAFM;AAIP,OAAO,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAC3B,SAAO;AACHL,IAAAA,IAAI,EAAEJ,WAAW,CAACU,KADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAIC,OAAD,IAAa;AACxC,SAAO;AACHR,IAAAA,IAAI,EAAEJ,WAAW,CAACa,oBADf;AAEHC,IAAAA,gBAAgB,EAAEF;AAFf,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,UAAU,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAeC,OAAf,KAA2B;AACjD,SAAO,MAAMC,QAAN,IAAmB;AACtB,QAAI;AACAA,MAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACA,YAAMI,QAAQ,GAAG,MAAMN,KAAK,GAAGmB,IAAR,CAAa,kBAAb,EAAiCJ,IAAjC,CAAvB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Bf,QAA3B;;AACA,UAAIA,QAAQ,CAACS,IAAT,CAAcO,MAAd,IAAwB,GAA5B,EAAiC;AAC7BJ,QAAAA,QAAQ,CAACK,kBAAkB,CAAC;AAACN,UAAAA;AAAD,SAAD,CAAnB,CAAR;AACAC,QAAAA,QAAQ,CAACR,eAAe,CAACJ,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAhB,CAAR;AACAO,QAAAA,QAAQ,CACJb,OAAO,CAAC;AACJF,UAAAA,IAAI,EAAEJ,WAAW,CAACyB,iBADd;AAEJC,UAAAA,OAAO,EAAE;AAFL,SAAD,CADH,CAAR;AAMAT,QAAAA,OAAO,CAACU,IAAR,CAAa,gBAAb;AACH,OAVD,MAUO;AACHR,QAAAA,QAAQ,CAACX,IAAI,CAACD,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAL,CAAR;AACH;AACJ,KAjBD,CAiBE,OAAOH,KAAP,EAAc;AACZU,MAAAA,QAAQ,CAACX,IAAI,CAACC,KAAK,CAACG,OAAP,CAAL,CAAR;AACH,KAnBD,SAmBU;AACNO,MAAAA,QAAQ,CAACR,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAQ,MAAAA,QAAQ,CAACX,IAAI,CAAC,IAAD,CAAL,CAAR;AACH;AACJ,GAxBD;AAyBH,CA1BM;AA4BP,OAAO,MAAMoB,kBAAkB,GAAG,CAACZ,IAAD,EAAOC,OAAP,EAAeC,OAAf,KAA2B;AAEzD,SAAO,MAAMC,QAAN,IAAmB;AACtB,QAAI;AACAA,MAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACA,YAAMI,QAAQ,GAAG,MAAMN,KAAK,GAAGmB,IAAR,CAAa,sBAAb,EAAqCJ,IAArC,CAAvB;;AACA,UAAIT,QAAQ,CAACS,IAAT,CAAcO,MAAd,IAAwB,GAA5B,EAAiC;AAC7BJ,QAAAA,QAAQ,CAACU,gBAAgB,CAAC;AAACX,UAAAA;AAAD,SAAD,CAAjB,CAAR;AACAC,QAAAA,QAAQ,CAACR,eAAe,CAACJ,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAhB,CAAR;AACAO,QAAAA,QAAQ,CACJb,OAAO,CAAC;AACJF,UAAAA,IAAI,EAAEJ,WAAW,CAAC8B,cADd;AAEJJ,UAAAA,OAAO,EAAE;AAFL,SAAD,CADH,CAAR;AAMAT,QAAAA,OAAO,CAACU,IAAR,CAAa,iBAAb;AACH,OAVD,MAUO;AACHR,QAAAA,QAAQ,CAACX,IAAI,CAACD,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAL,CAAR;AACH;AACJ,KAhBD,CAgBE,OAAOH,KAAP,EAAc;AACZU,MAAAA,QAAQ,CAACX,IAAI,CAACC,KAAK,CAACG,OAAP,CAAL,CAAR;AACH,KAlBD,SAkBU;AACNO,MAAAA,QAAQ,CAACR,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAQ,MAAAA,QAAQ,CAACX,IAAI,CAAC,IAAD,CAAL,CAAR;AACH;AACJ,GAvBD;AAwBH,CA1BM;AA4BP,OAAO,MAAMgB,kBAAkB,GAAIR,IAAD,IAAU;AACxC,SAAO,MAAMG,QAAN,IAAmB;AACtB,QAAI;AACAA,MAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACA,YAAMI,QAAQ,GAAG,MAAMN,KAAK,GAAGmB,IAAR,CAAa,gBAAb,EAA+BJ,IAA/B,CAAvB;;AACA,UAAIT,QAAQ,CAACS,IAAT,CAAcO,MAAd,IAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CACJb,OAAO,CAAC;AACJF,UAAAA,IAAI,EAAEJ,WAAW,CAAC+B,iBADd;AAEJL,UAAAA,OAAO,EAAEnB,QAAQ,CAACS,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR;AAMH,OAPD,MAOO;AACHG,QAAAA,QAAQ,CAACX,IAAI,CAACD,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAL,CAAR;AACH;AACJ,KAbD,CAaE,OAAOH,KAAP,EAAc;AACZU,MAAAA,QAAQ,CAACX,IAAI,CAACC,KAAK,CAACG,OAAP,CAAL,CAAR;AACH;AACJ,GAjBD;AAkBH,CAnBM;AAqBP,OAAO,MAAMoB,wBAAwB,GAAIhB,IAAD,IAAU;AAC9C,SAAO,MAAMG,QAAN,IAAmB;AACtB,QAAI;AACAA,MAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACA,YAAMI,QAAQ,GAAG,MAAMN,KAAK,GAAGmB,IAAR,CAAa,+BAAb,EAA8CJ,IAA9C,CAAvB;;AACA,UAAIT,QAAQ,CAACS,IAAT,CAAcO,MAAd,IAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CACJb,OAAO,CAAC;AACJF,UAAAA,IAAI,EAAEJ,WAAW,CAACiC,yBADd;AAEJP,UAAAA,OAAO,EAAEnB,QAAQ,CAACS,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR;AAMH,OAPD,MAOO;AACHG,QAAAA,QAAQ,CAACX,IAAI,CAACD,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAL,CAAR;AACH;AACJ,KAbD,CAaE,OAAOH,KAAP,EAAc;AACZU,MAAAA,QAAQ,CAACX,IAAI,CAACC,KAAK,CAACG,OAAP,CAAL,CAAR;AACH;AACJ,GAjBD;AAkBH,CAnBM;AAqBP,OAAO,MAAMiB,gBAAgB,GAAIb,IAAD,IAAU;AACtC,SAAO,MAAMG,QAAN,IAAmB;AACtB,QAAI;AACAA,MAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACA,YAAMI,QAAQ,GAAG,MAAMN,KAAK,GAAGmB,IAAR,CAAa,oBAAb,EAAmCJ,IAAnC,CAAvB;;AACA,UAAIT,QAAQ,CAACS,IAAT,CAAcO,MAAd,IAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CACJb,OAAO,CAAC;AACJF,UAAAA,IAAI,EAAEJ,WAAW,CAACkC,mBADd;AAEJR,UAAAA,OAAO,EAAEnB,QAAQ,CAACS,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR;AAMH,OAPD,MAOO;AACHG,QAAAA,QAAQ,CAACX,IAAI,CAACD,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAL,CAAR;AACH;AACJ,KAbD,CAaE,OAAOH,KAAP,EAAc;AACZU,MAAAA,QAAQ,CAACX,IAAI,CAACC,KAAK,CAACG,OAAP,CAAL,CAAR;AACH;AACJ,GAjBD;AAkBH,CAnBM;AAsBP,OAAO,MAAMuB,qBAAqB,GAAInB,IAAD,IAAU;AAC3C,SAAO,MAAMG,QAAN,IAAmB;AACtB,QAAI;AACAA,MAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACA,YAAMI,QAAQ,GAAG,MAAMN,KAAK,GAAGmB,IAAR,CAAa,yBAAb,EAAwCJ,IAAxC,CAAvB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4Bf,QAA5B;;AACA,UAAIA,QAAQ,CAACS,IAAT,CAAcO,MAAd,IAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CACJb,OAAO,CAAC;AACJF,UAAAA,IAAI,EAAEJ,WAAW,CAACoC,mBADd;AAEJV,UAAAA,OAAO,EAAEnB,QAAQ,CAACS,IAAT,CAAcA;AAFnB,SAAD,CADH,CAAR;AAMH,OAPD,MAOO;AACHG,QAAAA,QAAQ,CAACX,IAAI,CAACD,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAL,CAAR;AACH;AACJ,KAdD,CAcE,OAAOH,KAAP,EAAc;AACZU,MAAAA,QAAQ,CAACX,IAAI,CAACC,KAAK,CAACG,OAAP,CAAL,CAAR;AACH;AACJ,GAlBD;AAmBH,CApBM;AAsBP,OAAO,MAAMyB,cAAc,GAAC,CAAC;AAACC,EAAAA,EAAD;AAAIpB,EAAAA;AAAJ,CAAD,KAAgB;AACxC,QAAMF,IAAI,GAAE;AAAC,eAAUsB;AAAX,GAAZ;AACA,SAAO,MAAMnB,QAAN,IAAmB;AACtB,QAAI;AACAA,MAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACA,YAAMI,QAAQ,GAAG,MAAMN,KAAK,GAAGmB,IAAR,CAAa,kBAAb,EAAgCJ,IAAhC,CAAvB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bf,QAA/B;;AACA,UAAIA,QAAQ,CAACS,IAAT,CAAcO,MAAd,IAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CACJb,OAAO,CAAC;AACJF,UAAAA,IAAI,EAAEJ,WAAW,CAACuC;AADd,SAAD,CADH,CAAR;AAKApB,QAAAA,QAAQ,CAACR,eAAe,CAAC,qCAAD,CAAhB,CAAR;AACAQ,QAAAA,QAAQ,CAACK,kBAAkB,CAAC;AAACN,UAAAA;AAAD,SAAD,CAAnB,CAAR;AAEH,OATD,MASO;AACHC,QAAAA,QAAQ,CAACX,IAAI,CAACD,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAL,CAAR;AACH;AACJ,KAhBD,CAgBE,OAAOH,KAAP,EAAc;AACZU,MAAAA,QAAQ,CAACX,IAAI,CAACC,KAAK,CAACG,OAAP,CAAL,CAAR;AACH;AACJ,GApBD;AAqBH,CAvBM;AAyBP,OAAO,MAAM4B,kBAAkB,GAAC,CAAC;AAACF,EAAAA,EAAD;AAAIpB,EAAAA;AAAJ,CAAD,KAAgB;AAC5C,QAAMF,IAAI,GAAE;AAAC,eAAWsB;AAAZ,GAAZ;AACA,SAAO,MAAMnB,QAAN,IAAmB;AACtB,QAAI;AACAA,MAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACA,YAAMI,QAAQ,GAAG,MAAMN,KAAK,GAAGmB,IAAR,CAAa,sBAAb,EAAoCJ,IAApC,CAAvB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bf,QAA/B;;AACA,UAAIA,QAAQ,CAACS,IAAT,CAAcO,MAAd,IAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CACJb,OAAO,CAAC;AACJF,UAAAA,IAAI,EAAEJ,WAAW,CAACyC;AADd,SAAD,CADH,CAAR;AAKAtB,QAAAA,QAAQ,CAACR,eAAe,CAAC,yCAAD,CAAhB,CAAR;AACAQ,QAAAA,QAAQ,CAACU,gBAAgB,CAAC;AAACX,UAAAA;AAAD,SAAD,CAAjB,CAAR;AAEH,OATD,MASO;AACHC,QAAAA,QAAQ,CAACX,IAAI,CAACD,QAAQ,CAACS,IAAT,CAAcJ,OAAf,CAAL,CAAR;AACH;AACJ,KAhBD,CAgBE,OAAOH,KAAP,EAAc;AACZU,MAAAA,QAAQ,CAACX,IAAI,CAACC,KAAK,CAACG,OAAP,CAAL,CAAR;AACH;AACJ,GApBD;AAqBH,CAvBM","sourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios';\n\nexport const isLoading = () => {\n    return {\n        type: actionTypes.ISLOADING,\n    };\n};\n\nexport const Success = (response) => {\n    return response;\n};\n\nexport const Fail = (error) => {\n    return {\n        type: actionTypes.ERROR,\n        error: error,\n    };\n};\n\nexport const SuccessMessage2 = (message) => {\n    return {\n        type: actionTypes.SUCCESS_MESSAGE_FORM,\n        success_message2: message,\n    };\n};\n\nexport const createForm = (data, history,user_id) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('user/create-form', data);\n            console.log('response===', response);\n            if (response.data.status == '1') {\n                dispatch(getFormBuilderList({user_id}))\n                dispatch(SuccessMessage2(response.data.message));\n                dispatch(\n                    Success({\n                        type: actionTypes.CREATEFORMBUILDER,\n                        payload: [],\n                    })\n                );\n                history.push('/form-builders');\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage2(null));\n            dispatch(Fail(null));\n        }\n    };\n};\n\nexport const createTemplateForm = (data, history,user_id) => {\n\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('user/create-template', data);\n            if (response.data.status == '1') {\n                dispatch(getTemplatesList({user_id}))\n                dispatch(SuccessMessage2(response.data.message));\n                dispatch(\n                    Success({\n                        type: actionTypes.CREATETEMPLATE,\n                        payload: [],\n                    })\n                );\n                history.push('/form-templates');\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        } finally {\n            dispatch(SuccessMessage2(null));\n            dispatch(Fail(null));\n        }\n    };\n};\n\nexport const getFormBuilderList = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('user/list-form', data);\n            if (response.data.status == 1) {\n                dispatch(\n                    Success({\n                        type: actionTypes.FORM_BUILDER_LIST,\n                        payload: response.data.data\n                    })\n                );\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\nexport const getExamDetailsForContact = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('user/exam-details-for-contact', data);\n            if (response.data.status == 1) {\n                dispatch(\n                    Success({\n                        type: actionTypes.SUBMITTED_FORM_BY_CONTACT,\n                        payload: response.data.data\n                    })\n                );\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\nexport const getTemplatesList = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('user/list-template', data);\n            if (response.data.status == 1) {\n                dispatch(\n                    Success({\n                        type: actionTypes.FORM_TEMPLATES_LIST,\n                        payload: response.data.data,\n                    })\n                );\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\n\nexport const getSubmittedFormsList = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('user/exam-details-by-id', data);\n            console.log('response====', response);\n            if (response.data.status == 1) {\n                dispatch(\n                    Success({\n                        type: actionTypes.SUBMITTED_FORM_LIST,\n                        payload: response.data.data,\n                    })\n                );\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\nexport const deleteFormData=({id,user_id})=>{\n    const data= {\"form_id\":id}\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('user/delete-form',data);\n            console.log('delresponse====', response);\n            if (response.data.status == 1) {\n                dispatch(\n                    Success({\n                        type: actionTypes.DELETE_FORM_DATA,\n                    })\n                );\n                dispatch(SuccessMessage2('Form has been deleted successfully.'));\n                dispatch(getFormBuilderList({user_id}));\n            \n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };   \n}\n\nexport const deleteTemplateData=({id,user_id})=>{\n    const data= {\"temp_id\": id}\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('user/delete-template',data);\n            console.log('delresponse====', response);\n            if (response.data.status == 1) {\n                dispatch(\n                    Success({\n                        type: actionTypes.DELETE_TEMPLATE_DATA,\n                    })\n                );\n                dispatch(SuccessMessage2('Template has been deleted successfully.'));\n                dispatch(getTemplatesList({user_id}));\n            \n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };   \n}"]},"metadata":{},"sourceType":"module"}