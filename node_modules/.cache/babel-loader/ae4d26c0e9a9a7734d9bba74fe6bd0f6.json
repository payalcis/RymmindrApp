{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios';\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.ERROR,\n    error: error\n  };\n};\nexport const SuccessMessage = message => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE_CENTER,\n    success_message: message\n  };\n};\nexport const getCategories = data => {\n  return dispatch => {\n    //dispatch(isLoading());\n    Axios().get('users/getCategoryListMessageCenter').then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GETCATEGORY,\n          payload: response.data.data //default_cat: response.data.default_cat,\n\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const getRymindrList = data => {\n  return dispatch => {\n    const dataTosend = { ...data\n    };\n    Axios().post('users/getRymindrListForMessage', dataTosend).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GETUSERRYMINDRLIST,\n          payload: response.data.data //default_cat: response.data.default_cat,\n\n        }));\n      } else {\n        dispatch(Success({\n          type: actionTypes.GETUSERRYMINDRLIST,\n          payload: []\n        }));\n      }\n    }).catch(err => {\n      console.log('getRymindrListForMessage', err.message);\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const getRymindrListCalendar = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const {\n        user_id,\n        business_code,\n        first_name,\n        last_name\n      } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data\n      };\n      const response = await Axios().post('users/getRymindrListForCalendar', dataTosend);\n      console.log('responsee=action', response);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GETRYMINDRLIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const searchRymindrList = data => {\n  // alert('search-action');\n  return dispatch => {\n    //dispatch(isLoading());\n    //Axios().get('users/getRymindrListForMessage')\n    const dataTosend = { ...data\n    };\n    Axios().post('users/getRymindrListForMessage', dataTosend).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GETRYMINDRLIST,\n          payload: response.data.data //default_cat: response.data.default_cat,\n\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const createMessageCenter = (data, unmatch, history, sendAttachment) => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const {\n        user_id,\n        business_code,\n        first_name,\n        last_name\n      } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data\n      };\n      const response = await Axios().post('users/createMessageCenter', dataTosend);\n\n      if (response.data.status === '1') {\n        const message_id = response.data.data;\n        let seldFiles = [];\n\n        if (sendAttachment) {\n          var img = sendAttachment;\n          console.log('sendAttachment', sendAttachment);\n          var len = img.length;\n\n          for (var i = 0; i < len; i++) {\n            if (img[i].type == 'application/pdf') {\n              var image = img[i].base64.split(';base64,');\n              var image = image[1];\n              var extn = img[i].name.split('.');\n            } else if (img.type == '') {\n              var image = img[i].base64.split(';base64,');\n              var image = image[1];\n              var extn = img[i].name.split('.');\n            } else {\n              var image = img[i].base64.replace(/^data:image\\/\\w+;base64,/, '');\n              var extn = img[i].name.split('.');\n            } // let att_data = {\n            //   attachment: image,\n            //   message_center_id: message_id,\n            //   user_id: user_id,\n            //   extn: extn[1],\n            //   attachment_object: img[i].name,\n            // };\n            // await Axios().post('users/messageCenterAttachment', att_data);\n\n\n            const att_data = {\n              attachment: image,\n              extn: extn[1],\n              attachment_object: img[i].name\n            };\n            seldFiles.push(att_data);\n          }\n        }\n\n        let dateTosend = {\n          message_center_id: message_id,\n          user_id: user_id,\n          sendAttachment: seldFiles,\n          deleteAttachment: []\n        };\n        console.log('dateTosend=====', dateTosend);\n        await Axios().post('users/messageCenterAttachment', dateTosend);\n        dispatch(Success({\n          type: actionTypes.CREATERYMINDR,\n          payload: response.data.data\n        }));\n        dispatch(SuccessMessage('Message has been created sucessfully.'));\n        history.push('/message-center');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const updateMessageCenter = (data, unmatch, history, sendAttachment, deleteAttachment) => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const {\n        user_id,\n        business_code,\n        first_name,\n        last_name\n      } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data\n      }; //console.log('req', data);\n\n      const response = await Axios().post('users/updateMessageCenter', dataTosend);\n\n      if (response.data.status === '1') {\n        const message_id = response.data.data;\n        let seldFiles = [];\n\n        if (sendAttachment) {\n          // const response_att = await Axios().post('users/deleteAttachmentsMessageCenter', dataTosend);\n          var img = sendAttachment;\n          console.log('sendAttachmentAction====', sendAttachment);\n          var len = img.length;\n\n          for (var i = 0; i < len; i++) {\n            if (img[i].base64 != undefined) {\n              if (img[i].type == 'application/pdf') {\n                var image = img[i].base64.split(';base64,');\n                var image = image[1];\n                var extn = img[i].name.split('.');\n              } else if (img.type == '') {\n                var image = img[i].base64.split(';base64,');\n                var image = image[1];\n                var extn = img[i].name.split('.');\n              } else {\n                var image = img[i].base64.replace(/^data:image\\/\\w+;base64,/, '');\n                var extn = img[i].name.split('.');\n              } // let att_data = {\n              //   attachment: image,\n              //   message_center_id: message_id,\n              //   user_id: user_id,\n              //   extn: extn[1],\n              //   attachment_object: img[i].name, //img[i]\n              // };\n              // console.log('att_data===', att_data);\n              // await Axios().post('users/updatemessageCenterAttachment', att_data);\n\n\n              const att_data = {\n                attachment: image,\n                extn: extn[1],\n                attachment_object: img[i].name\n              };\n              seldFiles.push(att_data);\n            }\n          }\n        }\n\n        let dateTosend = {\n          message_center_id: message_id,\n          user_id: user_id,\n          sendAttachment: seldFiles,\n          deleteAttachment: deleteAttachment\n        };\n        console.log('dateTosend=====', dateTosend);\n        await Axios().post('users/messageCenterAttachment', dateTosend);\n        dispatch(Success({\n          type: actionTypes.CREATERYMINDR,\n          payload: response.data.data\n        }));\n        dispatch(SuccessMessage('Message has been updated sucessfully.'));\n        history.push('/message-center');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getMessageDetails = data => {\n  return dispatch => {\n    //dispatch(isLoading());\n    const dataTosend = { ...data\n    };\n    Axios().post('users/getMessageDetails', dataTosend).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GETMESSAGECENTERLIST,\n          payload: response.data.data //default_cat: response.data.default_cat,\n\n        }));\n      } else {\n        dispatch(Success({\n          type: actionTypes.GETMESSAGECENTERLIST,\n          payload: [] //default_cat: response.data.default_cat,\n\n        })); //dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const getMessageContactsDetail = data => {\n  return dispatch => {\n    //dispatch(isLoading());\n    const dataTosend = { ...data\n    };\n    Axios().post('users/messageCenterDetailsWeb', dataTosend).then(response => {\n      if (response.data.status == '1') {\n        dispatch(Success({\n          type: actionTypes.GETMESSAGECONTACTDETAIL,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const getMessageDetails1111 = data => {\n  return async dispatch => {\n    const dataTosend = { ...data\n    };\n    await Axios().post('users/getMessageDetails', dataTosend).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GETMESSAGECENTERLIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const getMessageDetailsById = data => {\n  return dispatch => {\n    //dispatch(isLoading());\n    const dataTosend = { ...data\n    };\n    Axios().post('users/getMessageDetailsById', dataTosend).then(response => {\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GETMESSAGECENTERLISTBYID,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    }).catch(err => {\n      dispatch(Fail(err.message));\n    });\n  };\n};\nexport const deleteMessage = (msgId, user_id) => {\n  return async dispatch => {\n    try {\n      const response = await Axios().post('users/deleteMessageCenter', {\n        message_center_ids: msgId\n      });\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.GETMESSAGECENTERLISTAFTERDELETE,\n          payload: response.data.data\n        }));\n        dispatch(getMessageDetails({\n          user_id\n        }));\n        dispatch(SuccessMessage('Message has been deleted sucessfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getRssFeeds = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const {\n        user_id,\n        business_code,\n        first_name,\n        last_name\n      } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data\n      };\n      const response = await Axios().post('users/getRssFeeds', dataTosend);\n\n      if (response.data.status === '1') {\n        //console.log('responsee=action', response);\n        dispatch(Success({\n          type: actionTypes.GETRSSFEEDS,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {// dispatch(Fail(error.message));\n    }\n  };\n};","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/messageCenterAction.js"],"names":["actionTypes","Axios","axios","isLoading","type","ISLOADING","Success","response","Fail","error","ERROR","SuccessMessage","message","SUCCESS_MESSAGE_CENTER","success_message","getCategories","data","dispatch","get","then","status","GETCATEGORY","payload","catch","err","getRymindrList","dataTosend","post","GETUSERRYMINDRLIST","console","log","getRymindrListCalendar","user_id","business_code","first_name","last_name","JSON","parse","localStorage","getItem","GETRYMINDRLIST","searchRymindrList","createMessageCenter","unmatch","history","sendAttachment","message_id","seldFiles","img","len","length","i","image","base64","split","extn","name","replace","att_data","attachment","attachment_object","push","dateTosend","message_center_id","deleteAttachment","CREATERYMINDR","updateMessageCenter","undefined","getMessageDetails","GETMESSAGECENTERLIST","getMessageContactsDetail","GETMESSAGECONTACTDETAIL","getMessageDetails1111","getMessageDetailsById","GETMESSAGECENTERLISTBYID","deleteMessage","msgId","message_center_ids","GETMESSAGECENTERLISTAFTERDELETE","getRssFeeds","GETRSSFEEDS"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios';\n\nexport const isLoading = () => {\n  return {\n    type: actionTypes.ISLOADING,\n  };\n};\n\nexport const Success = (response) => {\n  return response;\n};\n\nexport const Fail = (error) => {\n  return {\n    type: actionTypes.ERROR,\n    error: error,\n  };\n};\n\nexport const SuccessMessage = (message) => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE_CENTER,\n    success_message: message,\n  };\n};\n\nexport const getCategories = (data) => {\n  return (dispatch) => {\n    //dispatch(isLoading());\n    Axios()\n      .get('users/getCategoryListMessageCenter')\n      .then((response) => {\n        if (response.data.status === '1') {\n          dispatch(\n            Success({\n              type: actionTypes.GETCATEGORY,\n              payload: response.data.data,\n              //default_cat: response.data.default_cat,\n            })\n          );\n        } else {\n\n          dispatch(Fail(response.data.message));\n        }\n      })\n      .catch((err) => {\n        dispatch(Fail(err.message));\n      });\n  };\n};\n\nexport const getRymindrList = (data) => {\n  return (dispatch) => {\n    const dataTosend = { ...data };\n    Axios()\n      .post('users/getRymindrListForMessage', dataTosend)\n      .then((response) => {\n        if (response.data.status === '1') {\n          dispatch(\n            Success({\n              type: actionTypes.GETUSERRYMINDRLIST,\n              payload: response.data.data,\n              //default_cat: response.data.default_cat,\n            })\n          );\n        } else {\n          dispatch(\n            Success({\n              type: actionTypes.GETUSERRYMINDRLIST,\n              payload: []\n            })\n          )\n        }\n      })\n      .catch((err) => {\n        console.log('getRymindrListForMessage', err.message)\n        dispatch(Fail(err.message));\n      });\n  };\n};\n\nexport const getRymindrListCalendar = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const { user_id, business_code, first_name, last_name } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data };\n      const response = await Axios().post('users/getRymindrListForCalendar', dataTosend);\n      console.log('responsee=action', response);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.GETRYMINDRLIST,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const searchRymindrList = (data) => {\n  // alert('search-action');\n  return (dispatch) => {\n    //dispatch(isLoading());\n    //Axios().get('users/getRymindrListForMessage')\n    const dataTosend = { ...data };\n    Axios()\n      .post('users/getRymindrListForMessage', dataTosend)\n      .then((response) => {\n        if (response.data.status === '1') {\n          dispatch(\n            Success({\n              type: actionTypes.GETRYMINDRLIST,\n              payload: response.data.data,\n              //default_cat: response.data.default_cat,\n            })\n          );\n        } else {\n          dispatch(Fail(response.data.message));\n        }\n      })\n      .catch((err) => {\n        dispatch(Fail(err.message));\n      });\n  };\n};\n\nexport const createMessageCenter = (data, unmatch, history, sendAttachment) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const { user_id, business_code, first_name, last_name } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data };\n      const response = await Axios().post('users/createMessageCenter', dataTosend);\n      if (response.data.status === '1') {\n        const message_id = response.data.data;\n        let seldFiles = [];\n        if (sendAttachment) {\n          var img = sendAttachment;\n          console.log('sendAttachment', sendAttachment);\n          var len = img.length;\n          for (var i = 0; i < len; i++) {\n            if (img[i].type == 'application/pdf') {\n              var image = img[i].base64.split(';base64,');\n              var image = image[1];\n              var extn = img[i].name.split('.');\n            } else if (img.type == '') {\n              var image = img[i].base64.split(';base64,');\n              var image = image[1];\n              var extn = img[i].name.split('.');\n            } else {\n              var image = img[i].base64.replace(/^data:image\\/\\w+;base64,/, '');\n              var extn = img[i].name.split('.');\n            }\n            // let att_data = {\n            //   attachment: image,\n            //   message_center_id: message_id,\n            //   user_id: user_id,\n            //   extn: extn[1],\n            //   attachment_object: img[i].name,\n            // };\n            // await Axios().post('users/messageCenterAttachment', att_data);\n\n            const att_data = {\n              attachment: image,\n              extn: extn[1],\n              attachment_object: img[i].name,\n            };\n            seldFiles.push(att_data);\n          }\n        }\n        let dateTosend = {\n          message_center_id: message_id,\n          user_id: user_id,\n          sendAttachment: seldFiles,\n          deleteAttachment: []\n        };\n        console.log('dateTosend=====', dateTosend);\n        await Axios().post('users/messageCenterAttachment', dateTosend);\n        dispatch(\n          Success({\n            type: actionTypes.CREATERYMINDR,\n            payload: response.data.data,\n          })\n        );\n\n        dispatch(SuccessMessage('Message has been created sucessfully.'));\n        history.push('/message-center');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const updateMessageCenter = (data, unmatch, history, sendAttachment, deleteAttachment) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const { user_id, business_code, first_name, last_name } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data };\n      //console.log('req', data);\n      const response = await Axios().post('users/updateMessageCenter', dataTosend);\n      if (response.data.status === '1') {\n        const message_id = response.data.data;\n        let seldFiles = [];\n        if (sendAttachment) {\n          // const response_att = await Axios().post('users/deleteAttachmentsMessageCenter', dataTosend);\n          var img = sendAttachment;\n          console.log('sendAttachmentAction====', sendAttachment);\n          var len = img.length;\n          for (var i = 0; i < len; i++) {\n            if (img[i].base64 != undefined) {\n              if (img[i].type == 'application/pdf') {\n                var image = img[i].base64.split(';base64,');\n                var image = image[1];\n                var extn = img[i].name.split('.');\n              } else if (img.type == '') {\n                var image = img[i].base64.split(';base64,');\n                var image = image[1];\n                var extn = img[i].name.split('.');\n              } else {\n                var image = img[i].base64.replace(/^data:image\\/\\w+;base64,/, '');\n                var extn = img[i].name.split('.');\n              }\n              // let att_data = {\n              //   attachment: image,\n              //   message_center_id: message_id,\n              //   user_id: user_id,\n              //   extn: extn[1],\n              //   attachment_object: img[i].name, //img[i]\n              // };\n\n\n              // console.log('att_data===', att_data);\n              // await Axios().post('users/updatemessageCenterAttachment', att_data);\n              const att_data = {\n                attachment: image,\n                extn: extn[1],\n                attachment_object: img[i].name,\n              };\n              seldFiles.push(att_data);\n            }\n          }\n        }\n        let dateTosend = {\n          message_center_id: message_id,\n          user_id: user_id,\n          sendAttachment: seldFiles,\n          deleteAttachment: deleteAttachment\n        };\n        console.log('dateTosend=====', dateTosend);\n        await Axios().post('users/messageCenterAttachment', dateTosend);\n        dispatch(\n          Success({\n            type: actionTypes.CREATERYMINDR,\n            payload: response.data.data,\n          })\n        );\n        dispatch(SuccessMessage('Message has been updated sucessfully.'));\n        history.push('/message-center');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getMessageDetails = (data) => {\n  return (dispatch) => {\n    //dispatch(isLoading());\n    const dataTosend = { ...data };\n    Axios()\n      .post('users/getMessageDetails', dataTosend)\n      .then((response) => {\n        if (response.data.status === '1') {\n          dispatch(\n            Success({\n              type: actionTypes.GETMESSAGECENTERLIST,\n              payload: response.data.data,\n              //default_cat: response.data.default_cat,\n            })\n          );\n        } else {\n          dispatch(\n            Success({\n              type: actionTypes.GETMESSAGECENTERLIST,\n              payload: []\n              //default_cat: response.data.default_cat,\n            })\n          );\n          //dispatch(Fail(response.data.message));\n        }\n      })\n      .catch((err) => {\n        dispatch(Fail(err.message));\n      });\n  };\n};\n\nexport const getMessageContactsDetail = (data) => {\n  return (dispatch) => {\n    //dispatch(isLoading());\n    const dataTosend = { ...data };\n    Axios()\n      .post('users/messageCenterDetailsWeb', dataTosend)\n      .then((response) => {\n        if (response.data.status == '1') {\n          dispatch(\n            Success({\n              type: actionTypes.GETMESSAGECONTACTDETAIL,\n              payload: response.data.data,\n            })\n          );\n        } else {\n          dispatch(Fail(response.data.message));\n        }\n      })\n      .catch((err) => {\n        dispatch(Fail(err.message));\n      });\n  };\n};\n\nexport const getMessageDetails1111 = (data) => {\n  return async (dispatch) => {\n    const dataTosend = { ...data };\n    await Axios()\n      .post('users/getMessageDetails', dataTosend)\n      .then((response) => {\n        if (response.data.status === '1') {\n          dispatch(\n            Success({\n              type: actionTypes.GETMESSAGECENTERLIST,\n              payload: response.data.data,\n            })\n          );\n        } else {\n          dispatch(Fail(response.data.message));\n        }\n      })\n      .catch((err) => {\n        dispatch(Fail(err.message));\n      });\n  };\n};\n\nexport const getMessageDetailsById = (data) => {\n  return (dispatch) => {\n    //dispatch(isLoading());\n    const dataTosend = { ...data };\n    Axios()\n      .post('users/getMessageDetailsById', dataTosend)\n      .then((response) => {\n        if (response.data.status === '1') {\n\n          dispatch(\n            Success({\n              type: actionTypes.GETMESSAGECENTERLISTBYID,\n              payload: response.data.data,\n            })\n          );\n        } else {\n          dispatch(Fail(response.data.message));\n        }\n      })\n      .catch((err) => {\n        dispatch(Fail(err.message));\n      });\n  };\n};\n\nexport const deleteMessage = (msgId, user_id) => {\n  return async (dispatch) => {\n    try {\n      const response = await Axios().post('users/deleteMessageCenter', { message_center_ids: msgId });\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.GETMESSAGECENTERLISTAFTERDELETE,\n            payload: response.data.data,\n          })\n        );\n        dispatch(getMessageDetails({ user_id }))\n        dispatch(SuccessMessage('Message has been deleted sucessfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getRssFeeds = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const { user_id, business_code, first_name, last_name } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data };\n      const response = await Axios().post('users/getRssFeeds', dataTosend);\n      if (response.data.status === '1') {\n        //console.log('responsee=action', response);\n        dispatch(\n          Success({\n            type: actionTypes.GETRSSFEEDS,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      // dispatch(Fail(error.message));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}