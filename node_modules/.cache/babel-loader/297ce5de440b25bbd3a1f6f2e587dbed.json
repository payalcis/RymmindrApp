{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nexport const isLoading = () => {\n  return {\n    type: actionTypes.BOOKLIST_ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.BOOKLIST_ERROR,\n    error: error\n  };\n};\nexport const SuccessMessage = message => {\n  return {\n    type: actionTypes.SUCCESS_MESSAGE_BOOK,\n    success_message: message\n  };\n};\nexport const getBookListDetail = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/getevent', data); //console.log(response);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.BOOKLIST_DETAIL,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getUpcommingBookList = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/events', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.BOOKLIST_LIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const acceptStatus = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/acceptstatus', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.STATUS_ACCEPT,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const pendingStatus = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/events', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.STATUS_PENDING,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const delete_booklist = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/delevents', data); // alert(response.data.status);\n\n      if (response.data.status === '1') {\n        await dispatch(getUpcommingBookList({\n          user_id: data.user_id\n        }));\n        dispatch(Success({\n          type: actionTypes.BOOKLIST_DELETE,\n          payload: response.data.data\n        }));\n        dispatch(SuccessMessage('Booking has been deleted successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getUpcommingEventList = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('/events/events', data);\n      let payload;\n\n      if (response.data.status === 1) {\n        payload = response.data.data;\n      } else {\n        payload = response.data;\n      }\n\n      dispatch(Success({\n        type: actionTypes.EVENT_LIST,\n        payload: payload\n      }));\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/booklist.js"],"names":["actionTypes","Axios","isLoading","type","BOOKLIST_ISLOADING","Success","response","Fail","error","BOOKLIST_ERROR","SuccessMessage","message","SUCCESS_MESSAGE_BOOK","success_message","getBookListDetail","data","dispatch","post","status","BOOKLIST_DETAIL","payload","getUpcommingBookList","BOOKLIST_LIST","acceptStatus","STATUS_ACCEPT","pendingStatus","STATUS_PENDING","delete_booklist","user_id","BOOKLIST_DELETE","getUpcommingEventList","EVENT_LIST"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\n\nexport const isLoading = () => {\n    return {\n        type: actionTypes.BOOKLIST_ISLOADING,\n    };\n};\n\nexport const Success = (response) => {\n    return response;\n};\n\nexport const Fail = (error) => {\n    return {\n        type: actionTypes.BOOKLIST_ERROR,\n        error: error,\n    };\n};\n\nexport const SuccessMessage = (message) => {\n    return {\n        type: actionTypes.SUCCESS_MESSAGE_BOOK,\n        success_message: message,\n    };\n};\n\n\n\nexport const getBookListDetail = (data) => {\n\n\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('bookevent/getevent', data);\n\n            //console.log(response);\n\n            if (response.data.status === '1') {\n\n                dispatch(\n                    Success({\n                        type: actionTypes.BOOKLIST_DETAIL,\n                        payload: response.data.data,\n                    })\n                );\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\n\n\n\nexport const getUpcommingBookList = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n\n            const response = await Axios().post('bookevent/events', data);\n\n            if (response.data.status === '1') {\n\n                dispatch(\n                    Success({\n                        type: actionTypes.BOOKLIST_LIST,\n                        payload: response.data.data,\n                    })\n                );\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\nexport const acceptStatus = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n\n            const response = await Axios().post('bookevent/acceptstatus', data);\n\n            if (response.data.status === '1') {\n\n                dispatch(\n                    Success({\n                        type: actionTypes.STATUS_ACCEPT,\n                        payload: response.data.data,\n                    })\n                );\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\nexport const pendingStatus = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n\n            const response = await Axios().post('bookevent/events', data);\n\n            if (response.data.status === '1') {\n\n                dispatch(\n                    Success({\n                        type: actionTypes.STATUS_PENDING,\n                        payload: response.data.data,\n                    })\n                );\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\n\nexport const delete_booklist = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n            const response = await Axios().post('bookevent/delevents', data);\n            // alert(response.data.status);\n            if (response.data.status === '1') {\n\n                await dispatch(getUpcommingBookList({ user_id: data.user_id }));\n\n                dispatch(\n                    Success({\n                        type: actionTypes.BOOKLIST_DELETE,\n                        payload: response.data.data,\n                    })\n                );\n                dispatch(SuccessMessage('Booking has been deleted successfully.'));\n            } else {\n                dispatch(Fail(response.data.message));\n            }\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};\n\nexport const getUpcommingEventList = (data) => {\n    return async(dispatch) => {\n        try {\n            dispatch(isLoading());\n\n            const response = await Axios().post('/events/events', data);\n            let payload;\n            if (response.data.status === 1) {\n                payload = response.data.data;\n\n            } else {\n                payload = response.data;\n            }\n\n            dispatch(\n                Success({\n                    type: actionTypes.EVENT_LIST,\n                    payload: payload,\n                })\n            );\n        } catch (error) {\n            dispatch(Fail(error.message));\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}