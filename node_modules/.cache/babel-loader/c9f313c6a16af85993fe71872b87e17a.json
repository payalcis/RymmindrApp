{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/Dashboard/NewMessage.js\";\nimport { Avatar, Box, Button, Card, CardContent, CardHeader, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@material-ui/core';\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport EventIcon from '@material-ui/icons/Event';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport moment from 'moment';\nimport { useHistory } from 'react-router-dom'; // For firebase chat purpose\n\nimport firebase from 'firebase';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\nconst CardPaperStyled = styled(Card)(({\n  theme\n}) => ({\n  height: '100%'\n}));\nconst TypoHeadingStyled = styled(Typography)(({\n  theme\n}) => ({\n  fontSize: 18,\n  color: theme.palette.primary.main,\n  textTransform: 'uppercase',\n  fontWeight: 700\n}));\nconst AvatarStyled = styled(Avatar)({\n  height: 55,\n  width: 55,\n  marginRight: 10\n});\nconst TypoNameStyled = styled(Typography)({\n  color: '#b3bcc3',\n  fontWeight: 600\n});\nconst TypoTimeStyled = styled(Typography)({\n  color: '#b3bcc3',\n  float: 'right'\n});\n\nconst NewMessage = props => {\n  const history = useHistory();\n  const classes = useStyles();\n  const {\n    user_id,\n    business_code\n  } = JSON.parse(localStorage.getItem('userData'));\n  /* ---------- Chat related code starts ---------- */\n\n  var messageRef = firebase.database().ref();\n  useEffect(() => {\n    listenMessages(); // Clear the rendered chat messages when component is unmounted and mounted again\n    // return () =>\n    // {\n    //     messageRef.off();\n    // }\n  }, []);\n  const [msgNotifications, updateMsgNotifications] = useState([]);\n  const [unreadMsgNotifications, updateUnreadMsgNotifications] = useState([]);\n\n  const listenMessages = () => {\n    messageRef.on('value', function () {\n      let unreadMessages = [];\n      messageRef.orderByChild(\"created_at\").on(\"child_added\", snapshot => {\n        let msgNodes = snapshot.val();\n        let message = Object.values(msgNodes);\n\n        if (message.length > 0) {\n          for (let i = 0; i < message.length; i++) {\n            // Only unread messages will be shown here\n            if (message[i]['message_read_' + user_id] === false) {\n              unreadMessages.push(message[i]);\n            }\n          }\n\n          if (unreadMessages.length > 0) {\n            console.log('unreadMessages====', unreadMessages);\n            updateMsgNotifications(unreadMessages);\n          }\n        }\n      });\n    });\n  }; // Arrange them in order\n\n\n  msgNotifications.sort((a, b) => a.created_at < b.created_at ? 1 : -1);\n  let notification = msgNotifications.slice(0, 5);\n\n  const limitStringCharacters = txtString => {\n    let length = 80;\n    let trimmedString = '';\n\n    if (txtString.length > length) {\n      trimmedString = txtString.substring(0, length);\n      trimmedString = trimmedString.substring(0, trimmedString.lastIndexOf(\" \") + 1) + \" ...\";\n    } else {\n      trimmedString = txtString.substring(0, length);\n    }\n\n    return trimmedString;\n  };\n\n  const convertFrom24To12Format = time24 => {\n    const [sHours, minutes] = time24.match(/([0-9]{1,2}):([0-9]{2})/).slice(1);\n    const period = +sHours < 12 ? 'AM' : 'PM';\n    const hours = +sHours % 12 || 12;\n    return `${hours}:${minutes} ${period}`;\n  };\n  /* ---------- Chat related code ends ---------- */\n\n\n  setTimeout(() => {\n    //console.log('msgNotifications=',msgNotifications);\n    updateUnreadMsgNotifications(msgNotifications);\n  }, 2000);\n  return /*#__PURE__*/React.createElement(CardPaperStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: unreadMsgNotifications.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TypoHeadingStyled, {\n      component: \"span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }, \"New Message\"), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        backgroundColor: '#FF8A00',\n        padding: 8,\n        paddingTop: 3,\n        paddingBottom: 3,\n        borderRadius: 30,\n        fontSize: 11,\n        color: 'white',\n        marginLeft: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, unreadMsgNotifications.length + ' New')) : /*#__PURE__*/React.createElement(TypoHeadingStyled, {\n      component: \"span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, \"New Message\"),\n    action: /*#__PURE__*/React.createElement(Button, {\n      onClick: () => history.push('/live-chat'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, \"View all\"),\n    className: \"cardHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, unreadMsgNotifications.length > 0 ? unreadMsgNotifications.map((msg, index) => {\n    function convertTZ(date, tzString) {\n      return new Date((typeof date === \"string\" ? new Date(date) : date).toLocaleString(\"en-US\", {\n        timeZone: tzString\n      }));\n    }\n\n    let msgCreatedAt = convertTZ(new Date(parseInt(msg.created_at)), \"Europe/London\");\n    let getOnlyTime = new Date(msgCreatedAt).toLocaleTimeString();\n    console.log('msgCreatedAt--', msgCreatedAt); // let msgCreatedAt = new Date(parseInt(msg.created_at)).toUTCString();\n    // msgCreatedAt = msgCreatedAt.split(' ');\n\n    return /*#__PURE__*/React.createElement(ListItem, {\n      alignItems: \"flex-start\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AvatarStyled, {\n      alt: msg.sender_name,\n      src: msg.sender_image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n        width: \"100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(TypoNameStyled, {\n        variant: \"body2\",\n        component: \"span\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 41\n        }\n      }, msg.sender_name), /*#__PURE__*/React.createElement(TypoTimeStyled, {\n        variant: \"caption\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 41\n        }\n      }, \"Sent a message at \", convertFrom24To12Format(getOnlyTime)))),\n      secondary: /*#__PURE__*/React.createElement(Typography, {\n        className: \"mess-multi-line-ellipsis\",\n        variant: \"body1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 37\n        }\n      }, msg.message_type == 'text' ? limitStringCharacters(msg.message) : 'One file received'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 33\n      }\n    }));\n  }) : /*#__PURE__*/React.createElement(ListItem, {\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 21\n    }\n  }, \"No new unread messages.\")))));\n};\n\nNewMessage.propTypes = {\n  data: PropTypes.any.isRequired\n};\nexport default NewMessage;","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/Dashboard/NewMessage.js"],"names":["Avatar","Box","Button","Card","CardContent","CardHeader","List","ListItem","ListItemAvatar","ListItemText","Typography","makeStyles","styled","EventIcon","PropTypes","React","useEffect","useState","ScheduleIcon","moment","useHistory","firebase","useStyles","theme","root","margin","spacing","CardPaperStyled","height","TypoHeadingStyled","fontSize","color","palette","primary","main","textTransform","fontWeight","AvatarStyled","width","marginRight","TypoNameStyled","TypoTimeStyled","float","NewMessage","props","history","classes","user_id","business_code","JSON","parse","localStorage","getItem","messageRef","database","ref","listenMessages","msgNotifications","updateMsgNotifications","unreadMsgNotifications","updateUnreadMsgNotifications","on","unreadMessages","orderByChild","snapshot","msgNodes","val","message","Object","values","length","i","push","console","log","sort","a","b","created_at","notification","slice","limitStringCharacters","txtString","trimmedString","substring","lastIndexOf","convertFrom24To12Format","time24","sHours","minutes","match","period","hours","setTimeout","backgroundColor","padding","paddingTop","paddingBottom","borderRadius","marginLeft","map","msg","index","convertTZ","date","tzString","Date","toLocaleString","timeZone","msgCreatedAt","parseInt","getOnlyTime","toLocaleTimeString","sender_name","sender_image","message_type","propTypes","data","any","isRequired"],"mappings":"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","sourcesContent":["import {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\n\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport EventIcon from '@material-ui/icons/Event';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport moment from 'moment';\nimport { useHistory } from 'react-router-dom';\n\n// For firebase chat purpose\nimport firebase from 'firebase';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst CardPaperStyled = styled(Card)(({ theme }) => ({\n  height: '100%',\n}));\n\nconst TypoHeadingStyled = styled(Typography)(({ theme }) => ({\n  fontSize: 18,\n  color: theme.palette.primary.main,\n  textTransform: 'uppercase',\n  fontWeight: 700,\n}));\nconst AvatarStyled = styled(Avatar)({\n  height: 55,\n  width: 55,\n  marginRight: 10,\n});\n\nconst TypoNameStyled = styled(Typography)({\n  color: '#b3bcc3',\n  fontWeight: 600,\n});\n\nconst TypoTimeStyled = styled(Typography)({\n  color: '#b3bcc3',\n  float: 'right',\n});\n\nconst NewMessage = (props) => {\n  const history = useHistory();\n  const classes = useStyles();\n\n  const { user_id, business_code } = JSON.parse(localStorage.getItem('userData'));\n\n/* ---------- Chat related code starts ---------- */\n\nvar messageRef = firebase.database().ref();\nuseEffect(() => {\n  listenMessages();\n\n  // Clear the rendered chat messages when component is unmounted and mounted again\n  // return () =>\n  // {\n  //     messageRef.off();\n  // }\n}, []);\n\nconst [msgNotifications, updateMsgNotifications] = useState([]);\nconst [unreadMsgNotifications, updateUnreadMsgNotifications] = useState([]);\n\nconst listenMessages = () => {\n    messageRef.on('value', function() {\n        let unreadMessages = [];\n        \n        messageRef.orderByChild(\"created_at\").on(\"child_added\", snapshot => {\n\n            let msgNodes = snapshot.val();\n            let message = Object.values(msgNodes);\n            if(message.length > 0) {\n              for(let i=0; i<message.length; i++)\n              {\n                  // Only unread messages will be shown here\n                  if( message[i]['message_read_'+user_id] === false )\n                  {\n                      unreadMessages.push(message[i]);\n                  }\n              }\n              if(unreadMessages.length > 0 ) {\n\n                console.log('unreadMessages====',unreadMessages);\n                updateMsgNotifications(unreadMessages);\n              }\n            }\n        });\n    });\n}\n\n// Arrange them in order\nmsgNotifications.sort((a, b) => (a.created_at < b.created_at) ? 1 : -1);\nlet notification = msgNotifications.slice(0, 5);\n\nconst limitStringCharacters = (txtString) => {\n    let length = 80;\n\n    let trimmedString = '';\n    if( txtString.length > length )\n    {\n        trimmedString = txtString.substring(0, length);\n        trimmedString = trimmedString.substring(0, trimmedString.lastIndexOf(\" \") + 1) + \" ...\";\n    }\n    else\n    {\n        trimmedString = txtString.substring(0, length);\n    }\n\n    return trimmedString;\n}\n\nconst convertFrom24To12Format = (time24) => {\n    const [sHours, minutes] = time24.match(/([0-9]{1,2}):([0-9]{2})/).slice(1);\n    const period = +sHours < 12 ? 'AM' : 'PM';\n    const hours = +sHours % 12 || 12;\n\n    return `${hours}:${minutes} ${period}`;\n  }\n\n/* ---------- Chat related code ends ---------- */\n\nsetTimeout(\n  () => {\n    //console.log('msgNotifications=',msgNotifications);\n    updateUnreadMsgNotifications(msgNotifications)\n  \n  },\n  2000\n);\n\n  return (\n    <CardPaperStyled>\n      <CardHeader\n        title={\n          unreadMsgNotifications.length > 0 ?\n            <><TypoHeadingStyled component=\"span\">New Message</TypoHeadingStyled>\n            <span style={{backgroundColor: '#FF8A00', padding: 8, paddingTop: 3, paddingBottom: 3, borderRadius: 30, fontSize: 11, color: 'white', marginLeft: 10}}>{unreadMsgNotifications.length + ' New'}</span></>\n          :\n            <TypoHeadingStyled component=\"span\">New Message</TypoHeadingStyled>\n        }\n        action={<Button onClick={() => history.push('/live-chat')}>View all</Button>}\n        className=\"cardHeader\"\n      />\n      <CardContent>\n        <List className={classes.root}>\n            {\n                ( unreadMsgNotifications.length > 0 )\n                ?\n                    unreadMsgNotifications.map((msg, index) => {\n\n\n                      function convertTZ(date, tzString) {\n                        return new Date((typeof date === \"string\" ? new Date(date) : date).toLocaleString(\"en-US\", {timeZone: tzString}));   \n                    }\n                    \n                    let msgCreatedAt = convertTZ(new Date(parseInt(msg.created_at)),\"Europe/London\");\n                    \n                    let getOnlyTime = new Date(msgCreatedAt).toLocaleTimeString()\n                    console.log('msgCreatedAt--',msgCreatedAt)\n                        // let msgCreatedAt = new Date(parseInt(msg.created_at)).toUTCString();\n                        // msgCreatedAt = msgCreatedAt.split(' ');\n\n                        return (\n                            <ListItem alignItems=\"flex-start\" key={index}>\n                                <ListItemAvatar>\n                                <AvatarStyled alt={msg.sender_name} src={msg.sender_image} />\n                                </ListItemAvatar>\n                                <ListItemText\n                                primary={\n                                    <>\n                                    <Box width=\"100%\">\n                                        <TypoNameStyled variant=\"body2\" component=\"span\">\n                                            {msg.sender_name}\n                                        </TypoNameStyled>\n                                        <TypoTimeStyled variant=\"caption\">Sent a message at {convertFrom24To12Format(getOnlyTime)}</TypoTimeStyled>\n                                    </Box>\n                                    </>\n                                }\n                                secondary={\n                                    <Typography  className='mess-multi-line-ellipsis' variant=\"body1\">\n                                        {\n                                            ( msg.message_type == 'text' )\n                                            ?\n                                                limitStringCharacters(msg.message)\n                                            :\n                                                'One file received'\n                                        }\n                                    </Typography>\n                                }\n                                />\n                            </ListItem>\n                        )\n                    })\n                :\n                <ListItem alignItems=\"flex-start\">\n                    <Typography variant=\"body1\">\n                        No new unread messages.\n                    </Typography>\n                </ListItem>\n            }\n        </List>\n      </CardContent>\n    </CardPaperStyled>\n  );\n};\n\nNewMessage.propTypes = {\n  data: PropTypes.any.isRequired,\n};\n\nexport default NewMessage;\n"]},"metadata":{},"sourceType":"module"}