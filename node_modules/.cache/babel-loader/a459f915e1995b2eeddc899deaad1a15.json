{"ast":null,"code":"var _jsxFileName = \"/var/www/html/RymindrAppNew/src/container/DownloadExamAttemptInOne/DownloadExamAttemptInOne.js\";\nimport * as actions from '../../store/actions/index';\nimport { Attachment, Replay, Send, Headset, Videocam, Description } from '@material-ui/icons';\nimport { Box, Button, Divider, Paper, Grid, List, ListItem, ListItemText, ListItemAvatar, Avatar, Typography, InputAdornment, TextField, IconButton, Hidden, MenuItem, Badge, Menu, Dialog, DialogContent, DialogTitle, AppBar, Tabs, Tab, CardMedia } from '@material-ui/core';\nimport { Link, Redirect, useParams } from 'react-router-dom';\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\nimport { ReactFormBuilder, ElementStore, ReactFormGenerator } from 'react-form-builder2';\nimport * as variables from '../../../src/variables';\nimport axios from 'axios';\nimport { getFormBuilderList, getSubmittedFormsList } from '../../store/actions/formBuilder';\nconst GridStyled = styled(Grid)({\n  height: '100vh'\n});\nconst PaperStyled = styled(Paper)({\n  width: 2000,\n  textAlign: 'center',\n  padding: 40,\n  borderRadius: 10\n});\nconst TypoStyled = styled(Typography)(() => ({\n  fontSize: 24,\n  marginTop: 20,\n  marginBottom: 30,\n  fontWeight: 'bold'\n}));\nconst LinkStyled = styled(Link)(({\n  theme\n}) => ({\n  color: theme.palette.primary.main,\n  textDecoration: 'none'\n}));\nconst TypoHeadStyledError = styled(Typography)(({\n  theme\n}) => ({\n  fontSize: 24,\n  color: 'red',\n  fontWeight: 'bold',\n  textAlign: 'center'\n}));\nconst TypoHeadStyled = styled(Typography)(({\n  theme\n}) => ({\n  fontSize: 24,\n  color: theme.palette.primary.main,\n  fontWeight: 'bold',\n  textAlign: 'center'\n}));\nconst ButtonStyled = styled(Button)(({\n  theme\n}) => ({\n  background: '#FFA502'\n}));\nconst TypoContentStyled = styled(Typography)(({\n  theme\n}) => ({\n  fontSize: 20,\n  color: theme.palette.text.primary,\n  fontWeight: 'bold'\n}));\nconst FormFields = {\n  email: '',\n  password: ''\n};\n\nconst DownloadExamAttemptInOne = props => {\n  const {\n    user_id,\n    business_code,\n    first_name,\n    last_name,\n    default_category\n  } = JSON.parse(localStorage.getItem('userData'));\n  const {\n    enqueueSnackbar,\n    submittedformsdata,\n    getSubmittedFormsList\n  } = props;\n  const [showForm, setShowForm] = useState([]);\n  const [isSubmitted, setIsSubmitted] = useState('');\n  const [getError, setError] = useState('');\n  const {\n    exam_id,\n    contact_id\n  } = useParams();\n  useEffect(() => {\n    getSubmittedFormsList({\n      exam_id: exam_id\n    });\n  }, [getSubmittedFormsList]);\n  useEffect(() => {\n    if (submittedformsdata) {\n      submittedformsdata.map(function (item) {\n        let getForm = JSON.parse(item.builder_data).task_data;\n        item.updatedBuilderData = getForm;\n        let getFormSubmitted = null;\n\n        if (item.form_data) {\n          getFormSubmitted = JSON.parse(item.form_data);\n        }\n\n        item.updatedSubmittedData = getFormSubmitted;\n        console.log('item=====', item);\n      });\n      console.log('submittedformsdata=====', submittedformsdata);\n      setShowForm(submittedformsdata);\n      setTimeout(function () {\n        window.print();\n      }, 1000);\n      setTimeout(function () {\n        window.close();\n      }, 1000);\n    }\n  }, [submittedformsdata]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, showForm !== null && showForm.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-head-ttl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, showForm[0].title ? showForm[0].title : '') : null, showForm !== null && showForm.length > 0 ? showForm.map((item, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, item && item.updatedBuilderData && item.updatedBuilderData.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TypoContentStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 23\n    }\n  }, item.first_name, \" \", item.last_name, \" : \", item.is_delete == '0' ? 'Submitted' : 'Declined'), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 43\n    }\n  }), item.mobile_no, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 23\n    }\n  }), item.is_delete == '0' ? /*#__PURE__*/React.createElement(ReactFormGenerator, {\n    answer_data: item.updatedSubmittedData //action_name=\"Save\"\n    ,\n    form_action: \"/\",\n    form_method: \"POST\",\n    variables: variables,\n    data: item.updatedBuilderData,\n    hide_actions: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 23\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  })) : null), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }))) : /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, \"Data Loading.\"));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.rymidr.loading,\n    error: state.rymidr.error,\n    success_message2: state.formBuilder.success_message2,\n    submittedformsdata: state.formBuilder.submittedformsdata\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getFormBuilderList: data => dispatch(getFormBuilderList(data)),\n    getSubmittedFormsList: data => dispatch(getSubmittedFormsList(data))\n  };\n};\n\nDownloadExamAttemptInOne.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  getFormBuilderList: PropTypes.func.isRequired,\n  getSubmittedFormsList: PropTypes.func.isRequired,\n  success_message2: PropTypes.any.isRequired,\n  enqueueSnackbar: PropTypes.func.isRequired,\n  submittedformsdata: PropTypes.array.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(DownloadExamAttemptInOne));","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/container/DownloadExamAttemptInOne/DownloadExamAttemptInOne.js"],"names":["actions","Attachment","Replay","Send","Headset","Videocam","Description","Box","Button","Divider","Paper","Grid","List","ListItem","ListItemText","ListItemAvatar","Avatar","Typography","InputAdornment","TextField","IconButton","Hidden","MenuItem","Badge","Menu","Dialog","DialogContent","DialogTitle","AppBar","Tabs","Tab","CardMedia","Link","Redirect","useParams","React","useEffect","useState","PropTypes","connect","styled","withSnackbar","ReactFormBuilder","ElementStore","ReactFormGenerator","variables","axios","getFormBuilderList","getSubmittedFormsList","GridStyled","height","PaperStyled","width","textAlign","padding","borderRadius","TypoStyled","fontSize","marginTop","marginBottom","fontWeight","LinkStyled","theme","color","palette","primary","main","textDecoration","TypoHeadStyledError","TypoHeadStyled","ButtonStyled","background","TypoContentStyled","text","FormFields","email","password","DownloadExamAttemptInOne","props","user_id","business_code","first_name","last_name","default_category","JSON","parse","localStorage","getItem","enqueueSnackbar","submittedformsdata","showForm","setShowForm","isSubmitted","setIsSubmitted","getError","setError","exam_id","contact_id","map","item","getForm","builder_data","task_data","updatedBuilderData","getFormSubmitted","form_data","updatedSubmittedData","console","log","setTimeout","window","print","close","length","title","index","is_delete","mobile_no","mapStateToProps","state","loading","rymidr","error","success_message2","formBuilder","mapDispatchToProps","dispatch","data","propTypes","bool","isRequired","string","func","any","array"],"mappings":"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","sourcesContent":["import * as actions from '../../store/actions/index';\n\nimport { Attachment, Replay, Send, Headset, Videocam, Description } from '@material-ui/icons';\nimport {\n  Box,\n  Button,\n  Divider,\n  Paper,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  Typography,\n  InputAdornment,\n  TextField,\n  IconButton,\n  Hidden,\n  MenuItem,\n  Badge,\n  Menu,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  AppBar,\n  Tabs,\n  Tab,\n  CardMedia,\n} from '@material-ui/core';\nimport { Link, Redirect, useParams } from 'react-router-dom';\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { styled } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\n\nimport { ReactFormBuilder, ElementStore, ReactFormGenerator } from 'react-form-builder2';\nimport * as variables from '../../../src/variables';\nimport axios from 'axios';\nimport { getFormBuilderList, getSubmittedFormsList } from '../../store/actions/formBuilder';\nconst GridStyled = styled(Grid)({\n  height: '100vh',\n});\n\nconst PaperStyled = styled(Paper)({\n  width: 2000,\n  textAlign: 'center',\n  padding: 40,\n  borderRadius: 10,\n});\n\nconst TypoStyled = styled(Typography)(() => ({\n  fontSize: 24,\n  marginTop: 20,\n  marginBottom: 30,\n  fontWeight: 'bold',\n}));\n\nconst LinkStyled = styled(Link)(({ theme }) => ({\n  color: theme.palette.primary.main,\n  textDecoration: 'none',\n}));\n\nconst TypoHeadStyledError = styled(Typography)(({ theme }) => ({\n  fontSize: 24,\n  color: 'red',\n  fontWeight: 'bold',\n  textAlign: 'center',\n}));\n\nconst TypoHeadStyled = styled(Typography)(({ theme }) => ({\n  fontSize: 24,\n  color: theme.palette.primary.main,\n  fontWeight: 'bold',\n  textAlign: 'center',\n}));\n\nconst ButtonStyled = styled(Button)(({ theme }) => ({\n  background: '#FFA502',\n}));\n\nconst TypoContentStyled = styled(Typography)(({ theme }) => ({\n  fontSize: 20,\n  color: theme.palette.text.primary,\n  fontWeight: 'bold',\n}));\nconst FormFields = { email: '', password: '' };\nconst DownloadExamAttemptInOne = (props) => {\n  const { user_id, business_code, first_name, last_name, default_category } = JSON.parse(\n    localStorage.getItem('userData')\n  );\n  const { enqueueSnackbar, submittedformsdata, getSubmittedFormsList } = props;\n  const [showForm, setShowForm] = useState([]);\n\n  const [isSubmitted, setIsSubmitted] = useState('');\n\n  const [getError, setError] = useState('');\n  const { exam_id, contact_id } = useParams();\n\n  useEffect(() => {\n    getSubmittedFormsList({ exam_id: exam_id });\n  }, [getSubmittedFormsList]);\n  useEffect(() => {\n    if (submittedformsdata) {\n      submittedformsdata.map(function (item) {\n        let getForm = JSON.parse(item.builder_data).task_data;\n        item.updatedBuilderData = getForm;\n\n        let getFormSubmitted = null;\n        if (item.form_data) {\n          getFormSubmitted = JSON.parse(item.form_data);\n        }\n        item.updatedSubmittedData = getFormSubmitted;\n        console.log('item=====', item);\n      });\n\n      console.log('submittedformsdata=====', submittedformsdata);\n\n      setShowForm(submittedformsdata);\n\n      setTimeout(function () {\n        window.print();\n      }, 1000);\n      setTimeout(function () {\n        window.close();\n      }, 1000);\n    }\n  }, [submittedformsdata]);\n  return (\n    <>\n      {/* <ListItem alignItems=\"flex-start\"> */}\n      {showForm !== null && showForm.length > 0 ? (\n        <div className=\"main-head-ttl\">{showForm[0].title ? showForm[0].title : ''}</div>\n      ) : null}\n      {showForm !== null && showForm.length > 0 ? (\n        showForm.map((item, index) => (\n          <>\n            {/* <Hidden smDown implementation=\"css\"> */}\n              <ListItem>\n                {item && item.updatedBuilderData && item.updatedBuilderData.length > 0 ? (\n                  <>\n                    {/* <Grid item xs={12} className=\"form_preview\">\n                      <ReactFormGenerator\n                        answer_data={item.updatedSubmittedData}\n                        //action_name=\"Save\"\n                        form_action=\"/\"\n                        form_method=\"POST\"\n                        variables={variables}\n                        data={item.updatedBuilderData}\n                        hide_actions={true}\n                      />\n                    </Grid> */}\n\n                    <Grid item xs={12}>\n                      <TypoContentStyled>\n                        {item.first_name} {item.last_name} : {item.is_delete == '0' ? 'Submitted' : 'Declined'}\n                      </TypoContentStyled><br/>\n                        {item.mobile_no}\n                      <hr />\n                      {\n                        item.is_delete=='0' ?\n                      \n                      <ReactFormGenerator\n                        answer_data={item.updatedSubmittedData}\n                        //action_name=\"Save\"\n                        form_action=\"/\"\n                        form_method=\"POST\"\n                        variables={variables}\n                        data={item.updatedBuilderData}\n                        hide_actions={true}\n                      />:\n                      null\n                    }\n                    </Grid>\n                    {/* <Divider variant=\"inset\" component=\"li\" /> */}\n                    <hr />\n                  </>\n                ) : null}\n              </ListItem>\n              <hr />\n              <hr />\n            {/* </Hidden> */}\n          </>\n        ))\n      ) : (\n        <List>Data Loading.</List>\n      )}\n      {/* <Grid item xs={12}>\n          <div className=\"main-head-ttl\">{showForm.title ? showForm.title : ''}</div>\n          <TypoContentStyled>Contactname : {showForm.is_delete == '0' ? 'Submitted' : 'Declined'}</TypoContentStyled>\n          <hr />\n          {showForm && showForm.builder_data && showForm.builder_data.length > 0 ? (\n            <>\n              <Grid item xs={12} className=\"form_preview\">\n                <ReactFormGenerator\n                  answer_data={showForm.form_data}\n                  //action_name=\"Save\"\n                  form_action=\"/\"\n                  form_method=\"POST\"\n                  variables={variables}\n                  data={showForm.builder_data}\n                  hide_actions={true}\n                />\n              </Grid>\n            </>\n          ) : null}\n        </Grid> */}\n      {/* </ListItem> */}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.rymidr.loading,\n    error: state.rymidr.error,\n    success_message2: state.formBuilder.success_message2,\n    submittedformsdata: state.formBuilder.submittedformsdata,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getFormBuilderList: (data) => dispatch(getFormBuilderList(data)),\n    getSubmittedFormsList: (data) => dispatch(getSubmittedFormsList(data)),\n  };\n};\n\nDownloadExamAttemptInOne.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  getFormBuilderList: PropTypes.func.isRequired,\n  getSubmittedFormsList: PropTypes.func.isRequired,\n  success_message2: PropTypes.any.isRequired,\n  enqueueSnackbar: PropTypes.func.isRequired,\n  submittedformsdata: PropTypes.array.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(DownloadExamAttemptInOne));\n"]},"metadata":{},"sourceType":"module"}