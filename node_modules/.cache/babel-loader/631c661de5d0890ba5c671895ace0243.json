{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios'; //BOOKING ACTIONS\n//export const BOOK_ISLOADING = 'BOOK_ISLOADING';\n//export const BOOK_ERROR = 'BOOK_ERROR';\n//export const BOOK_GROUPLIST = 'BOOK_GROUPLIST';\n//export const BOOK_BUSINESSUSERS = 'BOOK_BUSINESSUSERS';\n//export const BOOK_CREATERYMINDR = 'BOOK_CREATERYMINDR';\n//BOOKING ACTIONS\n\nexport const SuccessTerm = success => {\n  return {\n    type: actionTypes.TERM_SUCESS,\n    success: success\n  };\n};\nexport const SuccessHoliday = success => {\n  return {\n    type: actionTypes.Holiday_SUCESS,\n    success: success\n  };\n};\nexport const isLoading = () => {\n  return {\n    type: actionTypes.TERM_ISLOADING\n  };\n};\nexport const Success = response => {\n  return response;\n};\nexport const SuccessMessage = message => {\n  return {\n    type: actionTypes.SUCCESS_TERM_HOLIDAY,\n    success_message: message\n  };\n};\nexport const Fail = error => {\n  return {\n    type: actionTypes.TERM_ERROR,\n    error: error\n  };\n};\nexport const updateTerm = (data, unmatch, history, sendAttachment, user_Id) => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const {\n        user_id,\n        business_code,\n        first_name,\n        last_name\n      } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data\n      };\n      const qiscuss = '';\n      const response = await Axios().post('bookevent/updateterm', dataTosend);\n\n      if (response.data.status === '1') {\n        const rymindr_id = response.data.data.id;\n\n        if (unmatch) {// const sendInvitation = await Axios().post('users/inviteForRymindr', inviteTorymidr);\n        }\n\n        dispatch(Success({\n          type: actionTypes.TERM_UPDATERYMINDR,\n          payload: response.data.data\n        }));\n        dispatch(SuccessTerm(response.data.message));\n        dispatch(getUpcommingTerm(user_Id));\n        history.push('/term-dates-holidays');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const createTerm = (data, unmatch, history, sendAttachment) => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const {\n        user_id,\n        business_code,\n        first_name,\n        last_name\n      } = JSON.parse(localStorage.getItem('userData'));\n      const dataTosend = { ...data\n      };\n      const qiscuss = '';\n      const response = await Axios().post('bookevent/createterm', dataTosend);\n\n      if (response.data.status === '1') {\n        const rymindr_id = response.data.data.id;\n\n        if (unmatch) {// const sendInvitation = await Axios().post('users/inviteForRymindr', inviteTorymidr);\n        }\n\n        dispatch(Success({\n          type: actionTypes.TERM_CREATERYMINDR,\n          payload: response.data.data\n        }));\n        dispatch(SuccessHoliday(response.data.message));\n        dispatch(getUpcommingTerm(user_id));\n        history.push('/term-dates-holidays');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const getUpcommingTerm = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/termlist', data);\n\n      if (response.data.status === '1') {\n        dispatch(Success({\n          type: actionTypes.TERM_LIST,\n          payload: response.data.data\n        }));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\nexport const delete_term = data => {\n  return async dispatch => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/deleteterm', data); // alert(response.data.status);\n\n      if (response.data.status === '1') {\n        await dispatch(getUpcommingTerm({\n          user_id: data.user_id\n        }));\n        dispatch(Success({\n          type: actionTypes.TERM_DELETE,\n          payload: response.data.data\n        }));\n        dispatch(SuccessMessage('Term has been deleted successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n/*\nexport const inviteAndAddMobile = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/inviteAndAddMobile', data);\n\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.INVITEANDADDMOBILE,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getUpcommingRymindrs = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/getUpcommingRymindr', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        let upcomingry = [];\n        record.forEach((item) => {\n          upcomingry.push(item.remindr);\n        });\n\n        var merged = [].concat.apply([], upcomingry);\n\n        console.log('upcoming', upcomingry, merged);\n        if (record.length > 0) {\n          const reqData = {\n            user_id: data.user_id,\n            rymindr_id: merged[0].rymindr_id,\n          };\n          await dispatch(getRymidrDetails(reqData));\n        } else {\n          dispatch(\n            Success({\n              type: actionTypes.GETRYMINDRDETAILS,\n              payload: null,\n            })\n          );\n        }\n\n        dispatch(\n          Success({\n            type: actionTypes.GETUPCOMMINGRYMINDR,\n            payload: { record, upcomingList: merged.length > 0 ? merged : [] },\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getRymidrDetails = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/getRymindrDetail', data);\n\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.GETRYMINDRDETAILS,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const delete_rymindr = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const qiscus_id = data.qiscus_id;\n      delete data.qiscus_id;\n\n      const response = await Axios().post('users/deleteRymindr', data);\n      if (response.data.status === '1') {\n        // const qicsusconfig = { headers: { QISCUS_SDK_SECRET: '434e6d04f43c59a9d96666bddcb5c3e0' } };\n        // let dataToSendQicusRemove = {\n        //   emails: data.user_id.split(','),\n        //   room_id: qiscus_id,\n        // };\n\n        // await axios.post(\n        //   'https://rymindr-fmgafzuj8sxps.qiscus.com/api/v2/rest/remove_room_participants',\n        //   dataToSendQicusRemove,\n        //   qicsusconfig\n        // );\n        await dispatch(getUpcommingRymindrs({ user_id: data.user_id }));\n\n        dispatch(\n          Success({\n            type: actionTypes.DELETERYMINDR,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const rymindr_action = (data) => {\n  return async (dispatch) => {\n    try {\n      const dataTosend = {\n        rymindr_id: '18105',\n        status: 2,\n        user_id: '2892',\n        friend_id: '2891',\n        user_name: 'Demolive1 ',\n        recr_rymindr_id: '18103',\n      };\n\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/acceptRequestRymindr', data);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.RYMINDRACTION,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n*/","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/src/store/actions/bookterm.js"],"names":["actionTypes","Axios","axios","SuccessTerm","success","type","TERM_SUCESS","SuccessHoliday","Holiday_SUCESS","isLoading","TERM_ISLOADING","Success","response","SuccessMessage","message","SUCCESS_TERM_HOLIDAY","success_message","Fail","error","TERM_ERROR","updateTerm","data","unmatch","history","sendAttachment","user_Id","dispatch","user_id","business_code","first_name","last_name","JSON","parse","localStorage","getItem","dataTosend","qiscuss","post","status","rymindr_id","id","TERM_UPDATERYMINDR","payload","getUpcommingTerm","push","createTerm","TERM_CREATERYMINDR","TERM_LIST","delete_term","TERM_DELETE"],"mappings":"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":["import * as actionTypes from './actionTypes';\nimport Axios from '../../helper/axios';\nimport axios from 'axios';\n\n\n//BOOKING ACTIONS\n//export const BOOK_ISLOADING = 'BOOK_ISLOADING';\n//export const BOOK_ERROR = 'BOOK_ERROR';\n//export const BOOK_GROUPLIST = 'BOOK_GROUPLIST';\n//export const BOOK_BUSINESSUSERS = 'BOOK_BUSINESSUSERS';\n//export const BOOK_CREATERYMINDR = 'BOOK_CREATERYMINDR';\n//BOOKING ACTIONS\n\nexport const SuccessTerm =(success) =>{\n  return {\n     type: actionTypes.TERM_SUCESS,\n     success:success\n  }\n}\nexport const SuccessHoliday =(success) =>{\n  return {\n     type: actionTypes.Holiday_SUCESS,\n     success:success\n  }\n}\n\n\n\nexport const isLoading = () => {\n  return {\n    type: actionTypes.TERM_ISLOADING,\n  };\n};\n\nexport const Success = (response) => {\n  return response;\n};\n\nexport const SuccessMessage = (message) => {\n  return {\n    type: actionTypes.SUCCESS_TERM_HOLIDAY,\n    success_message: message,\n  };\n};\n\nexport const Fail = (error) => {\n  return {\n    type: actionTypes.TERM_ERROR,\n    error: error,\n  };\n};\n\n\n\nexport const updateTerm = (data, unmatch, history, sendAttachment,user_Id) => {\n\n return async (dispatch) => {\n\n    try {\n      dispatch(isLoading());\n      const { user_id, business_code, first_name, last_name } = JSON.parse(localStorage.getItem('userData'));\n\n      const dataTosend = { ...data };\n      const qiscuss='';\n      const response = await Axios().post('bookevent/updateterm', dataTosend);\n      if (response.data.status === '1') {\n        const rymindr_id = response.data.data.id;\n\n        if (unmatch) {\n         // const sendInvitation = await Axios().post('users/inviteForRymindr', inviteTorymidr);\n        }\n        dispatch(\n          Success({\n            type: actionTypes.TERM_UPDATERYMINDR,\n            payload: response.data.data,\n          })\n        );\n        dispatch(SuccessTerm(response.data.message));\n        dispatch(getUpcommingTerm(user_Id));\n        history.push('/term-dates-holidays');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n\n\n  };\n}\n\nexport const createTerm = (data, unmatch, history, sendAttachment) => {\n  return async (dispatch) => {\n\n    try {\n      dispatch(isLoading());\n      const { user_id, business_code, first_name, last_name } = JSON.parse(localStorage.getItem('userData'));\n\n      const dataTosend = { ...data };\n      const qiscuss='';\n      const response = await Axios().post('bookevent/createterm', dataTosend);\n\n      if (response.data.status === '1') {\n        const rymindr_id = response.data.data.id;\n\n        if (unmatch) {\n         // const sendInvitation = await Axios().post('users/inviteForRymindr', inviteTorymidr);\n        }\n\n        dispatch(\n          Success({\n            type: actionTypes.TERM_CREATERYMINDR,\n            payload: response.data.data,\n          })\n        );\n         dispatch(SuccessHoliday(response.data.message));\n         dispatch(getUpcommingTerm(user_id));\n        history.push('/term-dates-holidays');\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n\n\n  };\n};\n\nexport const getUpcommingTerm = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/termlist', data);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.TERM_LIST,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\n\nexport const delete_term = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const response = await Axios().post('bookevent/deleteterm', data);\n       // alert(response.data.status);\n      if (response.data.status === '1') {\n\n        await dispatch(getUpcommingTerm({ user_id: data.user_id }));\n\n        dispatch(\n          Success({\n            type: actionTypes.TERM_DELETE,\n            payload: response.data.data,\n          })\n        );\n\n        dispatch(SuccessMessage('Term has been deleted successfully.'));\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\n\n\n\n\n\n\n/*\nexport const inviteAndAddMobile = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/inviteAndAddMobile', data);\n\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.INVITEANDADDMOBILE,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getUpcommingRymindrs = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/getUpcommingRymindr', data);\n\n      if (response.data.status === '1') {\n        const record = response.data.data;\n        let upcomingry = [];\n        record.forEach((item) => {\n          upcomingry.push(item.remindr);\n        });\n\n        var merged = [].concat.apply([], upcomingry);\n\n        console.log('upcoming', upcomingry, merged);\n        if (record.length > 0) {\n          const reqData = {\n            user_id: data.user_id,\n            rymindr_id: merged[0].rymindr_id,\n          };\n          await dispatch(getRymidrDetails(reqData));\n        } else {\n          dispatch(\n            Success({\n              type: actionTypes.GETRYMINDRDETAILS,\n              payload: null,\n            })\n          );\n        }\n\n        dispatch(\n          Success({\n            type: actionTypes.GETUPCOMMINGRYMINDR,\n            payload: { record, upcomingList: merged.length > 0 ? merged : [] },\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const getRymidrDetails = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/getRymindrDetail', data);\n\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.GETRYMINDRDETAILS,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const delete_rymindr = (data) => {\n  return async (dispatch) => {\n    try {\n      dispatch(isLoading());\n      const qiscus_id = data.qiscus_id;\n      delete data.qiscus_id;\n\n      const response = await Axios().post('users/deleteRymindr', data);\n      if (response.data.status === '1') {\n        // const qicsusconfig = { headers: { QISCUS_SDK_SECRET: '434e6d04f43c59a9d96666bddcb5c3e0' } };\n        // let dataToSendQicusRemove = {\n        //   emails: data.user_id.split(','),\n        //   room_id: qiscus_id,\n        // };\n\n        // await axios.post(\n        //   'https://rymindr-fmgafzuj8sxps.qiscus.com/api/v2/rest/remove_room_participants',\n        //   dataToSendQicusRemove,\n        //   qicsusconfig\n        // );\n        await dispatch(getUpcommingRymindrs({ user_id: data.user_id }));\n\n        dispatch(\n          Success({\n            type: actionTypes.DELETERYMINDR,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n\nexport const rymindr_action = (data) => {\n  return async (dispatch) => {\n    try {\n      const dataTosend = {\n        rymindr_id: '18105',\n        status: 2,\n        user_id: '2892',\n        friend_id: '2891',\n        user_name: 'Demolive1 ',\n        recr_rymindr_id: '18103',\n      };\n\n      dispatch(isLoading());\n\n      const response = await Axios().post('users/acceptRequestRymindr', data);\n      if (response.data.status === '1') {\n        dispatch(\n          Success({\n            type: actionTypes.RYMINDRACTION,\n            payload: response.data.data,\n          })\n        );\n      } else {\n        dispatch(Fail(response.data.message));\n      }\n    } catch (error) {\n      dispatch(Fail(error.message));\n    }\n  };\n};\n*/\n"]},"metadata":{},"sourceType":"module"}