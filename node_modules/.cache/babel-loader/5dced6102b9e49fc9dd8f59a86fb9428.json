{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-use-before-define */\n\nfunction regg() {\n  var registry = {};\n  var self = {\n    register: register,\n    list: list,\n    get: get\n  };\n  /**\r\n   * Registers a entry and make it read only\r\n   * @param {String} name To get the entry by\r\n   * @param {Object} entry What you want to register\r\n   */\n\n  function register(name, entry) {\n    if (!name) {\n      throw new Error('You must provide a valid name for this entry.');\n    }\n\n    if (registry[name] !== undefined) {\n      throw new Error(\"'\".concat(name, \"' already registered\"));\n    }\n\n    if (!entry) {\n      throw new Error(\"You must provide something to register as '\".concat(name, \"'\"));\n    }\n\n    registry[name] = entry;\n    return self;\n  }\n\n  function get(name) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!registry.hasOwnProperty(name)) {\n      console.error(\"No such entry '\".concat(name, \"'\"));\n    }\n\n    return registry[name];\n  }\n\n  function list() {\n    return Object.keys(registry);\n  }\n\n  return self;\n}\n\nmodule.exports = regg();","map":{"version":3,"sources":["/var/www/html/RymindrAppNew/node_modules/react-form-builder2/lib/stores/registry.js"],"names":["regg","registry","self","register","list","get","name","entry","Error","undefined","concat","hasOwnProperty","console","error","Object","keys","module","exports"],"mappings":"AAAA;AAEA;;AACA,SAASA,IAAT,GAAgB;AACd,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,IAAI,GAAG;AACTC,IAAAA,QAAQ,EAAEA,QADD;AAETC,IAAAA,IAAI,EAAEA,IAFG;AAGTC,IAAAA,GAAG,EAAEA;AAHI,GAAX;AAKA;AACF;AACA;AACA;AACA;;AAEE,WAASF,QAAT,CAAkBG,IAAlB,EAAwBC,KAAxB,EAA+B;AAC7B,QAAI,CAACD,IAAL,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,QAAIP,QAAQ,CAACK,IAAD,CAAR,KAAmBG,SAAvB,EAAkC;AAChC,YAAM,IAAID,KAAJ,CAAU,IAAIE,MAAJ,CAAWJ,IAAX,EAAiB,sBAAjB,CAAV,CAAN;AACD;;AAED,QAAI,CAACC,KAAL,EAAY;AACV,YAAM,IAAIC,KAAJ,CAAU,8CAA8CE,MAA9C,CAAqDJ,IAArD,EAA2D,GAA3D,CAAV,CAAN;AACD;;AAEDL,IAAAA,QAAQ,CAACK,IAAD,CAAR,GAAiBC,KAAjB;AACA,WAAOL,IAAP;AACD;;AAED,WAASG,GAAT,CAAaC,IAAb,EAAmB;AACjB;AACA,QAAI,CAACL,QAAQ,CAACU,cAAT,CAAwBL,IAAxB,CAAL,EAAoC;AAClCM,MAAAA,OAAO,CAACC,KAAR,CAAc,kBAAkBH,MAAlB,CAAyBJ,IAAzB,EAA+B,GAA/B,CAAd;AACD;;AAED,WAAOL,QAAQ,CAACK,IAAD,CAAf;AACD;;AAED,WAASF,IAAT,GAAgB;AACd,WAAOU,MAAM,CAACC,IAAP,CAAYd,QAAZ,CAAP;AACD;;AAED,SAAOC,IAAP;AACD;;AAEDc,MAAM,CAACC,OAAP,GAAiBjB,IAAI,EAArB","sourcesContent":["\"use strict\";\n\n/* eslint-disable no-use-before-define */\nfunction regg() {\n  var registry = {};\n  var self = {\n    register: register,\n    list: list,\n    get: get\n  };\n  /**\r\n   * Registers a entry and make it read only\r\n   * @param {String} name To get the entry by\r\n   * @param {Object} entry What you want to register\r\n   */\n\n  function register(name, entry) {\n    if (!name) {\n      throw new Error('You must provide a valid name for this entry.');\n    }\n\n    if (registry[name] !== undefined) {\n      throw new Error(\"'\".concat(name, \"' already registered\"));\n    }\n\n    if (!entry) {\n      throw new Error(\"You must provide something to register as '\".concat(name, \"'\"));\n    }\n\n    registry[name] = entry;\n    return self;\n  }\n\n  function get(name) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!registry.hasOwnProperty(name)) {\n      console.error(\"No such entry '\".concat(name, \"'\"));\n    }\n\n    return registry[name];\n  }\n\n  function list() {\n    return Object.keys(registry);\n  }\n\n  return self;\n}\n\nmodule.exports = regg();"]},"metadata":{},"sourceType":"script"}